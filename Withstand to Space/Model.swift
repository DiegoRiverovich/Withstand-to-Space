//
//  Model.swift
//  Withstand to Space
//
//  Created by Андрей Бабий on 12.10.17.
//  Copyright © 2017 Андрей Бабий. All rights reserved.
//

import Foundation
import SpriteKit
import GoogleMobileAds




var inviteToReview: Bool = false
var inviteCount: Int = 0

var visualyImpairedStatus: Bool = false

var trioPrice: String = ""
var doublePrice: String = ""
var invisiblePrice: String = ""
var removeAdsPrice: String = ""

enum RuningDeviceEnum {
    case phone
    case pad
    case other
}
var runingDevice = RuningDeviceEnum.other

//var playerIsSetup: Bool = false

enum IAPProduct: String {
    case trioProduct =       "NiceAttireGames.com.WithstandtoSpace.trio"
    case rougeProduct =      "NiceAttireGames.com.WithstandtoSpace.double"
    case invisibleProduct =  "NiceAttireGames.com.WithstandtoSpace.invisible"
    case deleteAds =         "NiceAttireGames.com.WithstandtoSpace.removeAds"
}

enum GameMode {
    case survival
    case normal
}

var gameMode = GameMode.normal

var adsAttemtps: Int = 5
var ads: GADInterstitial!
var programmIsPaid: Bool = false

// Second status active
var trioTimeActive: Double = 0 {
    didSet {
        
    }
}
var rougeOneTimeActive: Double = 0
{
    didSet {
        
    }
}
var InvisibleTimeActive: Double = 0
    
{
    didSet {
        
    }
}

var planet = 1

var activeLevel = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]   // Can play level on not  1 - can ,  0 - can't
var active2Level = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]  // Can play level on not  1 - can ,  0 - can't
var active3Level = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]  // Can play level on not  1 - can ,  0 - can't

var paidLevel = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]   // Can play level on not  1 - can ,  0 - can't
var paid2Level = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]  // Can play level on not  1 - can ,  0 - can't
var paid3Level = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]  // Can play level on not  1 - can ,  0 - can't

var puzzle = false   // Puzzle on this level or not
var puzzleIsColors = true   // colors of characters

var levelWithChargedMine = false

enum gameDots: Int {
    case red = 0
    case yellow = 1
    case blue = 2
}

var firstDot = false
var secondDot = false
var thirdDot = false

var lvlsPage = 1

var musicIsPlaying: Bool = false
var soundsIsOn: Bool = false

// +++++++++ LevelsScene

let levelStars: [[Int]] = [
    [10,15,22],   // 1
    [12,18,25],   // 2
    [10,26,29],   // 3
    [14,29,35],   // 4
    [10,29,34],   // 5
    [10,30,35],   // 6
    [4,10,12],   // 7
    [8,12,16],   // 8
    [9,27,36],   // 9
    [10,15,20],   // 10
    [10,14,18],   // 11
    [10,14,17]   // 12
]

let level2Stars: [[Int]] = [
    [7,12,14],   // 1
    [9,15,19],   // 2
    [8,10,12],   // 3
    [40,50,60],   // 4
    [15,23,30],   // 5
    [25,35,42],   // 6
    [15,20,29],   // 7
    [4,6,8],   // 8
    [17,25,31],   // 9
    [5,8,11],   // 10
    [7,10,11],   // 11
    [10,14,22]   // 12
]

let level3Stars: [[Int]] = [
    [7,16,18],   // 1
    [10,13,18],   // 2
    [15,25,34],   // 3
    [25,35,45],   // 4
    [15,25,31],   // 5
    [5,8,11],   // 6
    [8,14,18],   // 7
    [50,75,101],   // 8
    [16,28,34],   // 9
    [3,5,8],   // 10
    [5,9,11],   // 11
    [12,18,24]   // 12
]

// -------- LevelsScene

var startScreenCount = 1

enum Language {
    case en
    case ru
    case ch
    case es
    case jp
    case fr
    case gr
}
var preferredLanguage = Language.en
var choosenLanguage = Language.en
var setLang = false

var showTrioSP: Bool = false
var showRougeSP: Bool = false
var showInvisibleSP: Bool = false

var engineUpgrade: Bool = false
var flapsUpgrade: Bool = false
var trioUpgrade: Bool = false
var doubleUpgrade: Bool = false
var invisibleUpgrade: Bool = false

var hintLevel: Bool = false
var canMoveUpAndDown: Bool = true
var shipExplode: Bool = false
var onlyTopLevel: Bool = false

var constructionLevelDurationTimerInterval: Int = 14

var scoreZeroStars = 0
var scoreOneStar = 1
var scoreTwoStar = 2
var scoreThreeStars = 3

var lvlScore: [Int] = [0,0,0,0,0,0,0,0,0,0,0,0]
var lvl2Score: [Int] = [0,0,0,0,0,0,0,0,0,0,0,0]
var lvl3Score: [Int] = [0,0,0,0,0,0,0,0,0,0,0,0]

//++GameOverScene

var highScoreNumber: Int = 0
var highScoreNumberSurvival: Int = 0
var nickName = "noname"

//--GameOverScene

//++GameScene
enum BodyType: UInt32 {
    case player = 1
    case barrier = 2
    case cD = 4
    case other = 8
    case partition = 16
    case debris = 32
}

enum gameState {
    case beforeGame
    case inGame
    case afterGame
    case puzzle
}

struct SomeNames {
    static let soulStar = "SoulStar"
    static let fontName = "elitedanger"
    static let fontNameFutura = "Futura"
    static let fontNameVenusrising = "Venus Rising"
    static let fontNameHelvetica = "Helvetica"
    static let fontNameHelveticaNeue = "HelveticaNeue"
    static let fontNameArialRounded = "Arial Rounded MT Bold"
    static let blowTheShip = NSNotification.Name("Ship Contact Partition")
    // Buttons
    static let normalStatusButton = "statusNormalButton"
    static let trioStatusButton = "statusTrioButton"
    static let rougeOneStatusButton = "statusRougeOneButton"
    static let invisibleStatusButton = "statusInvisibleButton"
}



enum DebrisSpeed: Int {
    case slow = 10
    case middle = 7
    case fast = 4
}

enum PartitionSpeed: TimeInterval {
    case slowHigh = 19
    case slowLow = 18
    case middleHigh = 12
    case middleLow = 11
    case fastHigh = 7
    case fastLow = 6
    
}

var debrisSpeed = DebrisSpeed.fast
var partitionSpeedHigh = PartitionSpeed.fastHigh
var partitionSpeedLow = PartitionSpeed.fastLow
var score = 0
var summaryScore = 0
var currentLevelHighScore = 0
var level = 0

var currentGameStatus = gameState.inGame
//--GameScene

//++Plaer
enum ShipStatus {
    case noraml
    case trio
    case rogueOne
    case invisible
}

enum ShipSpeedMovement: TimeInterval {
    case slow = 0.6
    case normal = 0.4
    case fast = 0.2
}

var shipSpeedMovement = ShipSpeedMovement.fast


struct PlayerPosition {
    static let lowLeft620 = CGPoint(x: /*620*//*570*//*550*/555, y: 512)
    static let lowCenter768 = CGPoint(x: 768, y: 512)
    static let lowRight925 = CGPoint(x: /*925*//*975*//*995*/990, y: 512)
    
    static let middleLeft535 = CGPoint(x: /*535*//*455*//*475*//*465*/460, y: 512)
    static let middleCenter768 = CGPoint(x: 768, y: 512)
    static let middleRight1010 = CGPoint(x: /*1010*//*1070*//*1080*/1095, y: 512)
    
    static let highLeft450 = CGPoint(x: /*450*//*350*//*360*/330, y: 512)
    static let highCenter768 = CGPoint(x: 768, y: 512)
    static let highRight1095 = CGPoint(x: /*1095*//*1195*//*1185*/1220, y: 512)
}

struct DebrisPosition {
    static let lowLeft620 = CGPoint(x: /*620*//*570*//*550*/555, y: 2200)
    static let lowCenter768 = CGPoint(x: 768, y: 2200)
    static let lowRight925 = CGPoint(x: /*925*//*975*//*995*/990, y: 2200)
    
    static let middleLeft535 = CGPoint(x: /*535*//*455*//*475*//*435*/445, y: 2500)
    static let middleCenter768 = CGPoint(x: 768, y: 2500)
    static let middleRight1010 = CGPoint(x: /*1010*//*1070*//*1110*/1100, y: 2500)
    
    static let highLeft450 = CGPoint(x: /*450*//*350*//*360*//*280*//*300*/310, y: 2900)
    static let highCenter768 = CGPoint(x: 768, y: 2900)
    static let highRight1095 = CGPoint(x: /*1095*//*1195*//*1185*//*1265*//*1245*/1235, y: 2900)
}


struct MiddleBarrierPosition {
    static let lowLeft620 = CGPoint(x: /*694*//*674*/664, y: 2200)
    //static let lowCenter768 = CGPoint(x: 768, y: 2200)
    static let lowRight925 = CGPoint(x: /*848.5*//*868.5*/878.5, y: 2200)
    
    static let middleLeft535 = CGPoint(x: /*651.5*//*631.5*/611.5, y: 2500)
    //static let middleCenter768 = CGPoint(x: 768, y: 2500)
    static let middleRight1010 = CGPoint(x: /*889*//*909*/929, y: 2500)
    
    static let highLeft450 = CGPoint(x: /*609*//*569*//*534*/544, y: 2900)
    //static let highCenter768 = CGPoint(x: 768, y: 2900)
    static let highRight1095 = CGPoint(x: /*931.5*//*971.5*//*1006.5*/996.5, y: 2900)
}

struct ShipScale {
    static let small: CGFloat = 0.6
    static let middle: CGFloat = 0.9
    static let big: CGFloat = 1.3
}

var shipStatus = ShipStatus.noraml

//--Player

let levels = [levelOne, levelTwo, levelThree, levelFour, levelFive, levelSix, levelSeven, levelEight, levelNine, levelTen, levelEleven, levelTwelve]
let levels2 = [level2One, level2Two, level2Three, level2Four, level2Five, level2Six, level2Seven, level2Eight, level2Nine, level2Ten, level2Eleven, level2Twelve]
let levels3 = [level3One, level3Two, level3Three, level3Four, level3Five, level3Six, level3Seven, level3Eight, level3Nine, level3Ten, level3Eleven, level3Twelve]

let levelOne: [[Int]] = [
    // Debris, barriers settitns: 1 debis(mine), 0 nothingy, 2 barrier(bonus), 4 middle barrier
    
    // Partition settings: 1 MAXleft, 2 MIDLeft 3 center, 4 MIDReight, 5 MAXRight, 6 Center 90 degres. First number 2 zPosition, second 4 zPosition
    // Partitions settings: First Low position 2z , second high position 4z
    
    // 22 bonus
    
    // low          middle        high       partition settings
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,1,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0,   1],    // 5
    [0,0,0,0,0,   2,0,0,0,1,   0,0,0,0,0,   0,0,   1],
    
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,1,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,0,0,1,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0,   1],    // 10 mid 1 0 1
    
    [0,0,0,0,0,   1,0,0,0,1,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   2,0,1,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,1,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0,   1],     // 15
    
    [0,0,0,0,0,   1,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,1,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0,   1],        // 20
    
    [0,0,0,0,0,   2,0,1,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,1,0,2,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   2,0,1,0,0,   0,0,0,0,0,   0,0,   1],     // 25
    
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,1,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,0,0,0,   0,0,0,0,0,   0,0,   1],    // 30
    
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,2,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   2,0,1,0,0,   0,0,0,0,0,   0,0,   1],      // 35
    
    [0,0,0,0,0,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,1,0,2,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,1,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,0,0,1,   0,0,0,0,0,   0,0,   1],    // 40
    
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,2,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,1,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,2,0,1,   0,0,0,0,0,   0,0,   1],     // 45
    
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,1,0,2,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,0,0,1,   0,0,0,0,0,   0,0,   1]        // 48
]

let levelTwo: [[Int]] = [
    // Debris, barriers settitns: 1 debis(mine), 0 nothingy, 2 barrier(bonus), 4 middle barrier
    // Partition settings: 0 nothingy, 1 low, 2 high
    
    // low          middle        high       partition settings
    // Debris, barriers settitns: 1 debis, 0 nothingy, 2 barrier, 4 middle barrier
    
    // Partition settings: 1 MAXleft, 2 MIDLeft 3 center, 4 MIDReight, 5 MAXRight, 6 Center 90 degres. First number 2 zPosition, second 4 zPosition
    // Partitions settings: First Low position 2z , second high position 4z
    
    // 23 bonus
    
    // low          middle        high       partition settings
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,1,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,1,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,0,0,0,   0,0,0,0,0,   0,0,   1],    // 5
    
    [0,0,0,0,0,   1,0,1,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,2,0,1,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   1,4,9,4,1,   0,0,0,0,0,   0,0,   1],    // 10
    
    [0,0,0,0,0,   0,0,2,0,1,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,1,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,0,0,1,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   2,0,1,0,0,   0,0,0,0,0,   0,0,   1],     // 15
    
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,1,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,2,0,2,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,1,0,0,   0,0,0,0,0,   0,0,   1],    // 20
    
    [0,0,0,0,0,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,1,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0,   1],    // 25
    
    [0,0,0,0,0,   2,0,1,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   9,0,1,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   2,0,1,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,2,   0,0,0,0,0,   0,0,   1],     // 30
    
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,1,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,0,0,0,   0,0,0,0,0,   0,0,   1],    // 35
    
    [0,0,0,0,0,   1,0,0,0,1,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,2,   0,0,0,0,0,   0,0,   1],    // 40
    
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   2,0,1,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,1,0,2,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,1,0,0,   0,0,0,0,0,   0,0,   1],     // 45
    
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,0,0,1,   0,0,0,0,0,   0,0,   1],    // 50
    
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,2,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,1,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,0,0,1,   0,0,0,0,0,   0,0,   1],    // 55
    
    [0,0,0,0,0,   1,0,2,0,1,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,0,0,1,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,2,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,0,0,1,   0,0,0,0,0,   0,0,   1],    //60
]

let levelThree: [[Int]] = [
    // Debris, barriers settitns: 1 debis(mine), 0 nothingy, 2 barrier(bonus), 4 middle barrier
    
    // Partition settings: 1 MAXleft, 2 MIDLeft 3 center, 4 MIDReight, 5 MAXRight, 6 Center 90 degres. First number 2 zPosition, second 4 zPosition
    // Partitions settings: First Low position 2z , second high position 4z
    
    // 28 bonus
    
    // low          middle        high       partition settings
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,0,0,0,   1,0,1,0,1,   0,0,   1],
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,1,   0,0,2,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,0,0,0,   0,0,0,0,0,   0,0,   1],    // 5
    
    [0,0,0,0,0,   1,0,1,0,0,   0,0,1,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,1,   0,0,2,0,1,   0,0,   1],
    [0,0,0,0,0,   0,0,2,0,0,   0,0,1,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,1,0,0,   1,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,0,0,1,   0,0,1,0,0,   0,0,   1],    // 10
    
    [0,0,0,0,0,   0,0,2,0,1,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,1,   1,0,1,0,1,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,2,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,2,0,1,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,0,0,2,   0,0,0,0,1,   0,0,   1],     // 15
    
    [0,0,0,0,0,   0,0,2,0,0,   1,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,1,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,2,0,2,   1,0,0,0,1,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,1,0,0,   0,0,1,0,0,   0,0,   1],    // 20
    
    [0,0,0,0,0,   0,0,0,0,0,   0,0,2,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,1,   1,0,0,0,1,   0,0,   1],
    [0,0,0,0,0,   0,0,2,0,0,   0,0,1,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,0,   2,0,1,0,0,   0,0,   1],
    [0,0,0,0,0,   2,0,1,0,0,   0,0,0,0,0,   0,0,   1],    // 25
    
    [0,0,0,0,0,   1,0,1,0,0,   1,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,2,   0,0,0,0,1,   0,0,   1],
    [0,0,0,0,0,   1,0,1,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,0,   1,0,0,0,1,   0,0,   1],
    [0,0,0,0,0,   2,0,1,0,0,   0,0,0,0,0,   0,0,   1],     // 30
    
    [0,0,0,0,0,   0,0,2,0,0,   1,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,1,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,1,   0,0,   1],
    [0,0,0,0,0,   1,0,1,0,0,   0,0,1,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,0,0,0,   1,0,0,0,0,   0,0,   1],    // 35
    
    [0,0,0,0,0,   1,0,0,0,1,   0,0,1,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,1,   0,0,   1],
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,1,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,2,   1,0,0,0,0,   0,0,   1],    // 40
    
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,1,   0,0,   1],
    [0,0,0,0,0,   2,0,1,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,1,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,1,0,2,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,1,0,0,   1,0,1,0,1,   0,0,   1],     // 45
    
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,1,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,0,   1,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,0,0,1,   0,0,0,0,0,   0,0,   1],    // 50
    
    [0,0,0,0,0,   0,0,1,0,0,   2,0,0,0,1,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,2,0,0,   0,0,1,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,1,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,0,0,1,   1,0,0,0,0,   0,0,   1],    // 55
    
    [0,0,0,0,0,   1,0,2,0,1,   0,0,1,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,1,   0,0,   1],
    [0,0,0,0,0,   1,0,0,0,1,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,2,   1,0,0,0,1,   0,0,   1],
    [0,0,0,0,0,   1,0,0,0,1,   0,0,1,0,1,   0,0,   1],    //60
]

let levelFour: [[Int]] = [
    // Debris, barriers settitns: 1 debis(mine), 0 nothingy, 2 barrier(bonus), 4 middle barrier
    
    // Partition settings: 1 MAXleft, 2 MIDLeft 3 center, 4 MIDReight, 5 MAXRight, 6 Center 90 degres. First number 2 zPosition, second 4 zPosition
    // Partitions settings: First Low position 2z , second high position 4z
    
    // 34 bonus
    
    // low          middle        high       partition settings
    [0,0,0,0,0,   1,0,0,0,2,   1,0,0,0,1,   0,0,   1],
    [0,0,0,0,0,   1,0,0,0,0,   1,0,1,0,1,   0,0,   1],
    [0,0,0,0,0,   2,0,1,0,0,   0,0,0,0,1,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,1,   1,0,2,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,0,0,0,   0,0,0,0,0,   0,0,   1],    // 5
    
    [0,0,0,0,0,   1,0,1,0,0,   0,0,1,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,0,0,1,   0,0,2,0,1,   0,0,   1],
    [0,0,0,0,0,   0,0,2,0,1,   0,0,1,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,1,0,0,   1,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,0,0,1,   0,0,1,0,0,   0,0,   1],    // 10
    
    [0,0,0,0,0,   0,0,2,0,1,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,0,0,1,   0,0,1,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,2,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,2,0,1,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,0,0,1,   0,0,0,0,1,   0,0,   1],     // 15
    
    [0,0,0,0,0,   0,0,2,0,0,   1,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,1,0,1,   1,0,9,0,1,   0,0,   1],      // puzzle
    [0,0,0,0,0,   0,0,2,0,1,   1,0,0,0,1,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,2,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,1,0,0,   0,0,1,0,0,   0,0,   1],    // 20
    
    [0,0,0,0,0,   0,0,0,0,0,   0,0,2,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,1,0,1,   1,0,0,0,1,   0,0,   1],
    [0,0,0,0,0,   0,0,2,0,0,   0,0,1,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,0,   2,0,1,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0,   1],    // 25
    
    [0,0,0,0,0,   1,0,1,0,0,   1,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,2,0,1,   0,0,   1],
    [0,0,0,0,0,   1,0,1,0,2,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,0,   1,0,0,0,1,   0,0,   1],
    [0,0,0,0,0,   2,0,1,0,0,   0,0,0,0,0,   0,0,   1],     // 30
    
    [0,0,0,0,0,   0,0,2,0,0,   1,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,1,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,1,   0,0,   1],
    [0,0,0,0,0,   1,0,1,0,0,   0,0,1,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,0,0,0,   1,0,0,0,0,   0,0,   1],    // 35
    
    [0,0,0,0,0,   1,0,0,0,1,   0,0,1,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,1,   0,0,   1],
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,1,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,2,   0,0,0,0,0,   0,0,   1],    // 40
    
    [0,0,0,0,0,   0,0,1,0,0,   1,0,0,0,1,   0,0,   1],
    [0,0,0,0,0,   2,0,1,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,0,   2,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,0,0,2,   0,0,1,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,1,0,0,   1,0,0,0,1,   0,0,   1],     // 45
    
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,0,   2,0,1,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,0,   1,0,2,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,0,0,1,   0,0,0,0,0,   0,0,   1],    // 50
    
    [0,0,0,0,0,   0,0,1,0,0,   2,0,0,0,1,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,2,0,0,   0,0,1,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,1,0,0,   0,0,2,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,0,0,1,   1,0,0,0,0,   0,0,   1],    // 55
    
    [0,0,0,0,0,   1,0,2,0,1,   0,0,1,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,1,   0,0,   1],
    [0,0,0,0,0,   1,0,0,0,1,   2,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,2,0,1,   1,0,0,0,1,   0,0,   1],
    [0,0,0,0,0,   1,0,0,0,1,   2,0,1,0,1,   0,0,   1],    //60
]

let levelFive: [[Int]] = [
    // Debris, barriers settitns: 1 debis(mine), 0 nothingy, 2 barrier(bonus), 4 middle barrier
    
    // Partition settings: 1 MAXleft, 2 MIDLeft 3 center, 4 MIDReight, 5 MAXRight, 6 Center 90 degres. First number 2 zPosition, second 4 zPosition
    // Partitions settings: First Low position 2z , second high position 4z
    
    // 34 bonus
    
    // low          middle        high       partition settings
    [1,0,1,0,1,   1,0,0,0,2,   1,0,0,0,1,   0,0,   1],
    [0,0,0,0,0,   1,0,0,0,0,   1,0,1,0,1,   0,0,   1],
    [1,0,2,0,1,   0,0,1,0,0,   0,0,0,0,1,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,1,   1,0,2,0,0,   0,0,   1],
    [0,0,1,0,0,   1,0,0,0,0,   0,0,0,0,0,   0,0,   1],    // 5
    
    [0,0,0,0,0,   1,0,1,0,0,   0,0,1,0,0,   0,0,   1],
    [2,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,1,   0,0,1,0,0,   0,0,   1],
    [0,0,1,0,0,   1,0,1,0,0,   1,0,0,0,0,   0,0,   1],
    [1,0,0,0,0,   1,0,0,0,1,   0,0,0,0,0,   0,0,   1],    // 10
    
    [0,0,1,0,0,   0,0,2,0,1,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,0,0,1,   0,0,1,0,0,   0,0,   1],
    [0,0,2,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,0,0,1,   0,0,0,0,0,   0,0,   1],
    [1,0,0,0,0,   1,0,0,0,2,   0,0,0,0,1,   0,0,   1],     // 15
    
    [0,0,1,0,0,   0,0,2,0,0,   1,0,0,0,0,   0,0,   1],
    [1,0,0,0,0,   1,0,1,0,0,   0,0,1,0,0,   0,0,   1],
    [0,0,0,0,1,   0,0,2,0,1,   1,0,0,0,1,   0,0,   1],
    [0,0,2,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0,   1],
    [1,0,0,0,0,   1,0,3,0,0,   0,0,1,0,0,   0,0,   1],    // 20
    
    [0,0,1,0,0,   0,0,0,0,0,   0,0,2,0,0,   0,0,   1],
    [1,0,0,0,0,   1,0,1,0,1,   1,0,0,0,1,   0,0,   1],
    [0,0,0,0,1,   0,0,2,0,0,   0,0,1,0,0,   0,0,   1],
    [1,0,0,0,0,   0,0,0,0,0,   0,0,1,0,0,   0,0,   1],
    [0,0,1,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0,   1],    // 25
    
    [0,0,0,0,0,   1,0,0,0,0,   1,0,0,0,0,   0,0,   1],
    [0,0,2,0,1,   0,0,1,0,0,   0,0,0,0,1,   0,0,   1],
    [1,0,2,0,1,   1,0,1,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,2,   1,0,1,0,1,   0,0,   1],
    [1,0,0,0,1,   2,0,1,0,0,   0,0,0,0,0,   0,0,   1],     // 30
    
    [0,0,0,0,0,   0,0,0,0,0,   1,0,0,0,0,   0,0,   1],
    [1,0,2,0,0,   0,0,1,0,0,   0,0,1,0,3,   0,0,   1],
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,1,   0,0,   1],
    [0,0,0,0,1,   1,0,1,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,2,0,0,   0,0,0,0,0,   1,0,0,0,0,   0,0,   1],    // 35
    
    [1,0,0,0,1,   1,0,0,0,1,   0,0,1,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,1,   0,0,   1],
    [1,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,1,0,0,   0,0,1,0,0,   1,0,1,0,0,   0,0,   1],
    [0,0,0,0,1,   0,0,0,0,2,   0,0,0,0,0,   0,0,   1],    // 40
    
    [0,0,0,0,0,   0,0,1,0,0,   1,0,0,0,1,   0,0,   1],
    [1,0,1,0,1,   2,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [1,0,1,0,1,   0,0,1,0,0,   2,0,1,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,1,0,2,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,0,0,0,   1,0,0,0,1,   0,0,   1],     // 45
    
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,1,0,0,   0,0,   1],
    [0,0,2,0,0,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,0,   1,0,2,0,0,   0,0,   1],
    [1,0,1,0,1,   1,0,0,0,1,   3,0,0,0,0,   0,0,   1],    // 50
    
    [0,0,0,0,0,   0,0,1,0,0,   2,0,0,0,1,   0,0,   1],
    [1,0,1,0,1,   0,0,1,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,1,0,0,   1,0,2,0,0,   0,0,1,0,0,   0,0,   1],
    [1,0,0,0,1,   1,0,1,0,0,   0,0,2,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,0,0,1,   1,0,0,0,0,   0,0,   1],    // 55
    
    [0,0,2,0,0,   1,0,0,0,1,   0,0,1,0,0,   0,0,   1],
    [1,0,0,0,0,   0,0,1,0,0,   0,0,0,0,1,   0,0,   1],
    [0,0,1,0,0,   1,0,0,0,1,   2,0,0,0,0,   0,0,   1],
    [2,0,0,0,0,   0,0,1,0,0,   1,0,0,0,1,   0,0,   1],
    [0,0,2,0,0,   1,0,0,0,1,   0,0,1,0,1,   0,0,   1],    //60
]

let levelSix: [[Int]] = [
    // Debris, barriers settitns: 1 debis(mine), 0 nothingy, 2 barrier(bonus), 4 middle barrier
    
    // Partition settings: 1 MAXleft, 2 MIDLeft 3 center, 4 MIDReight, 5 MAXRight, 6 Center 90 degres. First number 2 zPosition, second 4 zPosition
    // Partitions settings: First Low position 2z , second high position 4z
    
    // 35 bonus
    
    // low          middle        high       partition settings
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,1,0,0,   0,0,   1],
    [0,0,2,0,0,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,0,   1,0,2,0,0,   0,0,   1],
    [1,0,1,0,1,   1,0,0,0,1,   0,0,0,0,0,   0,0,   1],    // 5  3 bonus
    
    [0,0,0,0,0,   1,0,1,0,0,   0,0,1,0,0,   0,0,   1],
    [2,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,1,   0,0,1,0,0,   0,0,   1],
    [0,0,1,0,0,   1,0,1,0,0,   1,0,0,0,0,   0,0,   1],
    [1,0,0,0,0,   1,0,0,0,1,   0,0,0,0,0,   0,0,   1],    // 10  1
    
    [0,0,1,0,0,   0,0,2,0,1,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,0,0,1,   0,0,1,0,0,   0,0,   1],
    [0,0,2,0,0,   0,0,1,0,0,   1,0,0,0,1,   0,0,   1],
    [0,0,0,0,0,   2,0,1,0,0,   0,0,0,0,0,   0,0,   1],
    [1,0,0,0,0,   1,0,0,0,2,   0,0,0,0,1,   0,0,   1],     // 15  4
    
    [0,0,1,0,0,   0,0,0,0,0,   0,0,2,0,0,   0,0,   1],
    [1,0,0,0,0,   1,0,1,0,1,   1,0,0,0,1,   0,0,   1],
    [0,0,0,0,1,   0,0,2,0,0,   0,0,1,0,0,   0,0,   1],
    [1,0,0,0,0,   0,0,0,0,0,   0,0,1,0,0,   0,0,   1],
    [0,0,1,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0,   1],    // 20  2
    
    [1,0,1,0,1,   1,0,0,0,2,   1,0,0,0,1,   0,0,   1],
    [0,0,0,0,0,   1,0,0,0,0,   1,0,1,0,1,   0,0,   1],
    [1,0,2,0,1,   0,0,1,0,0,   0,0,0,0,1,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,1,   1,0,2,0,0,   0,0,   1],
    [0,0,1,0,0,   1,0,0,0,0,   0,0,0,0,0,   0,0,   1],    // 25  3
    
    [0,0,0,0,0,   0,0,0,0,0,   1,0,0,0,0,   0,0,   1],
    [1,0,2,0,0,   0,0,1,0,0,   0,0,1,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,1,   0,0,   1],
    [0,0,0,0,1,   1,0,1,0,0,   1,0,1,0,1,   0,0,   1],
    [0,0,2,0,0,   0,0,0,0,0,   1,0,0,0,0,   0,0,   1],    // 30  3
    
    [1,0,0,0,1,   1,0,0,0,1,   0,0,2,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,1,   0,0,   1],
    [1,0,0,0,0,   0,0,2,0,0,   0,0,1,0,0,   0,0,   1],
    [0,0,1,0,0,   0,0,1,0,0,   1,0,1,0,0,   0,0,   1],
    [0,0,0,0,1,   0,0,0,0,2,   0,0,0,0,0,   0,0,   1],    // 35  3
    
    [0,0,1,0,0,   0,0,2,0,0,   1,0,0,0,0,   0,0,   1],
    [1,0,0,0,0,   1,0,1,0,0,   0,0,1,0,0,   0,0,   1],
    [0,0,0,0,1,   0,0,2,0,1,   0,0,2,0,0,   0,0,   1],
    [0,0,2,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0,   1],
    [1,0,0,0,0,   1,0,1,0,0,   0,0,1,0,0,   0,0,   1],    // 40  4
    
    [0,0,0,0,0,   0,0,1,0,0,   1,0,0,0,1,   0,0,   1],
    [1,0,1,0,1,   2,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [1,0,1,0,1,   0,0,1,0,0,   2,0,1,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,1,0,2,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,0,0,0,   1,0,0,0,1,   0,0,   1],     // 45  3
    
    [0,0,0,0,1,   0,0,1,0,0,   2,0,0,0,1,   0,0,   1],
    [1,0,1,0,1,   0,0,1,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,1,0,0,   1,0,0,0,0,   0,0,1,0,0,   0,0,   1],
    [1,0,0,0,1,   1,0,0,0,0,   2,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,2,0,1,   1,0,0,0,0,   0,0,   1],    // 50  3
    
    [1,0,1,0,1,   1,0,0,0,1,   0,0,1,0,0,   0,0,   1],
    [1,0,0,0,0,   0,0,1,0,0,   0,0,0,0,1,   0,0,   1],
    [0,0,1,0,0,   1,0,0,0,1,   2,0,0,0,0,   0,0,   1],
    [2,0,0,0,0,   0,0,1,0,0,   1,0,0,0,1,   0,0,   1],
    [0,0,1,0,0,   1,0,0,0,1,   0,0,1,0,1,   0,0,   1],    //55  2
    
    [0,0,0,0,0,   1,0,0,0,0,   1,0,0,0,0,   0,0,   1],
    [0,0,2,0,1,   0,0,1,0,0,   0,0,0,0,1,   0,0,   1],
    [1,0,2,0,1,   1,0,1,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,2,   1,0,1,0,1,   0,0,   1],
    [1,0,0,0,1,   2,0,1,0,0,   0,0,0,0,0,   0,0,   1],     // 60  4
]

let levelSeven: [[Int]] = [
    // Debris, barriers settitns: 1 debis(mine), 0 nothingy, 2 barrier(bonus), 4 middle barrier
    
    // Partition settings: 1 MAXleft, 2 MIDLeft 3 center, 4 MIDReight, 5 MAXRight, 6 Center 90 degres. First number 2 zPosition, second 4 zPosition
    // Partitions settings: First Low position 2z , second high position 4z
    
    // 35 bonus
    
    // low          middle        high       partition settings
    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,0,0,1,   1,0,1,0,0,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   1,0,1,0,0,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   1,0,0,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   0,0,1,0,1,   0,0,   1],    // 5  0 bonus
    
    [1,0,1,0,1,   0,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [2,0,1,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   0,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   0,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   1,0,0,0,1,   0,0,   1],    // 10  1
    
    [1,0,1,0,1,   1,0,2,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,0,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,0,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,0,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   1,0,1,0,0,   0,0,   1],     // 15  1
    
    [1,0,1,0,1,   1,0,1,0,0,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   2,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [0,0,1,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [0,0,1,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],    // 20  1
    
    [1,0,1,0,1,   0,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   1,0,0,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   1,0,1,0,0,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,0,   1,0,1,0,1,   0,0,   1],    // 25  0
    
    [1,0,1,0,0,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,2,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   0,0,1,0,1,   1,0,1,0,1,   0,0,   1],    // 30  1
    
    [1,0,1,0,1,   1,0,1,0,1,   0,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   1,0,0,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   1,0,1,0,0,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   1,0,2,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],    // 35  1
    
    [1,0,1,0,1,   1,0,1,0,0,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,0,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,2,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,0,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,0,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],    // 40  1
    
    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,2,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   0,0,0,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   1,0,0,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   2,0,1,0,1,   0,0,   1],     // 45  2
    
    [1,0,1,0,1,   1,0,1,0,1,   1,0,0,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,0,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,2,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,0,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],    // 50  1
    
    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,0,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   1,0,2,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   0,0,1,0,1,   0,0,   1],    //55  1
    
    [1,0,1,0,1,   1,0,1,0,1,   1,0,0,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   2,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   0,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,0,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,2,   1,0,1,0,1,   0,0,   1],     // 60  2
]

let levelEight: [[Int]] = [
    // Debris, barriers settitns: 1 debis(mine), 0 nothingy, 2 barrier(bonus), 4 middle barrier
    
    // Partition settings: 1 MAXleft, 2 MIDLeft 3 center, 4 MIDReight, 5 MAXRight, 6 Center 90 degres. First number 2 zPosition, second 4 zPosition
    // Partitions settings: First Low position 2z , second high position 4z
    
    // 13 bonus
    
    // low          middle        high       partition settings
    [1,0,1,0,0,   1,0,0,0,1,   0,0,1,0,0,   1,0,   1],
    [2,0,0,0,1,   1,0,1,0,0,   1,0,1,0,1,   0,0,   1],
    [0,0,1,0,1,   1,0,0,0,1,   1,0,0,0,0,   2,0,   1],
    [0,0,1,0,0,   0,0,0,0,1,   1,0,0,0,1,   0,0,   1],
    [1,0,0,0,1,   0,0,0,0,1,   0,0,2,0,1,   0,0,   1],    // 5  1 bonus
    
    [1,0,1,0,1,   0,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [2,0,0,0,1,   1,0,0,0,0,   1,0,0,0,0,   0,0,   1],
    [1,0,1,0,1,   0,0,1,0,1,   0,0,0,0,0,   0,6,   1],
    [0,0,0,0,1,   0,0,1,0,2,   0,0,1,0,0,   0,0,   1],
    [1,0,0,0,1,   1,0,0,0,0,   1,0,2,0,1,   0,0,   1],    // 10  2
    
    [1,0,0,0,1,   0,0,0,0,1,   0,0,1,0,0,   0,0,   1],
    [1,0,0,0,0,   1,0,0,0,1,   0,0,0,0,1,   0,0,   1],
    [1,0,0,0,0,   0,0,2,0,1,   1,0,0,0,1,   5,0,   1],
    [0,0,1,0,0,   0,0,1,0,1,   0,0,1,0,1,   0,0,   1],
    [0,0,0,0,2,   0,0,0,0,1,   1,0,0,0,0,   0,0,   1],     // 15  2
    
    [0,0,1,0,0,   0,0,1,0,0,   0,0,2,0,1,   0,0,   1],
    [0,0,0,0,1,   0,0,0,0,1,   0,0,1,0,0,   0,4,   1],
    [1,0,1,0,1,   1,0,1,0,2,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   0,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [0,0,1,0,1,   1,0,0,0,1,   1,0,0,0,1,   0,0,   1],    // 20  2
    
    [0,0,1,0,0,   0,0,1,0,0,   0,0,1,0,1,   3,0,   1],
    [1,0,1,0,0,   0,0,0,0,1,   2,0,0,0,1,   0,0,   1],
    [1,0,0,0,0,   0,0,0,0,1,   0,0,0,0,1,   0,0,   1],
    [0,0,2,0,1,   0,0,0,0,1,   1,0,0,0,0,   0,1,   1],
    [1,0,1,0,1,   1,0,1,0,0,   1,0,1,0,1,   0,0,   1],    // 25  2
    
    [0,0,1,0,0,   0,0,2,0,1,   0,0,0,0,1,   0,0,   1],
    [1,0,0,0,0,   1,0,0,0,0,   1,0,0,0,0,   0,2,   1],
    [1,0,0,0,0,   1,0,0,0,1,   1,0,0,0,2,   0,0,   1],
    [0,0,0,0,1,   0,0,0,0,1,   1,0,0,0,0,   0,0,   1],
    [1,0,0,0,0,   0,0,1,0,1,   1,0,0,0,0,   1,0,   1],    // 30  3
    
    [2,0,0,0,1,   1,0,0,0,1,   0,0,0,0,1,   0,0,   1],
    [0,0,1,0,0,   1,0,0,0,1,   0,0,0,0,1,   0,0,   1],
    [0,0,0,0,1,   1,0,2,0,0,   0,0,1,0,0,   0,5,   1],
    [1,0,1,0,1,   1,0,1,0,0,   1,0,0,0,1,   0,0,   1],
    [0,0,0,0,1,   1,0,0,0,2,   1,0,1,0,0,   0,0,   1],    // 35  1

]

let levelNine: [[Int]] = [
    // Debris, barriers settitns: 1 debis(mine), 0 nothingy, 2 barrier(bonus), 4 middle barrier
    
    // Partition settings: 1 MAXleft, 2 MIDLeft 3 center, 4 MIDReight, 5 MAXRight, 6 Center 90 degres. First number 2 zPosition, second 4 zPosition
    // Partitions settings: First Low position 2z , second high position 4z
    
    // 13 bonus
    
    // low          middle        high       partition settings
    [1,0,1,0,0,   1,0,0,0,1,   0,0,1,0,0,   0,0,   1],
    [1,0,0,0,1,   1,0,1,0,0,   1,0,1,0,1,   0,0,   1],
    [0,0,1,0,1,   2,0,2,0,2,   1,0,0,0,0,   0,0,   1],
    [0,0,1,0,0,   1,0,0,0,1,   1,0,0,0,1,   0,0,   1],
    [1,0,0,0,1,   0,0,0,0,1,   0,0,2,0,1,   0,0,   1],    // 5  1 bonus
    
    [1,0,1,0,1,   0,0,1,0,1,   1,0,0,0,1,   0,0,   1],
    [2,0,0,0,1,   1,0,0,0,0,   1,0,0,0,0,   0,0,   1],
    [2,0,2,0,2,   1,0,0,0,1,   0,0,1,0,0,   0,0,   1],
    [0,0,0,0,1,   0,0,1,0,0,   0,0,1,0,0,   0,0,   1],
    [0,0,1,0,1,   1,0,0,0,0,   1,0,2,0,1,   0,0,   1],    // 10  2
    
    [1,0,0,0,1,   0,0,0,0,1,   0,0,1,0,1,   0,0,   1],
    [1,0,0,0,0,   1,0,0,0,1,   2,0,2,0,2,   0,0,   1],
    [0,0,0,0,1,   0,0,2,0,1,   1,0,0,0,1,   0,0,   1],
    [0,0,1,0,0,   0,0,1,0,1,   0,0,1,0,1,   0,0,   1],
    [0,0,2,0,1,   0,0,0,0,1,   1,0,0,0,1,   0,0,   1],     // 15  2
    
    [0,0,1,0,0,   0,0,1,0,0,   0,0,2,0,1,   0,0,   1],
    [0,0,1,0,0,   0,0,0,0,1,   0,0,1,0,0,   0,4,   1],
    [1,0,1,0,1,   2,0,2,0,2,   1,0,1,0,1,   0,0,   1],
    [0,0,0,0,1,   1,0,1,0,1,   0,0,1,0,1,   0,0,   1],
    [2,0,1,0,1,   1,0,0,0,1,   1,0,0,0,1,   0,0,   1],    // 20  2
    
    [0,0,1,0,0,   1,0,1,0,0,   0,0,1,0,1,   0,0,   1],
    [1,0,1,0,0,   0,0,0,0,1,   2,0,0,0,1,   0,0,   1],
    [1,0,0,0,0,   2,0,2,0,2,   0,0,1,0,1,   0,0,   1],
    [0,0,2,0,1,   0,0,0,0,1,   1,0,0,0,0,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,0,   1,0,1,0,1,   0,0,   1],    // 25  2
    
    [0,0,1,0,0,   0,0,2,0,1,   0,0,0,0,1,   0,0,   1],
    [1,0,0,0,0,   1,0,0,0,0,   0,0,0,0,1,   0,0,   1],
    [1,0,0,0,0,   1,0,0,0,1,   2,0,2,0,2,   0,0,   1],
    [0,0,2,0,1,   0,0,0,0,1,   1,0,0,0,0,   0,0,   1],
    [1,0,0,0,0,   0,0,2,0,1,   1,0,0,0,0,   0,0,   1],    // 30  3
    
    [0,0,0,0,1,   0,0,0,0,1,   0,0,1,0,1,   0,0,   1],
    [2,0,1,0,0,   1,0,0,0,1,   0,0,0,0,1,   0,0,   1],
    [0,0,1,0,1,   1,0,2,0,0,   0,0,1,0,0,   0,0,   1],
    [1,0,0,0,1,   1,0,1,0,0,   1,0,0,0,1,   0,0,   1],
    [0,0,0,0,1,   1,0,0,0,2,   2,0,2,0,2,   0,0,   1],    // 35  1
]

let levelTen: [[Int]] = [
    // Debris, barriers settitns: 1 debis(mine), 0 nothingy, 2 barrier(bonus), 4 middle barrier
    
    // Partition settings: 1 MAXleft, 2 MIDLeft 3 center, 4 MIDReight, 5 MAXRight, 6 Center 90 degres. First number 2 zPosition, second 4 zPosition
    // Partitions settings: First Low position 2z , second high position 4z
    
    // 14 bonus
    
    // low          middle        high       partition settings
    [0,0,1,0,0,   1,0,0,0,0,   0,0,0,0,1,   0,0,   1],
    [1,0,0,0,1,   0,0,1,0,0,   0,0,0,0,1,   0,0,   1],
    [0,0,0,0,1,   1,0,0,0,0,   1,0,0,0,0,   0,0,   1],
    [0,0,1,0,0,   2,0,2,0,2,   1,0,0,0,1,   0,0,   1],
    [2,0,0,0,1,   0,0,0,0,1,   1,0,0,0,1,   0,0,   1],    // 5  2 bonus
    
    [1,0,1,0,1,   1,0,9,0,1,   1,0,1,0,1,   0,0,   1],
    [0,0,0,0,1,   1,0,0,0,0,   1,0,0,0,0,   0,0,   1],
    [1,0,0,0,0,   0,0,0,0,1,   0,0,1,0,0,   0,0,   1],
    [0,0,0,0,1,   0,0,1,0,0,   0,0,1,0,0,   0,0,   1],
    [0,0,1,0,2,   1,0,0,0,0,   1,0,1,0,0,   0,0,   1],    // 10  2
    
    [1,0,0,0,0,   0,0,0,0,1,   0,0,0,0,1,   0,0,   1],
    [1,0,0,0,0,   1,0,0,0,0,   0,0,1,0,0,   0,0,   1],
    [2,0,2,0,2,   2,0,2,0,2,   1,0,0,0,0,   0,0,   1],
    [0,0,1,0,0,   1,0,0,0,0,   0,0,1,0,1,   0,0,   1],
    [0,0,1,0,1,   1,0,0,0,1,   1,0,0,0,1,   0,0,   1],     // 15  2
    
    [1,0,9,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,0,0,0,   1,0,0,0,1,   1,0,1,0,0,   0,0,   1],
    [0,0,0,0,1,   1,0,0,0,0,   0,0,0,0,1,   0,0,   1],
    [1,0,0,0,1,   0,0,0,0,1,   0,0,1,0,0,   0,0,   1],
    [0,0,1,0,0,   0,0,0,0,1,   2,0,0,0,1,   0,0,   1],    // 20  2
    
    [1,0,1,0,0,   0,0,1,0,0,   1,0,1,0,0,   0,0,   1],
    [0,0,1,0,0,   1,0,0,0,1,   0,0,0,0,1,   0,0,   1],
    [1,0,1,0,0,   0,0,1,0,0,   1,0,0,0,1,   0,3,   1],
    [1,0,0,0,1,   1,0,0,0,1,   2,0,2,0,2,   0,0,   1],
    [1,0,0,0,0,   1,0,0,0,0,   0,0,0,0,1,   0,0,   1],    // 25  2
    
    [1,0,1,0,0,   0,0,0,0,1,   0,0,0,0,1,   0,0,   1],
    [1,0,0,0,0,   1,0,1,0,0,   0,0,0,0,1,   0,0,   1],
    [1,0,0,0,0,   1,0,0,0,0,   1,0,1,0,0,   0,0,   1],
    [0,0,0,0,1,   0,0,0,0,1,   1,0,0,0,0,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   1,0,9,0,1,   0,0,   1],    // 30  2
    
    [0,0,0,0,1,   0,0,0,0,1,   1,0,2,0,1,   0,0,   1],
    [0,0,1,0,0,   0,0,0,0,1,   0,0,0,0,1,   0,0,   1],
    [1,0,1,0,0,   1,0,0,0,1,   1,0,1,0,0,   0,0,   1],
    [1,0,0,0,0,   1,0,0,0,0,   1,0,0,0,1,   0,0,   1],
    [0,0,1,0,1,   1,0,0,0,2,   1,0,1,0,0,   0,0,   1],    // 35  2
]

let levelEleven: [[Int]] = [
    // Debris, barriers settitns: 1 debis(mine), 0 nothingy, 2 barrier(bonus), 4 middle barrier
    
    // Partition settings: 1 MAXleft, 2 MIDLeft 3 center, 4 MIDReight, 5 MAXRight, 6 Center 90 degres. First number 2 zPosition, second 4 zPosition
    // Partitions settings: First Low position 2z , second high position 4z
    
    // 14 bonus
    
    // low          middle        high       partition settings
    [0,0,1,0,0,   1,0,0,0,0,   0,0,0,0,1,   0,0,   1],
    [1,0,0,0,1,   0,2,1,0,0,   0,0,0,0,1,   0,0,   1],//1
    [0,0,0,0,1,   1,0,0,0,0,   1,0,0,0,0,   0,0,   1],
    [0,0,1,0,0,   0,0,0,0,1,   1,0,0,0,1,   0,0,   1],
    [2,0,0,0,1,   0,0,0,0,1,   0,0,2,0,1,   0,0,   1],    // 5  2 bonus
    
    [1,0,1,0,0,   0,0,1,0,0,   0,0,0,0,1,   0,0,   1],
    [0,0,0,0,1,   1,0,0,0,0,   1,0,0,0,0,   0,0,   1],
    [1,0,2,0,0,   0,0,0,0,1,   0,0,1,0,0,   0,0,   1],//1
    [0,0,0,0,1,   0,0,1,0,0,   0,0,1,0,0,   0,0,   1],
    [0,0,1,0,2,   1,0,0,0,0,   1,0,2,0,0,   0,0,   1],    // 10  2
    
    [1,0,0,0,0,   0,0,2,0,1,   0,0,0,0,1,   0,0,   1],//1
    [1,0,0,0,0,   1,0,0,0,0,   0,0,1,0,0,   0,0,   1],
    [0,0,0,0,1,   0,0,0,0,1,   1,0,0,0,0,   0,0,   1],
    [0,0,1,0,0,   0,0,1,0,0,   0,0,0,0,1,   0,0,   1],
    [0,0,2,0,1,   2,0,0,0,1,   1,0,0,0,1,   0,0,   1],     // 15  2
    
    [0,0,1,0,0,   0,0,1,0,0,   0,0,0,0,1,   0,0,   1],
    [0,0,1,0,0,   0,0,0,0,1,   0,0,1,0,0,   0,0,   1],
    [0,0,0,0,1,   1,0,0,0,0,   0,0,0,0,1,   0,0,   1],
    [0,0,0,0,1,   0,0,0,0,1,   0,0,1,0,0,   0,0,   1],
    [0,0,1,0,0,   0,0,0,0,1,   2,0,0,0,2,   0,0,   1],    // 20  2
    
    [0,0,0,0,0,   0,0,0,0,0,   0,0,1,0,0,   0,0,   1],
    [1,4,0,4,1,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,2,0,0,   2,0,0,0,0,   0,3,   1],
    [0,0,0,0,0,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,0,0,0,   0,0,1,0,0,   0,0,   1],    // 25  2
    
    [0,0,1,0,0,   0,0,0,0,1,   0,0,0,0,1,   0,0,   1],
    [1,0,0,0,0,   1,0,2,0,0,   0,0,0,0,1,   0,0,   1],//1
    [1,0,0,0,0,   1,0,0,0,0,   1,0,0,0,0,   0,0,   1],
    [0,0,0,0,1,   0,0,0,0,1,   1,0,0,0,0,   0,0,   1],
    [2,0,1,0,0,   0,0,2,0,1,   1,0,0,0,0,   0,0,   1],    // 30  2
    
    [0,0,0,0,1,   0,0,0,0,1,   0,0,0,0,1,   0,0,   1],
    [0,0,1,0,0,   0,0,0,0,1,   0,0,0,0,1,   0,0,   1],
    [0,0,1,0,0,   1,0,0,0,0,   0,0,1,0,0,   0,0,   1],
    [0,0,0,0,1,   1,0,0,0,0,   1,0,0,0,1,   0,0,   1],
    [0,0,0,0,1,   1,0,0,0,2,   1,0,2,0,0,   0,0,   1],    // 35  2
]

let levelTwelve: [[Int]] = [
    // Debris, barriers settitns: 1 debis(mine), 0 nothingy, 2 barrier(bonus), 4 middle barrier
    
    // Partition settings: 1 MAXleft, 2 MIDLeft 3 center, 4 MIDReight, 5 MAXRight, 6 Center 90 degres. First number 2 zPosition, second 4 zPosition
    // Partitions settings: First Low position 2z , second high position 4z
    
    // 14 bonus
    
    // low          middle        high       partition settings
    [0,0,0,0,1,   1,0,3,0,0,   0,0,0,0,1,   0,0,   1],
    [1,0,0,0,0,   1,0,0,0,0,   1,0,0,0,1,   0,0,   1],
    [2,0,1,0,1,   0,0,0,0,1,   0,0,2,0,3,   0,0,   1],
    [0,0,1,0,0,   1,0,0,0,0,   0,0,0,0,1,   0,0,   1],
    [2,0,0,0,1,   1,0,0,0,1,   0,0,3,0,0,   0,0,   1],    // 5  3 bonus
    
    [1,4,1,4,1,   1,4,9,4,3,   1,4,1,4,1,   0,0,   1],
    [0,0,1,0,1,   1,0,0,0,0,   1,0,1,0,0,   0,0,   1],
    [0,0,0,0,1,   1,0,0,0,0,   0,0,0,0,1,   0,0,   1],
    [0,0,0,0,1,   0,0,1,0,0,   0,0,0,0,1,   0,0,   1],
    [2,0,0,0,0,   1,0,0,0,2,   1,0,0,0,0,   0,0,   1],    // 10  3
    
    [0,0,1,0,0,   0,0,1,0,0,   1,0,0,0,1,   0,0,   1],
    [1,0,0,0,0,   1,0,2,0,0,   0,0,0,0,1,   0,0,   1],
    [1,4,0,4,1,   1,4,1,4,1,   1,4,1,4,1,   0,0,   1],
    [0,0,1,0,1,   0,0,1,0,0,   1,0,0,0,0,   0,0,   1],
    [0,0,0,0,1,   2,0,0,0,1,   0,0,0,0,1,   0,0,   1],     // 15  2
    
    [1,0,1,0,0,   0,0,1,0,0,   0,0,1,0,1,   0,0,   1],
    [0,0,1,0,2,   0,0,0,0,1,   0,0,2,0,0,   0,0,   1],
    [1,0,0,0,1,   1,0,0,0,0,   0,0,0,0,1,   0,0,   1],
    [0,4,0,4,0,   1,4,0,0,0,   0,0,1,0,0,   0,0,   1],
    [1,0,0,0,0,   1,0,1,0,1,   0,0,0,0,1,   0,0,   1],    // 20  2
    
    [0,4,1,0,1,   0,0,1,0,0,   0,0,1,0,0,   0,0,   1],
    [1,0,0,0,0,   0,0,0,0,1,   1,0,0,0,1,   0,0,   1],
    [2,0,0,0,1,   0,0,2,0,1,   0,0,1,0,0,   0,3,   1],
    [0,0,1,0,0,   1,0,0,0,1,   1,0,1,0,0,   0,0,   1],
    [1,0,0,0,0,   1,0,0,0,0,   0,0,0,0,1,   0,0,   1],    // 25  3
    
    [0,0,1,0,0,   0,0,1,0,1,   0,0,0,0,1,   0,0,   1],
    [0,0,0,0,0,   1,0,2,0,0,   2,0,0,0,1,   0,0,   1],
    [1,4,1,4,1,   1,4,0,4,1,   0,4,1,4,1,   0,0,   1],
    [0,0,0,0,1,   0,0,0,0,1,   0,0,0,0,0,   0,0,   1],
    [0,0,1,0,0,   1,0,0,0,1,   1,0,0,0,0,   0,0,   1],    // 30  2
    
    [1,0,0,0,1,   1,4,1,0,1,   0,0,0,0,1,   0,0,   1],
    [0,0,1,0,0,   0,0,0,0,1,   1,0,0,0,1,   0,0,   1],
    [1,0,0,0,0,   2,0,0,0,1,   1,0,2,0,1,   0,0,   1],
    [1,0,0,0,0,   0,0,0,0,1,   0,0,0,0,1,   0,0,   1],
    [0,0,0,0,1,   1,0,0,0,0,   1,0,2,0,0,   0,0,   1],    // 35  1
]



//   SECOND PLANET __-------____-------                                        --------------------------------------------fhfghfghfhgj--------------------------------------------------------




let level2One: [[Int]] = [
    // Debris, barriers settitns: 1 debis(mine), 0 nothingy, 2 barrier(bonus), 4 middle barrier
    
    // Partition settings: 1 MAXleft, 2 MIDLeft 3 center, 4 MIDReight, 5 MAXRight, 6 Center 90 degres. First number 2 zPosition, second 4 zPosition
    // Partitions settings: First Low position 2z , second high position 4z
    
    // 22 bonus
    
    // low          middle        high       partition settings
    [0,4,0,4,0,   0,4,0,4,0,   0,4,0,4,0,   0,0,   1],
    [1,0,0,0,1,   0,0,1,0,0,   0,0,0,0,1,   0,0,   1],
    [1,4,1,4,1,   1,4,1,4,1,   1,4,1,4,1,   0,0,   1],
    [0,0,1,0,0,   1,0,0,0,1,   1,0,0,0,1,   0,0,   1],
    [1,0,2,0,1,   0,0,1,0,1,   0,0,1,0,1,   0,0,   1],    // 5  1 bonus
    
    [1,0,1,0,0,   0,0,1,0,0,   0,0,0,0,1,   0,0,   1],
    [2,0,1,0,1,   1,0,0,0,0,   1,0,1,0,0,   0,0,   1],
    [1,4,1,4,1,   1,4,1,4,1,   1,4,1,4,1,   0,0,   1],
    [0,1,0,0,1,   0,0,1,0,0,   2,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],    // 10  2
    
    [1,0,1,0,2,   0,0,1,0,0,   1,0,0,0,1,   0,0,   1],
    [1,0,0,0,0,   1,0,0,0,1,   0,0,1,0,2,   0,0,   1],
    [1,4,1,4,1,   1,4,1,4,1,   1,4,1,4,1,   0,0,   1],
    [0,0,1,0,1,   0,0,1,0,0,   1,0,0,0,1,   0,0,   1],
    [0,0,1,0,1,   2,0,0,0,1,   1,0,0,0,1,   0,0,   1],     // 15  3
    
    [0,0,1,0,1,   0,0,1,0,0,   0,0,0,0,1,   0,0,   1],
    [1,0,1,0,0,   1,0,2,0,1,   0,0,1,0,0,   0,0,   1],
    [1,4,1,4,1,   1,4,1,4,1,   1,4,1,4,1,   0,0,   1],
    [1,0,0,0,1,   0,0,0,0,1,   0,0,1,0,1,   0,0,   1],
    [0,0,1,0,0,   0,0,0,0,1,   1,0,0,0,2,   0,0,   1],    // 20  2
    
    [1,0,1,0,0,   0,0,1,0,0,   0,0,1,0,1,   0,0,   1],
    [0,0,1,0,0,   0,0,0,0,1,   0,0,0,0,1,   0,0,   1],
    [1,4,1,4,1,   1,4,1,4,1,   1,4,1,4,1,   0,3,   1],
    [0,0,1,0,1,   0,0,0,0,1,   1,0,2,0,0,   0,0,   1],
    [1,0,0,0,1,   1,0,2,0,0,   1,0,0,0,1,   0,0,   1],    // 25  2
    
    [1,0,1,0,0,   1,0,0,0,1,   0,0,0,0,1,   0,0,   1],
    [1,0,0,0,0,   1,0,2,0,0,   0,0,0,0,1,   0,0,   1],
    [1,4,1,4,1,   1,4,1,4,1,   1,4,1,4,1,   0,0,   1],
    [0,0,0,0,1,   0,0,0,0,1,   1,0,0,0,0,   0,0,   1],
    [2,0,1,0,0,   0,0,1,0,1,   1,0,1,0,0,   0,0,   1],    // 30  2
    
    [0,0,0,0,1,   0,0,0,0,1,   0,0,0,0,1,   0,0,   1],
    [0,0,1,0,1,   0,0,0,0,1,   2,0,0,0,1,   0,0,   1],
    [1,4,1,4,1,   1,4,1,4,1,   1,4,1,4,1,   0,0,   1],
    [0,0,0,0,1,   1,0,0,0,0,   1,0,0,0,1,   0,0,   1],
    [0,0,2,0,1,   1,0,0,0,1,   1,0,1,0,0,   0,0,   1],    // 35  2
]

let level2Two: [[Int]] = [
    // Debris, barriers settitns: 1 debis(mine), 0 nothingy, 2 barrier(bonus), 4 middle barrier
    
    // Partition settings: 1 MAXleft, 2 MIDLeft 3 center, 4 MIDReight, 5 MAXRight, 6 Center 90 degres. First number 2 zPosition, second 4 zPosition
    // Partitions settings: First Low position 2z , second high position 4z
    
    // 22 bonus
    
    // low          middle        high       partition settings
    [0,0,1,0,0,   1,0,0,0,0,   0,0,0,0,1,   0,0,   1],
    [1,0,0,0,0,   0,0,1,0,0,   0,0,0,0,1,   0,0,   1],
    [0,0,2,0,1,   0,0,0,0,1,   2,0,0,0,1,   0,0,   1],
    [0,0,1,0,0,   1,0,0,0,0,   0,0,0,0,1,   0,0,   1],
    [2,0,0,0,1,   1,0,0,0,1,   0,0,0,0,0,   0,0,   1],    // 5  3 bonus
    
    [1,0,1,0,0,   0,2,1,0,0,   0,0,0,0,1,   0,0,   1],//2
    [0,0,1,0,1,   1,0,0,0,0,   1,0,1,0,0,   0,0,   1],
    [0,0,0,0,1,   2,0,2,0,2,   0,0,0,0,1,   0,0,   1],
    [0,0,0,0,1,   0,0,1,0,0,   3,0,3,0,1,   0,0,   1],
    [1,0,0,0,3,   1,0,0,0,0,   1,0,0,0,0,   0,0,   1],    // 10  3
    
    [0,0,1,0,0,   0,0,1,0,0,   1,0,0,0,0,   0,0,   1],
    [1,0,0,0,0,   1,0,2,0,0,   0,0,0,0,1,   0,0,   1],
    [1,4,1,4,1,   1,4,1,4,1,   1,4,1,4,1,   0,0,   1],
    [0,0,0,0,1,   0,0,1,0,0,   1,0,0,0,0,   0,0,   1],
    [0,0,0,0,1,   2,0,0,0,1,   0,0,0,0,1,   0,0,   1],     // 15  2
    
    [0,0,1,0,0,   0,0,1,0,0,   0,0,0,0,1,   0,0,   1],
    [0,0,1,0,2,   0,0,0,0,1,   0,0,2,0,0,   0,0,   1],
    [1,0,0,0,1,   1,0,0,0,0,   1,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,1,0,0,   0,0,   1],
    [0,0,1,0,0,   0,0,0,0,1,   0,0,0,0,1,   0,0,   1],    // 20  2
    
    [0,0,1,0,0,   0,0,1,0,0,   0,0,1,0,0,   0,0,   1],
    [0,0,1,0,0,   0,0,0,0,1,   0,0,0,0,1,   0,0,   1],
    [2,0,2,0,2,   0,0,0,0,1,   0,0,0,0,3,   0,3,   1],
    [0,0,0,0,1,   0,0,3,0,1,   1,0,0,0,0,   0,0,   1],
    [1,0,0,0,0,   1,0,0,0,0,   0,0,3,0,1,   0,0,   1],    // 25  3
    
    [0,0,1,0,0,   1,0,0,0,1,   0,0,3,0,1,   0,0,   1],
    [3,0,0,0,0,   1,0,2,0,0,   0,0,1,0,1,   0,0,   1],
    [1,4,1,4,1,   3,4,1,4,1,   1,4,1,4,3,   0,0,   1],
    [0,0,0,0,1,   0,0,0,0,1,   0,0,0,0,0,   0,0,   1],
    [0,0,1,0,0,   1,0,2,0,1,   1,0,0,0,0,   0,0,   1],    // 30  2
    
    [1,0,0,0,1,   0,0,1,0,1,   1,0,0,0,1,   0,0,   1],
    [0,0,1,0,0,   1,0,0,0,1,   1,0,0,0,1,   0,0,   1],
    [1,0,1,0,0,   2,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [0,0,1,0,1,   1,0,2,0,1,   1,0,0,0,1,   0,0,   1],
    [1,0,0,0,1,   1,0,1,0,0,   1,0,2,0,0,   0,0,   1],    // 35  1
]

let level2Three: [[Int]] = [
    // Debris, barriers settitns: 1 debis(mine), 0 nothingy, 2 barrier(bonus), 4 middle barrier
    
    // Partition settings: 1 MAXleft, 2 MIDLeft 3 center, 4 MIDReight, 5 MAXRight, 6 Center 90 degres. First number 2 zPosition, second 4 zPosition
    // Partitions settings: First Low position 2z , second high position 4z
    
    // 22 bonus
    
    // low          middle        high       partition settings
    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,0,0,1,   1,0,1,0,0,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   1,0,1,0,0,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   1,0,0,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   0,0,1,0,1,   0,0,   1],    // 5  0 bonus
    
    [1,0,1,0,1,   0,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [2,0,1,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   0,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   3,0,1,0,1,   0,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   1,0,0,0,1,   0,0,   1],    // 10  1
    
    [1,0,1,0,1,   1,0,2,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,0,0,1,   1,0,3,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,0,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,0,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   1,0,1,0,0,   0,0,   1],     // 15  1
    
    [1,0,1,0,1,   1,0,3,0,0,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   2,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [0,0,1,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [0,0,1,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],    // 20  1
    
    [1,0,1,0,1,   0,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   1,0,0,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   1,0,1,0,0,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,0,   1,0,1,0,1,   0,0,   1],    // 25  0
    
    [1,0,1,0,0,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,2,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   0,0,1,0,1,   1,0,1,0,1,   0,0,   1],    // 30  1
    
    [1,0,1,0,1,   1,0,1,0,1,   0,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   1,0,0,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   1,0,1,0,0,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   1,0,2,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,0,0,1,   1,0,3,0,1,   0,0,   1],    // 35  1
    
    [1,0,1,0,1,   1,0,1,0,0,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,0,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,2,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,0,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,0,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],    // 40  1
    
    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,2,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   0,0,0,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   1,0,0,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   2,0,1,0,1,   0,0,   1],     // 45  2
    
    [1,0,1,0,1,   1,0,1,0,1,   1,0,0,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,3,   1,0,1,0,0,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,2,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,0,0,3,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],    // 50  1
    
    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,0,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   1,0,2,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   0,0,1,0,1,   0,0,   1],    //55  1
    
    [1,0,1,0,1,   1,0,1,0,1,   1,0,0,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   2,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   0,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,0,   1,0,1,0,1,   1,0,0,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,2,   1,0,1,0,1,   0,0,   1],     // 60  2
]

let level2Four: [[Int]] = [
    // Debris, barriers settitns: 1 debis(mine), 0 nothingy, 2 barrier(bonus), 4 middle barrier
    
    // Partition settings: 1 MAXleft, 2 MIDLeft 3 center, 4 MIDReight, 5 MAXRight, 6 Center 90 degres. First number 2 zPosition, second 4 zPosition
    // Partitions settings: First Low position 2z , second high position 4z
    
    // 22 bonus
    
    // low          middle        high       partition settings
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   2,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [2,0,0,0,0,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,0,   0,0,2,0,0,   0,0,   1],    // 5  0 bonus
    
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   2,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [2,0,0,0,0,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,2,0,0,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,2,0,0,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],    // 10  1
    
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   2,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [2,0,0,0,0,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   2,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,0,   2,0,0,0,0,   0,0,   1],     // 15  1
    
    [0,0,0,0,0,   0,0,0,0,0,   0,0,2,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,0,   2,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,0,   0,0,2,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,0,   0,0,0,0,2,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,2,   0,0,0,0,0,   0,0,   1],    // 20  1
    
    [0,0,0,0,2,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,2,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,0,   0,0,0,0,2,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,0,   0,0,2,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0,   1],    // 25  0
    
    [0,0,0,0,0,   0,0,0,0,2,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,2,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,2,0,0,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,2,0,0,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],    // 30  1
    
    [0,0,0,0,2,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,2,0,0,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,2,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,2,0,0,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,2,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],    // 35  1
    
    [0,0,0,0,0,   0,0,0,0,2,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,0,   0,0,0,0,2,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,2,   0,0,0,0,0,   0,0,   1],
    [1,0,0,0,0,   0,0,0,0,0,   0,0,0,0,2,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,0,   0,0,2,0,0,   0,0,   1],    // 40  1
    
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   2,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,0,   0,0,2,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,0,   2,0,0,0,0,   0,0,   1],     // 45  2
    
    [0,0,0,0,0,   2,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,2,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,2,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,2,   0,0,0,0,0,   0,0,   1],    // 50  1
    
    [0,0,0,0,2,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,2,0,0,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,2,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,2,0,0,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0,   1],    //55  1
    
    [0,0,0,0,0,   0,0,0,0,2,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,2,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,2,0,0,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,2,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   2,0,0,0,0,   0,0,0,0,0,   0,0,   1],     // 60  2
]

let level2Five: [[Int]] = [
    // Debris, barriers settitns: 1 debis(mine), 0 nothingy, 2 barrier(bonus), 4 middle barrier
    
    // Partition settings: 1 MAXleft, 2 MIDLeft 3 center, 4 MIDReight, 5 MAXRight, 6 Center 90 degres. First number 2 zPosition, second 4 zPosition
    // Partitions settings: First Low position 2z , second high position 4z
    
    // 22 bonus
    
    // low          middle        high       partition settings
    // low          middle        high       partition settings

    
    [1,0,1,0,0,   0,0,1,0,0,   0,0,0,0,1,   0,0,   1],
    [2,0,1,0,1,   1,0,0,0,0,   1,0,1,0,0,   0,0,   1],
    [1,4,1,4,1,   1,4,1,4,1,   1,4,1,4,1,   0,0,   1],
    [0,1,0,0,1,   0,0,1,0,0,   2,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],    // 10  2
    
    [1,0,1,0,0,   0,0,1,0,0,   0,0,1,0,1,   0,0,   1],
    [0,0,1,0,0,   0,0,0,0,1,   0,0,0,0,1,   0,0,   1],
    [1,4,1,4,1,   1,4,1,4,1,   1,4,1,4,1,   0,3,   1],
    [0,0,1,0,1,   0,0,0,0,1,   1,0,2,0,0,   0,0,   1],
    [1,0,0,0,1,   1,0,2,0,0,   1,0,0,0,1,   0,0,   1],    // 25  2
    
    [0,4,0,4,0,   0,4,0,4,0,   0,4,0,4,0,   0,0,   1],
    [1,0,0,0,1,   0,0,1,0,0,   0,0,0,0,1,   0,0,   1],
    [1,4,1,4,1,   1,4,1,4,1,   1,4,1,4,1,   0,0,   1],
    [0,0,1,0,0,   1,0,0,0,1,   1,0,0,0,1,   0,0,   1],
    [1,0,2,0,1,   0,0,1,0,1,   0,0,1,0,1,   0,0,   1],    // 5  1 bonus
    
    [1,0,1,0,0,   1,0,0,0,1,   0,0,0,0,1,   0,0,   1],
    [1,0,0,0,0,   1,0,2,0,0,   0,0,0,0,1,   0,0,   1],
    [1,4,1,4,1,   1,4,1,4,1,   1,4,1,4,1,   0,0,   1],
    [0,0,0,0,1,   0,0,0,0,1,   1,0,0,0,0,   0,0,   1],
    [2,0,1,0,0,   0,0,1,0,1,   1,0,1,0,0,   0,0,   1],    // 30  2
    
    [0,0,0,0,1,   0,0,0,0,1,   0,0,0,0,1,   0,0,   1],
    [0,0,1,0,1,   0,0,0,0,1,   2,0,0,0,1,   0,0,   1],
    [1,4,1,4,1,   1,4,1,4,1,   1,4,1,4,1,   0,0,   1],
    [0,0,0,0,1,   1,0,0,0,0,   1,0,0,0,1,   0,0,   1],
    [0,0,2,0,1,   1,0,0,0,1,   1,0,1,0,0,   0,0,   1],    // 35  2
    
    [1,0,1,0,1,   1,0,1,0,0,   1,0,1,0,0,   0,0,   1],
    [1,0,1,0,0,   0,0,1,0,1,   1,0,0,0,1,   0,0,   1],
    [1,0,2,0,1,   1,0,0,0,1,   0,0,1,0,0,   0,0,   1],
    [1,0,1,0,0,   2,0,2,0,2,   1,0,1,0,1,   0,0,   1],
    [1,0,0,0,1,   1,0,0,0,1,   1,0,1,0,0,   0,0,   1],    // 40  1
    
    [1,0,1,0,2,   0,0,1,0,0,   1,0,0,0,1,   0,0,   1],
    [1,0,0,0,0,   1,0,0,0,1,   0,0,1,0,2,   0,0,   1],
    [1,4,1,4,1,   1,4,1,4,1,   1,4,1,4,1,   0,0,   1],
    [0,0,1,0,1,   0,0,1,0,0,   1,0,0,0,1,   0,0,   1],
    [0,0,1,0,1,   2,0,0,0,1,   1,0,0,0,1,   0,0,   1],     // 15  3
    
    [1,0,0,0,1,   1,0,0,0,1,   1,0,0,0,1,   0,0,   1],
    [1,0,2,0,1,   1,0,1,0,1,   0,0,1,0,1,   0,0,   1],
    [1,0,1,0,0,   0,0,0,0,1,   1,0,0,0,1,   0,0,   1],
    [1,4,1,4,1,   1,4,1,4,1,   1,4,0,4,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   2,0,1,0,1,   0,0,   1],     // 45  2
    
    [1,0,1,0,0,   1,0,0,0,1,   1,0,0,0,1,   0,0,   1],
    [1,0,0,0,1,   1,0,0,0,1,   1,0,0,0,1,   0,0,   1],
    [0,0,1,0,0,   0,0,1,0,0,   0,0,0,0,1,   0,0,   1],
    [1,0,1,0,2,   0,0,2,0,1,   1,0,0,0,1,   0,0,   1],
    [1,0,0,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],    // 50  1
    
    [1,0,1,0,0,   0,0,0,0,0,   1,0,0,0,1,   0,0,   1],
    [1,0,0,0,0,   1,0,2,0,1,   0,0,1,0,2,   0,0,   1],
    [1,4,1,4,1,   1,4,1,4,1,   1,4,1,4,1,   0,0,   1],
    [0,0,1,0,1,   0,0,1,0,0,   1,0,0,0,1,   0,0,   1],
    [0,0,1,0,1,   2,0,0,0,1,   1,0,0,0,1,   0,0,   1],     // 15  3
    
    [1,0,0,0,1,   1,0,0,0,1,   0,0,1,0,1,   0,0,   1],
    [1,0,0,0,1,   0,0,1,0,0,   0,0,0,0,1,   0,0,   1],
    [1,0,0,0,1,   0,0,0,0,2,   0,0,0,0,0,   0,0,   1],
    [0,0,1,0,1,   1,0,1,0,0,   1,0,0,0,2,   0,0,   1],
    [1,0,0,0,1,   0,0,0,0,1,   0,0,0,0,1,   0,0,   1],    //55  1
    
    [1,0,1,0,1,   1,0,1,0,1,   1,0,1,0,0,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   2,0,1,0,1,   0,0,   1],
    [1,0,0,0,0,   2,0,2,0,2,   1,0,0,0,0,   0,0,   1],
    [1,0,1,0,0,   1,0,0,0,1,   0,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,2,0,0,   1,0,1,0,1,   0,0,   1],     // 60  2
]

let level2Six: [[Int]] = [
    // Debris, barriers settitns: 1 debis(mine), 0 nothingy, 2 barrier(bonus), 4 middle barrier
    
    // Partition settings: 1 MAXleft, 2 MIDLeft 3 center, 4 MIDReight, 5 MAXRight, 6 Center 90 degres. First number 2 zPosition, second 4 zPosition
    // Partitions settings: First Low position 2z , second high position 4z
    
    // 22 bonus
    
    // low          middle        high       partition settings
    [2,0,0,0,0,   0,0,0,0,2,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,2,   0,0,0,0,0,   0,0,2,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,2,0,0,   2,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,0,   2,0,0,0,2,   0,0,   1],
    [0,0,0,0,2,   2,0,0,0,0,   0,0,0,0,0,   0,0,   1],    // 5  0 bonus
    
    [0,0,0,0,2,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [2,0,0,0,0,   0,0,0,0,2,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,0,   0,0,0,0,2,   0,0,   1],
    [0,0,0,0,0,   2,0,0,0,0,   0,0,2,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,0,   2,0,0,0,0,   0,0,   1],    // 10  1
    
    [0,0,0,0,2,   0,0,0,0,0,   2,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   2,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,2,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,0,   2,0,0,0,2,   0,0,   1],
    [2,0,2,0,0,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],     // 15  1
    
    [0,0,0,0,2,   0,0,0,0,0,   0,0,2,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,0,   2,0,0,0,0,   0,0,   1],
    [2,0,0,0,2,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,2,0,0,   0,0,0,0,0,   0,0,2,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,2,   0,0,0,0,0,   0,0,   1],    // 20  1
    
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,0,   2,0,2,0,0,   0,0,   1],
    [0,0,0,0,0,   2,0,2,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,0,   2,0,2,0,0,   0,0,   1],
    [0,0,1,0,0,   2,0,2,0,0,   0,0,0,0,0,   0,0,   1]    // 25  0

]



// [2,0,0,0,0,   2,0,0,0,0,   0,0,2,0,0,   0,0,   1],
// [0,0,0,0,0,   2,0,0,0,2,   0,0,0,0,0,   0,0,   1],
// [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0,   1],
// [0,0,2,0,2,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
// [0,0,0,0,0,   0,0,2,0,2,   0,0,0,0,0,   0,0,   1],    // 30  1
//
// [0,0,2,0,0,   0,0,0,0,0,   0,0,0,0,2,   0,0,   1],
// [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0,   1],
// [2,0,0,0,0,   0,0,2,0,0,   0,0,2,0,0,   0,0,   1],
// [0,0,0,0,0,   2,0,0,0,0,   0,0,0,0,0,   0,0,   1],
// [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,2,   0,0,   1],    // 35  1


let level2Seven: [[Int]] = [
    // Debris, barriers settitns: 1 debis(mine), 0 nothingy, 2 barrier(bonus), 4 middle barrier
    
    // Partition settings: 1 MAXleft, 2 MIDLeft 3 center, 4 MIDReight, 5 MAXRight, 6 Center 90 degres. First number 2 zPosition, second 4 zPosition
    // Partitions settings: First Low position 2z , second high position 4z
    
    // 22 bonus
    
    // low          middle        high       partition settings
    [0,0,1,0,0,   1,0,0,0,0,   0,0,3,0,1,   0,0,   1],
    [1,0,0,0,0,   0,0,1,0,3,   0,0,3,0,1,   0,0,   1],
    [0,0,1,0,1,   0,0,0,0,1,   2,0,0,0,1,   0,0,   1],
    [0,0,1,0,0,   1,0,0,0,0,   0,0,0,0,1,   0,0,   1],
    [2,0,0,0,1,   1,0,0,0,1,   0,0,1,0,0,   0,0,   1],    // 5  3 bonus
    
    [1,0,1,0,0,   0,0,1,0,0,   0,0,0,0,1,   0,0,   1],
    [0,0,1,0,1,   1,0,0,0,0,   1,0,1,0,0,   0,0,   1],
    [0,0,0,0,1,   2,0,2,0,2,   0,0,0,0,1,   0,0,   1],
    [3,0,0,0,1,   0,0,1,0,0,   0,0,3,0,1,   0,0,   1],
    [1,0,0,0,0,   1,0,0,0,0,   1,0,0,0,0,   0,0,   1],    // 10  3
    
    [0,0,1,0,0,   0,0,1,0,0,   1,0,0,0,0,   0,0,   1],
    [1,0,0,0,0,   1,0,2,0,0,   0,0,0,0,1,   0,0,   1],
    [1,4,1,4,1,   1,4,9,4,1,   1,4,1,4,1,   0,0,   1],
    [1,4,1,4,1,   1,4,2,4,1,   1,4,1,4,1,   0,0,   1],
    [1,4,1,4,1,   1,4,0,4,1,   1,4,1,4,1,   0,0,   1],     // 15  2
    
    [0,0,1,0,0,   0,0,1,0,0,   0,0,0,0,1,   0,0,   1],
    [0,0,1,0,1,   0,0,0,0,1,   0,0,2,0,0,   0,0,   1],
    [1,4,1,4,1,   1,4,9,4,1,   1,4,1,4,1,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,0,   0,0,1,0,0,   0,0,   1],
    [0,0,1,0,0,   0,0,3,0,1,   0,0,0,0,1,   0,0,   1],    // 20  2
    
    [0,0,1,0,0,   0,0,1,0,0,   0,0,1,0,0,   0,0,   1],
    [0,0,1,0,0,   0,0,0,0,1,   0,0,0,0,1,   0,0,   1],
    [2,0,2,0,2,   1,0,0,0,1,   0,0,3,0,0,   0,3,   1],
    [0,0,0,0,1,   0,0,0,0,1,   1,0,0,0,3,   0,0,   1],
    [1,0,0,0,0,   1,0,0,0,0,   0,0,0,0,1,   0,0,   1],    // 25  3
    
    [1,0,0,0,1,   2,0,2,0,1,   0,0,0,0,1,   0,0,   1],
    [0,0,1,0,0,   0,0,0,0,1,   1,0,0,0,1,   0,0,   1],
    [1,4,1,4,1,   1,4,9,4,1,   1,4,1,4,1,   0,0,   1],
    [0,0,3,0,1,   0,0,0,0,0,   0,0,0,0,1,   0,0,   1],
    [0,0,0,0,1,   1,0,0,0,0,   1,0,2,0,3,   0,0,   1],    // 30  1
    
    [0,4,0,4,0,   0,4,0,4,0,   0,4,0,4,0,   0,0,   1],
    [1,0,0,0,1,   0,0,1,0,0,   0,0,0,0,1,   0,0,   1],
    [1,4,1,4,1,   1,4,1,4,1,   1,4,1,4,1,   0,0,   1],
    [0,0,1,0,0,   1,0,0,0,1,   1,0,0,0,1,   0,0,   1],
    [1,0,2,0,1,   0,0,1,0,1,   0,0,1,0,1,   0,0,   1],    // 35  1 bonus
    
    [1,0,1,0,0,   0,0,1,0,0,   0,0,0,0,1,   0,0,   1],
    [2,0,1,0,1,   1,0,0,0,0,   1,0,1,0,0,   0,0,   1],
    [1,4,1,4,1,   1,4,1,4,1,   1,4,1,4,1,   0,0,   1],
    [0,1,0,0,1,   0,0,1,0,0,   2,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],    // 40  2
    
    [1,0,1,0,2,   0,0,1,0,0,   1,0,0,0,1,   0,0,   1],
    [1,0,0,0,0,   1,0,0,0,1,   0,0,1,0,2,   0,0,   1],
    [1,4,1,4,1,   1,4,1,4,1,   1,4,1,4,1,   0,0,   1],
    [0,0,1,0,1,   0,0,1,0,0,   1,0,0,0,1,   0,0,   1],
    [0,0,1,0,1,   2,0,0,0,1,   1,0,0,0,1,   0,0,   1],     // 45  3
    
    [0,0,1,0,1,   0,0,1,0,0,   0,0,0,0,1,   0,0,   1],
    [1,0,1,0,0,   1,0,2,0,1,   0,0,1,0,0,   0,0,   1],
    [1,4,1,4,1,   1,4,1,4,1,   1,4,1,4,1,   0,0,   1],
    [1,0,0,0,1,   0,0,0,0,1,   0,0,1,0,1,   0,0,   1],
    [0,0,1,0,0,   0,0,0,0,1,   1,0,0,0,2,   0,0,   1],    // 50  2
    
    [1,0,1,0,0,   1,0,0,0,1,   0,0,0,0,1,   0,0,   1],
    [1,0,0,0,0,   1,0,2,0,0,   0,0,0,0,1,   0,0,   1],
    [1,4,1,4,1,   1,4,1,4,1,   1,4,1,4,1,   0,0,   1],
    [0,0,0,0,1,   0,0,0,0,1,   1,0,0,0,0,   0,0,   1],
    [2,0,1,0,0,   0,0,1,0,1,   1,0,1,0,0,   0,0,   1],    // 55  2
    
    [0,0,0,0,1,   0,0,0,0,1,   0,0,0,0,1,   0,0,   1],
    [0,0,1,0,1,   0,0,0,0,1,   2,0,0,0,1,   0,0,   1],
    [1,4,1,4,1,   1,4,1,4,1,   1,4,1,4,1,   0,0,   1],
    [0,0,0,0,1,   1,0,0,0,0,   1,0,0,0,1,   0,0,   1],
    [0,0,2,0,1,   1,0,0,0,1,   1,0,1,0,0,   0,0,   1],    // 60  2
]

let level2Eight: [[Int]] = [
    // Debris, barriers settitns: 1 debis(mine), 0 nothingy, 2 barrier(bonus), 4 middle barrier
    
    // Partition settings: 1 MAXleft, 2 MIDLeft 3 center, 4 MIDReight, 5 MAXRight, 6 Center 90 degres. First number 2 zPosition, second 4 zPosition
    // Partitions settings: First Low position 2z , second high position 4z
    
    // 22 bonus
    
    // low          middle        high       partition settings
    [1,0,1,0,1,   1,0,2,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,0,0,1,   1,0,1,0,2,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,3,   1,0,1,0,2,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   1,0,0,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   0,0,1,0,1,   0,0,   1],    // 5  0 bonus
    
    [1,0,1,0,1,   0,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [2,0,1,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [3,0,1,0,1,   0,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   0,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   1,0,0,0,1,   0,0,   1],    // 10  1
    
    [1,0,1,0,1,   1,0,2,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,0,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,0,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,0,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,0,   1,0,1,0,0,   0,0,   1],     // 15  1
    
    [1,0,1,0,1,   1,0,1,0,0,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   2,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [0,0,1,0,1,   3,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [0,0,1,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],    // 20  1
    
    [1,0,1,0,1,   0,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   1,0,0,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   1,0,1,0,0,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,0,   1,0,1,0,1,   0,0,   1],    // 25  0
    
    [1,0,1,0,0,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,2,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   0,0,1,0,1,   1,0,1,0,1,   0,0,   1],    // 30  1
    
    [1,0,1,0,1,   1,0,1,0,1,   0,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   1,0,0,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   1,0,3,0,0,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   1,0,2,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,0,0,1,   1,0,3,0,1,   0,0,   1],    // 35  1
    
    [1,0,1,0,1,   1,0,1,0,0,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   1,0,1,0,0,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   1,0,0,0,1,   0,0,   1],
    [1,0,1,0,0,   1,0,1,0,1,   0,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   0,0,1,0,1,   1,0,1,0,1,   0,0,   1],    // 40  1

    [1,0,1,0,1,   0,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [0,0,1,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,0,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,0,0,1,   1,0,3,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   1,0,2,0,1,   0,0,   1]     // 45  2

]

let level2Nine: [[Int]] = [
    // Debris, barriers settitns: 1 debis(mine), 0 nothingy, 2 barrier(bonus), 4 middle barrier
    
    // Partition settings: 1 MAXleft, 2 MIDLeft 3 center, 4 MIDReight, 5 MAXRight, 6 Center 90 degres. First number 2 zPosition, second 4 zPosition
    // Partitions settings: First Low position 2z , second high position 4z
    
    // 22 bonus
    
    // low          middle        high       partition settings
    [0,0,0,0,0,   2,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [2,0,0,0,0,   3,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   2,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,0,   0,0,2,0,0,   0,0,   1],    // 5  0 bonus
    
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [2,0,0,0,0,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,2,0,0,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,2,0,0,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],    // 10  1
    
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   2,0,3,0,0,   0,0,0,0,0,   0,0,   1],
    [2,0,0,0,0,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,3,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,0,   2,0,0,0,0,   0,0,   1],     // 15  1
    
    [0,0,0,0,0,   0,0,0,0,0,   0,0,2,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,3,0,0,   1,0,0,0,3,   0,0,   1],
    [0,0,0,0,0,   0,3,0,0,0,   0,0,2,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,0,   0,0,3,0,2,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,2,   0,0,0,0,0,   0,0,   1],    // 20  1
    
    [0,0,0,0,2,   0,0,0,0,3,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,2,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,3,   0,0,0,0,2,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,0,   0,0,1,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0,   1],    // 25  0
    
    [0,0,0,0,0,   0,0,3,0,2,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,2,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,2,0,0,   0,0,3,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,2,0,0,   0,0,3,0,0,   0,0,0,0,0,   0,0,   1],    // 30  1
    
    [0,0,3,0,2,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,2,0,0,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,3,0,2,   0,0,3,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,2,0,0,   0,0,0,0,3,   0,0,0,0,0,   0,0,   1],
    [0,0,3,0,2,   0,0,1,0,0,   0,0,0,0,0,   0,0,   1],    // 35  1
    
//    [1,0,1,0,1,   1,0,1,0,0,   1,0,1,0,1,   0,0,   1],
//    [1,0,1,0,0,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
//    [1,0,2,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
//    [1,0,1,0,0,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
//    [1,0,0,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],    // 40  1
//
//    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],
//    [1,0,2,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
//    [1,0,1,0,1,   0,0,0,0,1,   1,0,1,0,1,   0,0,   1],
//    [1,0,1,0,1,   1,0,1,0,1,   1,0,0,0,1,   0,0,   1],
//    [1,0,1,0,1,   1,0,1,0,1,   2,0,1,0,1,   0,0,   1],     // 45  2
//
//    [1,0,1,0,1,   1,0,1,0,1,   1,0,0,0,1,   0,0,   1],
//    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],
//    [1,0,1,0,1,   1,0,1,0,0,   1,0,1,0,1,   0,0,   1],
//    [1,0,1,0,2,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
//    [1,0,0,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],    // 50  1
//
//    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],
//    [1,0,0,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
//    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],
//    [1,0,1,0,1,   1,0,1,0,1,   1,0,2,0,1,   0,0,   1],
//    [1,0,1,0,1,   1,0,1,0,1,   0,0,1,0,1,   0,0,   1],    //55  1
//
//    [1,0,1,0,1,   1,0,1,0,1,   1,0,0,0,1,   0,0,   1],
//    [1,0,1,0,1,   1,0,1,0,1,   2,0,1,0,1,   0,0,   1],
//    [1,0,1,0,1,   0,0,1,0,1,   1,0,1,0,1,   0,0,   1],
//    [1,0,1,0,0,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
//    [1,0,1,0,1,   1,0,1,0,2,   1,0,1,0,1,   0,0,   1],     // 60  2
]

let level2Ten: [[Int]] = [
    // Debris, barriers settitns: 1 debis(mine), 0 nothingy, 2 barrier(bonus), 4 middle barrier
    
    // Partition settings: 1 MAXleft, 2 MIDLeft 3 center, 4 MIDReight, 5 MAXRight, 6 Center 90 degres. First number 2 zPosition, second 4 zPosition
    // Partitions settings: First Low position 2z , second high position 4z
    
    // 22 bonus
    
    // low          middle        high       partition settings
    [0,0,1,0,1,   1,0,0,0,0,   0,0,0,0,1,   0,0,   1],
    [1,2,0,0,1,   1,0,1,0,0,   1,0,1,0,1,   0,0,   1],
    [0,0,3,0,0,   0,0,0,0,3,   1,0,1,0,0,   0,0,   1],
    [3,0,0,0,3,   3,0,3,0,1,   3,0,0,0,3,   0,0,   1],
    [0,0,3,0,3,   3,0,0,0,3,   0,0,3,0,3,   0,0,   1],    // 5  0 bonus
    
    [0,0,0,0,3,   2,0,3,0,0,   3,0,0,0,3,   0,0,   1],
    [0,0,0,0,1,   1,0,0,0,1,   1,0,0,0,1,   0,0,   1],
    [1,4,1,4,1,   1,4,1,4,1,   1,4,9,4,1,   0,0,   1],
    [3,0,1,0,1,   1,0,3,0,1,   0,0,1,0,1,   0,0,   1],
    [1,0,3,0,1,   1,0,3,0,1,   1,0,0,0,1,   0,0,   1],    // 10  1
    
    [1,0,3,0,1,   1,0,2,0,3,   1,0,3,0,1,   0,0,   1],
    [1,0,0,0,1,   1,0,3,0,3,   3,0,3,0,1,   0,0,   1],
    [1,4,1,4,1,   1,4,9,4,1,   1,4,1,4,1,   0,0,   1],
    [3,0,3,0,0,   1,0,1,0,3,   3,0,1,0,1,   0,0,   1],
    [1,0,3,0,3,   3,0,3,0,1,   1,0,3,0,0,   0,0,   1],     // 15  1
    
    [1,0,1,0,1,   1,0,3,0,0,   3,0,3,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],
    [1,4,9,4,1,   1,4,1,4,1,   1,4,1,4,1,   0,0,   1],
    [0,0,1,0,3,   1,0,3,0,3,   1,0,3,0,1,   0,0,   1],
    [0,0,1,0,1,   3,0,3,0,1,   3,0,1,0,3,   0,0,   1],    // 20  1
    
    [1,0,3,0,3,   0,0,1,0,1,   1,0,3,0,3,   0,0,   1],
    [1,0,3,0,1,   1,0,0,0,1,   3,0,3,0,1,   0,0,   1],
    [1,4,1,4,1,   1,4,9,4,1,   1,4,1,4,1,   0,0,   1],
    [1,0,1,0,1,   3,0,3,0,1,   1,0,3,0,0,   0,0,   1],
    [1,0,1,0,1,   1,0,3,0,0,   1,0,1,0,1,   0,0,   1],    // 25  0
    
    [3,0,1,0,0,   3,0,1,0,3,   3,0,1,0,3,   0,0,   1],
    [1,0,2,0,1,   1,0,3,0,1,   3,0,1,0,1,   0,0,   1],
    [1,4,3,4,1,   1,4,9,4,1,   1,4,1,4,1,   0,0,   1],
    [1,0,3,0,3,   3,0,0,0,1,   1,0,3,0,1,   0,0,   1],
    [1,0,3,0,1,   0,0,3,0,1,   1,0,3,0,1,   0,0,   1],    // 30  1
    
    [3,0,3,0,1,   3,0,3,0,1,   0,0,3,0,1,   0,0,   1],
    [1,0,3,0,3,   3,0,3,0,1,   1,0,0,0,1,   0,0,   1],
    [1,4,1,4,1,   1,4,9,4,1,   1,4,1,4,1,   0,0,   1],
    [1,0,3,0,3,   1,0,3,0,3,   3,0,2,0,1,   0,0,   1],
    [3,0,3,0,1,   3,0,0,0,1,   3,0,1,0,3,   0,0,   1],    // 35  1
    
//    [1,0,1,0,1,   1,0,1,0,0,   1,0,1,0,1,   0,0,   1],
//    [1,0,1,0,0,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
//    [1,0,2,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
//    [1,0,1,0,0,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
//    [1,0,0,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],    // 40  1
//    
//    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],
//    [1,0,2,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
//    [1,0,1,0,1,   0,0,0,0,1,   1,0,1,0,1,   0,0,   1],
//    [1,0,1,0,1,   1,0,1,0,1,   1,0,0,0,1,   0,0,   1],
//    [1,0,1,0,1,   1,0,1,0,1,   2,0,1,0,1,   0,0,   1],     // 45  2
//    
//    [1,0,1,0,1,   1,0,1,0,1,   1,0,0,0,1,   0,0,   1],
//    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],
//    [1,0,1,0,1,   1,0,1,0,0,   1,0,1,0,1,   0,0,   1],
//    [1,0,1,0,2,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
//    [1,0,0,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],    // 50  1
//    
//    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],
//    [1,0,0,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
//    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],
//    [1,0,1,0,1,   1,0,1,0,1,   1,0,2,0,1,   0,0,   1],
//    [1,0,1,0,1,   1,0,1,0,1,   0,0,1,0,1,   0,0,   1],    //55  1
//    
//    [1,0,1,0,1,   1,0,1,0,1,   1,0,0,0,1,   0,0,   1],
//    [1,0,1,0,1,   1,0,1,0,1,   2,0,1,0,1,   0,0,   1],
//    [1,0,1,0,1,   0,0,1,0,1,   1,0,1,0,1,   0,0,   1],
//    [1,0,1,0,0,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
//    [1,0,1,0,1,   1,0,1,0,2,   1,0,1,0,1,   0,0,   1],     // 60  2
]

let level2Eleven: [[Int]] = [
    // Debris, barriers settitns: 1 debis(mine), 0 nothingy, 2 barrier(bonus), 4 middle barrier
    
    // Partition settings: 1 MAXleft, 2 MIDLeft 3 center, 4 MIDReight, 5 MAXRight, 6 Center 90 degres. First number 2 zPosition, second 4 zPosition
    // Partitions settings: First Low position 2z , second high position 4z
    
    // 22 bonus
    
    // low          middle        high       partition settings
    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],
    [31,0,0,0,31,   31,0,31,0,0,   31,0,31,0,31,   0,0,   1],
    [3,0,3,0,3,   3,0,3,0,3,   3,0,3,0,0,   0,0,   1],
    [31,0,31,0,31,   31,0,31,0,31,   31,0,0,0,31,   0,0,   1],
    [3,0,3,0,3,   3,0,3,0,3,   0,0,3,0,3,   0,0,   1],    // 5  0 bonus
    
    [1,0,1,0,1,   0,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [2,0,1,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   0,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   0,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   1,0,0,0,1,   0,0,   1],    // 10  1
    
    [31,0,0,0,3,   1,0,31,0,31,   1,0,31,0,31,   0,0,   1],
    [1,0,0,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [31,0,31,0,0,   31,0,31,0,31,   31,0,31,0,31,   0,0,   1],
    [1,0,1,0,0,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   1,0,1,0,0,   0,0,   1],     // 15  1
    
    [1,0,1,0,1,   1,0,1,0,0,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],
    [3,0,31,0,31,   2,0,3,0,31,   1,0,1,0,1,   0,0,   1],
    [0,0,1,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [0,0,1,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],    // 20  1
    
    [1,0,1,0,1,   0,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   1,0,0,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   1,0,1,0,0,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,0,   1,0,1,0,1,   0,0,   1],    // 25  0
    
    [1,0,1,0,0,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,2,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [31,0,31,0,1,   1,0,0,0,31,   1,0,3,0,3,   0,0,   1],
    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   0,0,1,0,1,   1,0,1,0,1,   0,0,   1],    // 30  1
    
    [3,0,3,0,1,   3,0,3,0,3,   0,0,3,0,3,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   1,0,0,0,1,   0,0,   1],
    [31,0,31,0,31,   31,0,31,0,31,   31,0,31,0,0,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   1,0,2,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],    // 35  1
    
    [1,0,1,0,1,   1,0,1,0,0,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,0,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,2,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,0,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,0,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],    // 40  1
    
    [3,0,3,0,3,   3,0,0,0,3,   3,0,3,0,3,   0,0,   1],
    [3,0,2,0,3,   3,0,3,0,3,   3,0,3,0,3,   0,0,   1],
    [3,0,3,0,3,   0,0,0,0,3,   3,0,3,0,3,   0,0,   1],
    [3,0,3,0,3,   3,0,3,0,3,   3,0,0,0,3,   0,0,   1],
    [3,0,3,0,3,   3,0,3,0,3,   2,0,3,0,3,   0,0,   1],     // 45  2
    
    [1,0,1,0,1,   1,0,1,0,1,   1,0,0,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],
    [31,0,31,0,31,   31,0,31,0,0,   31,0,31,0,31,   0,0,   1],
    [1,0,1,0,2,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,0,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],    // 50  1
    
    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,0,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [31,0,31,0,31,   3,0,0,0,3,   3,0,3,0,3,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   1,0,2,0,1,   0,0,   1],
    [31,0,31,0,31,   31,0,31,0,31,   0,0,31,0,31,   0,0,   1],    //55  1
    
    [1,0,1,0,1,   1,0,1,0,1,   1,0,0,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   2,0,1,0,1,   0,0,   1],
    [31,0,31,0,31,   0,0,31,0,31,   31,0,31,0,31,   0,0,   1],
    [1,0,1,0,0,   1,0,1,0,1,   0,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   1,0,2,0,1,   0,0,   1],     // 60  2
]

let level2Twelve: [[Int]] = [
    // Debris, barriers settitns: 1 debis(mine), 0 nothingy, 2 barrier(bonus), 4 middle barrier
    
    // Partition settings: 1 MAXleft, 2 MIDLeft 3 center, 4 MIDReight, 5 MAXRight, 6 Center 90 degres. First number 2 zPosition, second 4 zPosition
    // Partitions settings: First Low position 2z , second high position 4z
    
    // 22 bonus
    
    // low          middle        high       partition settings
    [1,0,0,0,1,   1,0,0,0,1,   1,0,0,0,1,   0,0,   1],
    [31,0,0,0,1,   0,0,31,0,0,   0,0,0,0,1,   0,0,   1],
    [1,0,1,0,1,   2,0,2,0,2,   1,0,1,0,0,   0,0,   1],
    [1,0,0,0,31,   1,0,31,0,1,   0,0,0,0,1,   0,0,   1],
    [31,0,1,0,1,   1,0,31,0,1,   0,0,31,0,1,   0,0,   1],    // 5  0 bonus
    
    [1,0,0,0,0,   0,0,1,0,0,   1,0,1,0,0,   0,0,   1],
    [2,0,31,0,1,   31,0,0,0,0,   0,0,1,0,31,   0,0,   1],
    [0,0,0,0,1,   0,0,1,0,1,   1,0,31,0,31,   0,0,   1],
    [1,0,0,0,1,   1,0,2,0,2,   0,0,31,0,0,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   1,0,0,0,1,   0,0,   1],    // 10  1
    
    [0,0,0,0,1,   0,0,2,0,1,   1,0,0,0,31,   0,0,   1],
    [31,0,0,0,1,   0,0,31,0,0,   31,0,0,0,1,   0,0,   1],
    [2,0,1,0,0,   0,0,1,0,1,   0,0,0,0,1,   0,0,   1],
    [1,0,1,0,0,   1,0,0,0,1,   1,0,0,0,1,   0,0,   1],
    [0,0,0,0,1,   0,2,1,0,1,   1,0,1,0,0,   0,0,   1],//2     // 15  1
    
    [1,0,0,0,0,   1,0,1,0,0,   1,0,0,0,0,   0,0,   1],
    [0,0,1,0,31,   31,0,0,0,1,   1,0,0,0,1,   0,0,   1],
    [31,0,0,0,0,   2,0,0,0,1,   0,0,31,0,1,   0,0,   1],
    [0,0,0,0,0,   1,0,0,0,1,   31,0,0,0,1,   0,0,   1],
    [0,0,31,0,1,   31,0,31,0,1,   1,0,1,0,1,   0,0,   1],    // 20  1
    
    [1,0,0,0,0,   0,0,1,0,0,   1,0,1,0,1,   0,0,   1],
    [1,0,0,0,1,   1,0,31,0,1,   1,0,31,0,0,   0,0,   1],
    [31,0,1,0,0,   1,0,0,0,31,   1,0,0,0,1,   0,0,   1],
    [0,0,0,0,1,   2,0,1,0,1,   1,0,1,0,0,   0,0,   1],
    [1,0,0,0,1,   1,0,0,0,0,   1,0,0,0,1,   0,0,   1],    // 25  0
    
    [1,4,1,4,1,   1,4,1,4,1,   1,4,1,4,1,   0,0,   1],
    [0,0,2,0,1,   1,0,0,0,1,   1,0,0,0,0,   0,0,   1],
    [1,0,31,0,0,   1,0,31,0,1,   0,0,31,0,0,   0,0,   1],
    [0,0,1,0,0,   1,0,0,0,1,   31,0,0,0,1,   0,0,   1],
    [1,0,3,0,0,   3,0,31,0,0,   1,0,0,0,31,   0,0,   1],    // 30  1
    
    [1,0,0,0,1,   3,0,0,0,3,   0,0,1,0,31,   0,0,   1],
    [0,0,1,0,0,   1,0,0,0,1,   1,0,0,0,1,   0,0,   1],
    [1,4,1,4,1,   1,4,1,4,1,   1,4,1,4,1,   0,0,   1],
    [1,4,1,4,1,   1,4,31,4,1,   1,4,1,4,1,   0,0,   1],
    [1,4,1,4,1,   1,4,1,4,1,   1,4,1,4,1,   0,0,   1],    // 35  1
    
    [1,4,1,4,1,   1,4,1,4,1,   1,4,1,4,1,   0,0,   1],
    [3,4,1,4,3,   1,4,31,4,1,   1,4,1,4,1,   0,0,   1],
    [1,0,2,0,0,   1,0,0,0,1,   1,0,0,0,0,   0,0,   1],
    [1,0,1,0,0,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,0,0,1,   1,0,31,0,1,   31,0,1,0,31,   0,0,   1],    // 40  1
    
    [1,0,2,0,1,   1,0,0,0,1,   0,0,1,0,0,   0,0,   1],
    [1,0,0,0,1,   1,0,0,0,31,   1,0,31,0,1,   0,0,   1],
    [0,0,0,0,31,   0,0,2,0,2,   0,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,0,0,1,   1,0,0,0,1,   0,0,   1],
    [1,0,0,0,1,   0,0,1,0,1,   2,0,0,0,0,   0,0,   1],     // 45  2
    
    [0,0,0,0,1,   1,0,0,0,1,   1,0,0,0,0,   0,0,   1],
    [0,0,1,0,0,   1,0,0,0,1,   0,0,1,0,0,   0,0,   1],
    [2,0,0,0,1,   0,0,1,0,0,   1,0,0,0,1,   0,0,   1],
    [31,0,31,0,0,   1,0,0,0,1,   1,0,31,0,31,   0,0,   1],
    [1,0,0,0,1,   1,0,2,0,0,   0,0,0,0,1,   0,0,   1],    // 50  1
    
    [0,0,0,0,1,   3,0,0,0,31,   1,0,0,0,0,   0,0,   1],
    [1,0,0,0,3,   3,0,0,0,31,   0,0,2,0,1,   0,0,   1],
    [0,0,0,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],
    [31,0,1,0,1,   31,0,0,0,0,   1,0,3,0,3,   0,0,   1],
    [1,0,0,0,1,   1,0,0,0,1,   0,0,1,0,0,   0,0,   1],    //55  1
    
    [1,0,0,0,0,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [0,0,1,0,0,   1,0,0,0,1,   2,0,0,0,1,   0,0,   1],
    [0,0,0,0,31,   31,0,0,0,3,   0,0,1,0,0,   0,0,   1],
    [1,0,31,0,0,   1,0,0,0,0,   1,0,0,0,31,   0,0,   1],
    [1,0,0,0,1,   1,0,0,0,2,   31,0,0,0,1,   0,0,   1],     // 60  2
]





//   THIRD PLANET __-------____-------                                        --------------------------------------------fhfghfghfhgj--------------------------------------------------------




let level3One: [[Int]] = [
    // Debris, barriers settitns: 1 debis(mine), 0 nothingy, 2 barrier(bonus), 4 middle barrier
    
    // Partition settings: 1 MAXleft, 2 MIDLeft 3 center, 4 MIDReight, 5 MAXRight, 6 Center 90 degres. First number 2 zPosition, second 4 zPosition
    // Partitions settings: First Low position 2z , second high position 4z
    
    // 22 bonus
    
    // low          middle        high       partition settings
    [0,4,0,4,0,   0,4,0,4,0,   0,4,0,4,0,   0,0,   1],
    [1,0,1,0,1,   0,0,6,0,61,   0,0,0,0,1,   0,0,   1],
    [1,4,1,4,1,   1,4,1,4,1,   1,4,8,4,1,   0,0,   1],
    [0,0,8,0,0,   1,0,0,0,1,   1,0,0,0,1,   0,0,   1],
    [1,0,0,0,1,   6,0,1,0,1,   0,0,1,0,1,   0,0,   1],    // 5  1 bonus
    
    [1,0,1,0,0,   0,0,1,0,0,   0,0,8,0,1,   0,0,   1],
    [2,0,1,0,1,   1,0,0,0,0,   1,0,1,0,0,   0,0,   1],
    [1,4,1,4,1,   1,4,61,4,1,   1,4,1,4,1,   0,0,   1],
    [0,1,0,0,1,   0,0,1,0,0,   2,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,7,0,1,   1,0,1,0,1,   0,0,   1],    // 10  2
    
    [1,0,1,0,2,   0,0,1,0,0,   1,0,0,0,1,   0,0,   1],
    [1,0,7,0,0,   1,0,0,0,1,   0,0,1,0,2,   0,0,   1],
    [1,4,6,4,1,   1,4,1,4,1,   1,4,1,4,1,   0,0,   1],
    [0,0,1,0,1,   0,0,1,0,0,   1,0,7,0,1,   0,0,   1],
    [0,0,1,0,1,   2,0,0,0,1,   1,0,0,0,1,   0,0,   1],     // 15  3
    
    [0,0,1,0,1,   0,0,1,0,0,   0,0,0,0,1,   0,0,   1],
    [1,0,1,0,0,   1,0,2,0,1,   0,0,1,0,0,   0,0,   1],
    [1,4,1,4,1,   61,4,1,4,1,   1,4,1,4,1,   0,0,   1],
    [1,0,0,0,1,   0,0,0,0,1,   0,0,1,0,1,   0,0,   1],
    [0,0,1,0,0,   0,0,0,0,1,   1,0,0,0,2,   0,0,   1],    // 20  2
    
    [1,0,1,0,0,   0,0,1,0,0,   0,0,1,0,1,   0,0,   1],
    [0,0,1,0,0,   0,0,0,0,1,   0,0,0,0,1,   0,0,   1],
    [1,4,1,4,1,   1,4,1,4,1,   6,4,1,4,1,   0,3,   1],
    [0,0,1,0,1,   0,0,0,0,1,   1,0,2,0,0,   0,0,   1],
    [1,0,0,0,1,   1,0,2,0,0,   1,0,0,0,1,   0,0,   1],    // 25  2
    
    [1,0,0,0,0,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,0,0,1,   1,0,2,0,0,   0,0,0,0,1,   0,0,   1],
    [1,4,1,4,1,   1,4,1,4,1,   1,4,61,4,1,   0,0,   1],
    [0,0,0,0,1,   0,0,0,0,1,   1,0,0,0,0,   0,0,   1],
    [2,0,1,0,0,   0,0,1,0,1,   1,0,1,0,1,   0,0,   1],    // 30  2
    
    [0,0,1,0,1,   0,0,0,0,1,   1,0,0,0,1,   0,0,   1],
    [0,0,1,0,1,   0,0,1,0,1,   2,0,0,0,1,   0,0,   1],
    [1,4,1,4,1,   1,4,1,4,1,   1,4,1,4,1,   0,0,   1],
    [0,0,0,0,1,   1,0,61,0,0,   1,0,0,0,1,   0,0,   1],
    [0,0,2,0,1,   1,0,6,0,1,   1,0,1,0,0,   0,0,   1],    // 35  2
]

let level3Two: [[Int]] = [
    // Debris, barriers settitns: 1 debis(mine), 0 nothingy, 2 barrier(bonus), 4 middle barrier
    
    // Partition settings: 1 MAXleft, 2 MIDLeft 3 center, 4 MIDReight, 5 MAXRight, 6 Center 90 degres. First number 2 zPosition, second 4 zPosition
    // Partitions settings: First Low position 2z , second high position 4z
    
    // 22 bonus
    
    // low          middle        high       partition settings
    [0,0,1,0,0,   1,0,1,0,0,   0,0,1,0,1,   0,0,   1],
    [1,0,0,0,1,   0,0,1,0,0,   1,0,0,0,1,   0,0,   1],
    [0,0,2,0,1,   1,0,0,0,1,   2,0,1,0,1,   0,0,   1],
    [1,0,1,0,0,   1,0,1,0,0,   1,0,0,0,1,   0,0,   1],
    [0,0,1,0,1,   1,0,0,0,1,   0,0,1,0,1,   0,0,   1],    // 5  3 bonus
    
    [1,0,1,0,1,   0,0,1,0,1,   0,0,1,0,1,   0,0,   1],
    [0,0,1,0,1,   1,0,0,0,0,   1,0,1,0,0,   0,0,   1],
    [0,1,0,0,1,   2,0,2,0,2,   1,0,0,0,1,   0,0,   1],
    [1,0,0,0,1,   0,0,1,0,1,   0,0,1,0,1,   0,0,   1],
    [1,0,0,0,0,   1,0,1,0,0,   1,0,1,0,0,   0,0,   1],    // 10  3
    
    [0,0,1,0,0,   0,0,61,0,0,   1,0,1,0,1,   0,0,   1],
    [1,0,0,0,0,   1,0,2,0,0,   0,0,1,0,1,   0,0,   1],
    [1,4,6,4,1,   1,4,1,4,1,   1,4,1,4,1,   0,0,   1],
    [0,0,0,0,1,   0,0,1,0,0,   1,0,0,0,0,   0,0,   1],
    [0,0,0,0,1,   2,0,0,0,1,   0,0,0,0,1,   0,0,   1],     // 15  2
    
    [0,0,1,0,1,   0,0,1,0,1,   1,0,0,0,1,   0,0,   1],
    [0,0,1,0,0,   0,0,1,0,1,   1,0,2,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,0,0,0,   1,0,1,0,0,   0,0,   1],
    [1,0,0,0,0,   0,0,1,0,0,   1,0,1,0,0,   0,0,   1],
    [0,0,1,0,1,   1,0,0,0,1,   0,0,0,0,1,   0,0,   1],    // 20  2
    
    [1,0,1,0,0,   0,0,1,0,1,   0,0,1,0,1,   0,0,   1],
    [0,0,1,0,0,   0,0,61,0,1,   0,0,0,0,1,   0,0,   1],
    [2,0,2,0,2,   0,0,0,0,1,   0,0,1,0,1,   0,3,   1],
    [1,0,0,0,1,   1,0,1,0,1,   1,0,61,0,1,   0,0,   1],
    [1,0,0,0,0,   1,0,0,0,1,   0,0,1,0,1,   0,0,   1],    // 25  3
    
    [0,0,6,0,0,   1,0,6,0,1,   0,0,1,0,1,   0,0,   1],
    [1,0,0,0,0,   1,0,2,0,0,   0,0,1,0,1,   0,0,   1],
    [1,4,1,4,1,   1,4,61,4,1,   1,4,1,4,1,   0,0,   1],
    [1,0,0,0,1,   1,0,0,0,1,   0,0,1,0,0,   0,0,   1],
    [0,0,1,0,1,   1,0,2,0,1,   1,0,1,0,0,   0,0,   1],    // 30  2
    
    [1,0,1,0,1,   1,0,0,0,1,   0,0,1,0,1,   0,0,   1],
    [0,0,1,0,0,   0,0,1,0,1,   1,0,0,0,1,   0,0,   1],
    [1,0,1,0,0,   0,0,6,0,1,   1,0,0,0,1,   0,0,   1],
    [1,0,0,0,1,   0,0,1,0,0,   0,0,1,0,1,   0,0,   1],
    [0,0,1,0,1,   1,0,0,0,1,   1,0,2,0,0,   0,0,   1],    // 35  1
]

let level3Three: [[Int]] = [
    // Debris, barriers settitns: 1 debis(mine), 0 nothingy, 2 barrier(bonus), 4 middle barrier
    
    // Partition settings: 1 MAXleft, 2 MIDLeft 3 center, 4 MIDReight, 5 MAXRight, 6 Center 90 degres. First number 2 zPosition, second 4 zPosition
    // Partitions settings: First Low position 2z , second high position 4z
    
    // 22 bonus
    
    // low          middle        high       partition settings
    [1,0,1,0,1,   1,0,0,0,2,   1,0,0,0,1,   0,0,   1],
    [0,0,0,0,0,   1,0,0,0,0,   1,0,1,0,1,   0,0,   1],
    [1,0,2,0,1,   0,0,1,0,0,   0,0,0,0,1,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,1,   1,0,2,0,0,   0,0,   1],
    [0,0,1,0,0,   1,0,0,0,0,   0,0,0,0,0,   0,0,   1],    // 5
    
    [0,0,0,0,0,   1,0,1,0,0,   0,0,1,0,0,   0,0,   1],
    [2,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,1,   0,0,1,0,0,   0,0,   1],
    [0,0,1,0,0,   1,0,1,0,0,   1,0,0,0,0,   0,0,   1],
    [1,0,0,0,0,   1,0,0,0,1,   0,0,0,0,0,   0,0,   1],    // 10
    
    [0,0,1,0,0,   0,0,2,0,1,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,0,0,1,   0,0,1,0,0,   0,0,   1],
    [0,0,2,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,0,0,1,   0,0,0,0,0,   0,0,   1],
    [1,0,0,0,0,   1,0,0,0,2,   0,0,0,0,1,   0,0,   1],     // 15
    
    [0,0,1,0,0,   0,0,2,0,0,   1,0,0,0,0,   0,0,   1],
    [1,0,0,0,0,   1,0,1,0,0,   0,0,1,0,0,   0,0,   1],
    [0,0,0,0,1,   0,0,2,0,1,   1,0,0,0,1,   0,0,   1],
    [0,0,2,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0,   1],
    [1,0,0,0,0,   1,0,1,0,0,   0,0,1,0,0,   0,0,   1],    // 20
    
    [0,0,1,0,0,   0,0,0,0,0,   0,0,2,0,0,   0,0,   1],
    [1,0,0,0,0,   1,0,1,0,1,   1,0,0,0,1,   0,0,   1],
    [0,0,0,0,1,   0,0,2,0,0,   0,0,1,0,0,   0,0,   1],
    [1,0,0,0,0,   0,0,0,0,0,   0,0,1,0,0,   0,0,   1],
    [0,0,1,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0,   1],    // 25
    
    [0,0,0,0,0,   1,0,0,0,0,   1,0,0,0,0,   0,0,   1],
    [0,0,2,0,1,   0,0,1,0,0,   0,0,0,0,1,   0,0,   1],
    [1,0,2,0,1,   1,0,1,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,2,   1,0,1,0,1,   0,0,   1],
    [1,0,0,0,1,   2,0,1,0,0,   0,0,0,0,0,   0,0,   1],     // 30
    
    [0,0,0,0,0,   0,0,0,0,0,   1,0,0,0,0,   0,0,   1],
    [1,0,2,0,0,   0,0,1,0,0,   0,0,1,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,1,   0,0,   1],
    [0,0,0,0,1,   1,0,1,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,2,0,0,   0,0,0,0,0,   1,0,0,0,0,   0,0,   1],    // 35
    
    [1,0,0,0,1,   1,0,0,0,1,   0,0,1,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,1,   0,0,   1],
    [1,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,1,0,0,   0,0,1,0,0,   1,0,1,0,0,   0,0,   1],
    [0,0,0,0,1,   0,0,0,0,2,   0,0,0,0,0,   0,0,   1],    // 40
    
    [0,0,0,0,0,   0,0,1,0,0,   1,0,0,0,1,   0,0,   1],
    [1,0,1,0,1,   2,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [1,0,1,0,1,   0,0,1,0,0,   2,0,1,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,1,0,2,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,0,0,0,   1,0,0,0,1,   0,0,   1],     // 45
    
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,1,0,0,   0,0,   1],
    [0,0,2,0,0,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,0,   1,0,2,0,0,   0,0,   1],
    [1,0,1,0,1,   1,0,0,0,1,   0,0,0,0,0,   0,0,   1],    // 50
    
    [0,0,0,0,0,   0,0,1,0,0,   2,0,0,0,1,   0,0,   1],
    [1,0,1,0,1,   0,0,1,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,1,0,0,   1,0,2,0,0,   0,0,1,0,0,   0,0,   1],
    [1,0,0,0,1,   1,0,1,0,0,   0,0,2,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,0,0,1,   1,0,0,0,0,   0,0,   1],    // 55
    
    [0,0,2,0,0,   1,0,0,0,1,   0,0,1,0,0,   0,0,   1],
    [1,0,0,0,0,   0,0,1,0,0,   0,0,0,0,1,   0,0,   1],
    [0,0,1,0,0,   1,0,0,0,1,   2,0,0,0,0,   0,0,   1],
    [2,0,0,0,0,   0,0,1,0,0,   1,0,0,0,1,   0,0,   1],
    [0,0,2,0,0,   1,0,0,0,1,   0,0,1,0,1,   0,0,   1],    //60
]

let level3Four: [[Int]] = [
    // Debris, barriers settitns: 1 debis(mine), 0 nothingy, 2 barrier(bonus), 4 middle barrier
    
    // Partition settings: 1 MAXleft, 2 MIDLeft 3 center, 4 MIDReight, 5 MAXRight, 6 Center 90 degres. First number 2 zPosition, second 4 zPosition
    // Partitions settings: First Low position 2z , second high position 4z
    
    // 22 bonus
    
    // low          middle        high       partition settings
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   2,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [2,0,0,0,0,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,0,   0,0,2,0,0,   0,0,   1],    // 5  0 bonus
    
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   2,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [2,0,0,0,0,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,1,0,0,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,2,0,0,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],    // 10  1
    
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   2,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [2,0,0,0,0,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   2,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,0,   2,0,0,0,0,   0,0,   1],     // 15  1
    
    [0,0,0,0,0,   0,0,0,0,0,   0,0,2,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,0,   2,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,0,   0,0,2,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,0,   0,0,0,0,2,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,1,   0,0,0,0,0,   0,0,   1],    // 20  1
    
    [0,0,0,0,2,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,2,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,0,   0,0,0,0,2,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,0,   0,0,6,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0,   1],    // 25  0
    
    [0,0,0,0,0,   0,0,0,0,2,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,1,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,2,0,0,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,1,0,0,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],    // 30  1
    
    [0,0,0,0,2,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,1,0,0,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,2,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,2,0,0,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,1,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],    // 35  1
    
    [0,0,0,0,0,   0,0,0,0,2,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,0,   0,0,0,0,2,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,1,   0,0,0,0,0,   0,0,   1],
    [1,0,0,0,0,   0,0,0,0,0,   0,0,0,0,2,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,0,   0,0,1,0,0,   0,0,   1],    // 40  1
    
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   2,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,0,   0,0,2,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,0,   61,0,0,0,0,   0,0,   1],     // 45  2
    
    [0,0,0,0,0,   2,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,2,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,2,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,1,   0,0,0,0,0,   0,0,   1],    // 50  1
    
    [0,0,0,0,2,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,2,0,0,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,1,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,2,0,0,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0,   1],    //55  1
    
    [0,0,0,0,0,   0,0,0,0,2,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,2,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,2,0,0,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,1,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   2,0,0,0,0,   0,0,0,0,0,   0,0,   1],     // 60  2
]

let level3Five: [[Int]] = [
    // Debris, barriers settitns: 1 debis(mine), 0 nothingy, 2 barrier(bonus), 4 middle barrier
    
    // Partition settings: 1 MAXleft, 2 MIDLeft 3 center, 4 MIDReight, 5 MAXRight, 6 Center 90 degres. First number 2 zPosition, second 4 zPosition
    // Partitions settings: First Low position 2z , second high position 4z
    
    // 22 bonus
    
    // low          middle        high       partition settings
    // low          middle        high       partition settings
    
    
    [0,0,0,0,1,   0,0,0,0,1,   0,0,0,0,1,   0,0,   1],
    [0,0,1,0,1,   0,0,0,0,1,   2,0,0,0,1,   0,0,   1],
    [1,4,1,4,1,   1,4,1,4,1,   1,4,1,4,1,   0,0,   1],
    [0,0,0,0,1,   1,0,0,0,0,   1,0,0,0,1,   0,0,   1],
    [0,0,2,0,1,   1,0,0,0,1,   1,0,1,0,0,   0,0,   1],    // 35  2
    
    [1,0,1,0,0,   0,0,1,0,0,   0,0,0,0,1,   0,0,   1],
    [2,0,1,0,1,   1,0,0,0,0,   1,0,1,0,0,   0,0,   1],
    [1,4,1,4,1,   1,4,1,4,1,   1,4,1,4,1,   0,0,   1],
    [0,1,0,0,1,   0,0,1,0,0,   2,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],    // 10  2
    
    [1,0,0,0,1,   1,0,0,0,1,   0,0,1,0,1,   0,0,   1],
    [1,0,0,0,1,   0,0,1,0,0,   0,0,0,0,1,   0,0,   1],
    [2,0,0,0,1,   0,0,2,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,1,0,1,   1,0,1,0,0,   1,0,2,0,1,   0,0,   1],
    [1,0,0,0,1,   0,0,0,0,1,   0,0,0,0,1,   0,0,   1],    //55  1
    
    [0,4,0,4,0,   0,4,0,4,0,   0,4,0,4,0,   0,0,   1],
    [1,0,0,0,1,   0,0,1,0,0,   0,0,0,0,1,   0,0,   1],
    [1,4,1,4,1,   1,4,1,4,1,   1,4,1,4,1,   0,0,   1],
    [0,0,1,0,0,   1,0,0,0,1,   1,0,0,0,1,   0,0,   1],
    [1,0,2,0,1,   0,0,1,0,1,   0,0,1,0,1,   0,0,   1],    // 5  1 bonus
    
    [1,0,1,0,0,   1,0,0,0,1,   0,0,0,0,1,   0,0,   1],
    [1,0,0,0,0,   1,0,2,0,0,   0,0,0,0,1,   0,0,   1],
    [1,4,1,4,1,   1,4,1,4,1,   1,4,1,4,1,   0,0,   1],
    [0,0,0,0,1,   0,0,0,0,1,   1,0,0,0,0,   0,0,   1],
    [2,0,1,0,0,   0,0,1,0,1,   1,0,1,0,0,   0,0,   1],    // 30  2

    [1,0,1,0,1,   1,0,1,0,0,   1,0,1,0,0,   0,0,   1],
    [1,0,1,0,0,   0,0,1,0,1,   1,0,0,0,1,   0,0,   1],
    [1,0,2,0,1,   1,0,0,0,1,   0,0,1,0,0,   0,0,   1],
    [1,0,1,0,0,   2,0,2,0,2,   1,0,1,0,1,   0,0,   1],
    [1,0,0,0,1,   1,0,0,0,1,   1,0,1,0,0,   0,0,   1],    // 40  1
    
    [1,0,1,0,2,   0,0,1,0,0,   1,0,0,0,1,   0,0,   1],
    [1,0,0,0,0,   1,0,0,0,1,   0,0,1,0,2,   0,0,   1],
    [1,4,1,4,1,   1,4,1,4,1,   1,4,1,4,1,   0,0,   1],
    [0,0,1,0,1,   0,0,1,0,0,   1,0,0,0,1,   0,0,   1],
    [0,0,1,0,1,   2,0,0,0,1,   1,0,0,0,1,   0,0,   1],     // 15  3
    
    [1,0,1,0,0,   0,0,1,0,0,   0,0,1,0,1,   0,0,   1],
    [0,0,1,0,0,   0,0,0,0,1,   0,0,0,0,1,   0,0,   1],
    [1,4,1,4,1,   1,4,1,4,1,   1,4,1,4,1,   0,3,   1],
    [0,0,1,0,1,   0,0,0,0,1,   1,0,2,0,0,   0,0,   1],
    [1,0,0,0,1,   1,0,2,0,0,   1,0,0,0,1,   0,0,   1],    // 25  2
    
    [1,0,0,0,1,   1,0,0,0,1,   1,0,0,0,1,   0,0,   1],
    [1,0,2,0,1,   1,0,1,0,1,   0,0,1,0,1,   0,0,   1],
    [1,0,1,0,0,   0,0,0,0,1,   1,0,0,0,1,   0,0,   1],
    [1,4,1,4,1,   1,4,1,4,1,   1,4,0,4,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   2,0,1,0,1,   0,0,   1],     // 45  2
    
    [1,0,1,0,0,   1,0,0,0,1,   1,0,0,0,1,   0,0,   1],
    [1,0,0,0,1,   1,0,0,0,1,   1,0,0,0,1,   0,0,   1],
    [0,0,1,0,1,   0,0,1,0,0,   0,0,0,0,1,   0,0,   1],
    [1,0,1,0,2,   0,0,2,0,1,   1,0,0,0,1,   0,0,   1],
    [1,0,0,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],    // 50  1
    
    [1,0,1,0,2,   0,0,1,0,0,   1,0,0,0,1,   0,0,   1],
    [1,0,0,0,0,   1,0,0,0,1,   0,0,1,0,2,   0,0,   1],
    [1,4,1,4,1,   1,4,1,4,1,   1,4,1,4,1,   0,0,   1],
    [0,0,1,0,1,   0,0,1,0,0,   1,0,0,0,1,   0,0,   1],
    [0,0,1,0,1,   2,0,0,0,1,   1,0,0,0,1,   0,0,   1],     // 15  3

    [1,0,1,0,1,   1,0,1,0,1,   1,0,1,0,0,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   2,0,1,0,1,   0,0,   1],
    [2,0,2,0,2,   0,0,1,0,1,   1,0,0,0,0,   0,0,   1],
    [1,0,1,0,0,   1,0,0,0,1,   0,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,2,0,0,   1,0,1,0,1,   0,0,   1],     // 60  2
]

let level3Six: [[Int]] = [
    // Debris, barriers settitns: 1 debis(mine), 0 nothingy, 2 barrier(bonus), 4 middle barrier
    
    // Partition settings: 1 MAXleft, 2 MIDLeft 3 center, 4 MIDReight, 5 MAXRight, 6 Center 90 degres. First number 2 zPosition, second 4 zPosition
    // Partitions settings: First Low position 2z , second high position 4z
    
    // 22 bonus
    
    // low          middle        high       partition settings
    [1,0,1,0,0,   0,0,1,0,2,   1,0,1,0,0,   0,0,   1],
    [0,0,1,0,2,   1,0,0,0,1,   0,0,1,0,1,   0,0,   1],
    [0,0,1,0,0,   0,0,1,0,1,   1,0,0,0,1,   0,0,   1],
    [0,0,1,0,1,   0,0,1,0,0,   1,0,0,0,1,   0,0,   1],
    [0,0,1,0,1,   1,0,2,0,0,   1,0,1,0,0,   0,0,   1],    // 5  0 bonus
    
    [0,0,1,0,1,   0,0,1,0,1,   0,0,1,0,0,   0,0,   1],
    [1,0,1,0,0,   1,0,0,0,2,   1,0,0,0,1,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,0,   0,0,1,0,1,   0,0,   1],
    [0,0,0,0,1,   2,0,1,0,1,   1,0,1,0,0,   0,0,   1],
    [1,0,0,0,1,   1,0,0,0,0,   0,0,1,0,0,   0,0,   1],    // 10  1
    
    [0,0,1,0,1,   1,0,1,0,0,   1,0,1,0,0,   0,0,   1],
    [0,0,1,0,0,   2,0,1,0,0,   0,0,1,0,1,   0,0,   1],
    [0,0,0,0,1,   1,0,0,0,1,   0,0,1,0,0,   0,0,   1],
    [1,0,1,0,0,   1,0,1,0,0,   2,0,1,0,1,   0,0,   1],
    [1,0,1,0,0,   0,0,1,0,0,   1,0,1,0,0,   0,0,   1],     // 15  1
    
    [0,0,1,0,1,   0,0,1,0,1,   0,0,1,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,0,   2,0,1,0,1,   0,0,   1],
    [1,0,0,0,1,   0,0,1,0,1,   1,0,0,0,1,   0,0,   1],
    [0,0,1,0,1,   0,0,1,0,1,   0,0,1,0,1,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,2,   0,0,0,0,0,   0,0,   1],    // 20  1
    
    [0,0,1,0,1,   0,0,1,0,0,   1,0,0,0,1,   0,0,   1],
    [1,0,0,0,1,   0,0,1,0,0,   2,0,1,0,1,   0,0,   1],
    [0,0,1,0,0,   1,0,1,0,0,   0,0,0,0,1,   0,0,   1],
    [1,0,1,0,0,   0,0,1,0,1,   2,0,1,0,0,   0,0,   1],
    [0,0,1,0,0,   1,0,0,0,0,   0,0,1,0,0,   0,0,   1]    // 25  0
    
]

// [2,0,0,0,0,   2,0,0,0,0,   0,0,2,0,0,   0,0,   1],
// [0,0,0,0,0,   2,0,0,0,2,   0,0,0,0,0,   0,0,   1],
// [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0,   1],
// [0,0,2,0,2,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
// [0,0,0,0,0,   0,0,2,0,2,   0,0,0,0,0,   0,0,   1],    // 30  1
//
// [0,0,2,0,0,   0,0,0,0,0,   0,0,0,0,2,   0,0,   1],
// [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0,   1],
// [2,0,0,0,0,   0,0,2,0,0,   0,0,2,0,0,   0,0,   1],
// [0,0,0,0,0,   2,0,0,0,0,   0,0,0,0,0,   0,0,   1],
// [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,2,   0,0,   1],    // 35  1


let level3Seven: [[Int]] = [
    // Debris, barriers settitns: 1 debis(mine), 0 nothingy, 2 barrier(bonus), 4 middle barrier
    
    // Partition settings: 1 MAXleft, 2 MIDLeft 3 center, 4 MIDReight, 5 MAXRight, 6 Center 90 degres. First number 2 zPosition, second 4 zPosition
    // Partitions settings: First Low position 2z , second high position 4z
    
    // 22 bonus
    
    // low          middle        high       partition settings
    [0,0,1,0,0,   1,0,0,0,0,   0,0,0,0,1,   0,0,   1],
    [1,0,0,0,0,   0,0,1,0,0,   0,0,0,0,1,   0,0,   1],
    [0,0,1,0,1,   0,0,0,0,1,   6,0,0,0,1,   0,0,   1],
    [0,0,1,0,0,   1,0,0,0,0,   0,0,0,0,1,   0,0,   1],
    [6,0,0,0,1,   1,0,0,0,1,   0,0,0,0,0,   0,0,   1],    // 5  3 bonus
    
    [1,0,1,0,0,   0,0,1,0,0,   0,0,0,0,1,   0,0,   1],
    [0,0,1,0,1,   1,0,0,0,0,   1,0,1,0,0,   0,0,   1],
    [0,0,0,0,1,   6,0,6,0,6,   0,0,0,0,1,   0,0,   1],
    [0,0,0,0,1,   0,0,1,0,0,   0,0,0,0,1,   0,0,   1],
    [1,0,0,0,0,   1,0,0,0,0,   1,0,0,0,0,   0,0,   1],    // 10  3
    
    [0,0,1,0,0,   0,0,1,0,0,   1,0,0,0,0,   0,0,   1],
    [1,0,0,0,0,   1,0,6,0,0,   0,0,0,0,1,   0,0,   1],
    [1,4,1,4,1,   1,4,6,4,1,   1,4,1,4,1,   0,0,   1],
    [1,4,1,4,1,   1,4,6,4,1,   1,4,1,4,1,   0,0,   1],
    [1,4,1,4,1,   1,4,0,4,1,   1,4,1,4,1,   0,0,   1],     // 15  2
    
    [0,0,1,0,0,   0,0,1,0,0,   0,0,0,0,1,   0,0,   1],
    [0,0,1,0,1,   0,0,0,0,1,   0,0,1,0,0,   0,0,   1],
    [1,4,1,4,1,   1,4,6,4,1,   1,4,1,4,1,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,0,   0,0,1,0,0,   0,0,   1],
    [0,0,1,0,0,   0,0,0,0,1,   0,0,0,0,1,   0,0,   1],    // 20  2
    
    [0,0,1,0,0,   0,0,1,0,0,   0,0,1,0,0,   0,0,   1],
    [0,0,1,0,0,   0,0,0,0,1,   0,0,0,0,1,   0,0,   1],
    [6,0,6,0,6,   0,0,0,0,1,   0,0,0,0,0,   0,3,   1],
    [0,0,0,0,1,   0,0,0,0,1,   1,0,0,0,0,   0,0,   1],
    [1,0,0,0,0,   1,0,0,0,0,   0,0,0,0,1,   0,0,   1],    // 25  3
    
    [1,0,0,0,1,   6,0,6,0,1,   0,0,0,0,1,   0,0,   1],
    [0,0,1,0,0,   0,0,0,0,1,   1,0,0,0,1,   0,0,   1],
    [1,4,1,4,1,   1,4,6,4,1,   1,4,1,4,1,   0,0,   1],
    [0,0,0,0,1,   0,0,0,0,0,   0,0,0,0,1,   0,0,   1],
    [0,0,0,0,1,   1,0,0,0,0,   1,0,6,0,0,   0,0,   1],    // 30  1
    
    [0,4,0,4,0,   0,4,0,4,0,   0,4,0,4,0,   0,0,   1],
    [1,0,0,0,1,   0,0,1,0,0,   0,0,0,0,1,   0,0,   1],
    [1,4,1,4,1,   1,4,6,4,1,   1,4,1,4,1,   0,0,   1],
    [0,0,1,0,0,   1,0,0,0,1,   1,0,0,0,1,   0,0,   1],
    [1,0,2,0,1,   0,0,1,0,1,   0,0,1,0,1,   0,0,   1],    // 35  1 bonus
    
//    [1,0,1,0,0,   0,0,1,0,0,   0,0,0,0,1,   0,0,   1],
//    [2,0,1,0,1,   1,0,0,0,0,   1,0,1,0,0,   0,0,   1],
//    [1,4,1,4,1,   1,4,1,4,1,   1,4,1,4,1,   0,0,   1],
//    [0,1,0,0,1,   0,0,1,0,0,   2,0,1,0,1,   0,0,   1],
//    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],    // 40  2
//    
//    [1,0,1,0,2,   0,0,1,0,0,   1,0,0,0,1,   0,0,   1],
//    [1,0,0,0,0,   1,0,0,0,1,   0,0,1,0,2,   0,0,   1],
//    [1,4,1,4,1,   1,4,1,4,1,   1,4,1,4,1,   0,0,   1],
//    [0,0,1,0,1,   0,0,1,0,0,   1,0,0,0,1,   0,0,   1],
//    [0,0,1,0,1,   2,0,0,0,1,   1,0,0,0,1,   0,0,   1],     // 45  3
//    
//    [0,0,1,0,1,   0,0,1,0,0,   0,0,0,0,1,   0,0,   1],
//    [1,0,1,0,0,   1,0,2,0,1,   0,0,1,0,0,   0,0,   1],
//    [1,4,1,4,1,   1,4,1,4,1,   1,4,1,4,1,   0,0,   1],
//    [1,0,0,0,1,   0,0,0,0,1,   0,0,1,0,1,   0,0,   1],
//    [0,0,1,0,0,   0,0,0,0,1,   1,0,0,0,2,   0,0,   1],    // 50  2
//    
//    [1,0,1,0,0,   1,0,0,0,1,   0,0,0,0,1,   0,0,   1],
//    [1,0,0,0,0,   1,0,2,0,0,   0,0,0,0,1,   0,0,   1],
//    [1,4,1,4,1,   1,4,1,4,1,   1,4,1,4,1,   0,0,   1],
//    [0,0,0,0,1,   0,0,0,0,1,   1,0,0,0,0,   0,0,   1],
//    [2,0,1,0,0,   0,0,1,0,1,   1,0,1,0,0,   0,0,   1],    // 55  2
//    
//    [0,0,0,0,1,   0,0,0,0,1,   0,0,0,0,1,   0,0,   1],
//    [0,0,1,0,1,   0,0,0,0,1,   2,0,0,0,1,   0,0,   1],
//    [1,4,1,4,1,   1,4,1,4,1,   1,4,1,4,1,   0,0,   1],
//    [0,0,0,0,1,   1,0,0,0,0,   1,0,0,0,1,   0,0,   1],
//    [0,0,2,0,1,   1,0,0,0,1,   1,0,1,0,0,   0,0,   1],    // 60  2
]

let level3Eight: [[Int]] = [
    // Debris, barriers settitns: 1 debis(mine), 0 nothingy, 2 barrier(bonus), 4 middle barrier
    
    // Partition settings: 1 MAXleft, 2 MIDLeft 3 center, 4 MIDReight, 5 MAXRight, 6 Center 90 degres. First number 2 zPosition, second 4 zPosition
    // Partitions settings: First Low position 2z , second high position 4z
    
    // 22 bonus
    
    // low          middle        high       partition settings
    [2,0,2,0,2,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   2,0,2,0,2,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,0,   2,0,2,0,2,   0,0,   1],
    [0,0,0,0,0,   2,0,2,0,2,   0,0,0,0,0,   0,0,   1],
    [1,0,2,0,2,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],    // 5  0 bonus
    
    [0,0,0,0,0,   2,0,2,0,2,   0,0,0,0,0,   0,0,   1],
    [2,0,2,0,2,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,2,0,2,   0,0,0,0,0,   0,0,   1],
    [2,0,2,0,2,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   2,0,2,0,2,   0,0,0,0,0,   0,0,   1],    // 10  1
    
    [0,0,0,0,0,   0,0,0,0,0,   2,0,2,0,2,   0,0,   1],
    [0,0,0,0,0,   2,0,2,0,2,   0,0,0,0,0,   0,0,   1],
    [2,0,2,0,2,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   2,0,2,0,2,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,0,   2,0,2,0,2,   0,0,   1],     // 15  1
    
    [0,0,0,0,0,   2,0,2,0,2,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,0,   2,0,2,0,2,   0,0,   1],
    [0,0,0,0,0,   1,0,2,0,2,   0,0,0,0,0,   0,0,   1],
    [0,0,1,0,1,   1,0,1,0,1,   2,0,2,0,2,   0,0,   1],
    [0,0,0,0,0,   2,0,2,0,2,   0,0,0,0,0,   0,0,   1],    // 20  1
    
    [2,0,2,0,2,   0,0,0,0,0,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   2,0,2,0,2,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   1,0,1,0,1,   2,0,2,0,2,   0,0,   1],
    [1,0,1,0,1,   0,0,0,0,0,   2,0,2,0,2,   0,0,   1],
    [1,0,1,0,1,   2,0,2,0,2,   1,0,1,0,1,   0,0,   1],    // 25  0
    
    [2,0,2,0,2,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   2,0,2,0,2,   0,0,0,0,0,   0,0,   1],
    [1,0,1,0,1,   0,0,0,0,0,   2,0,2,0,1,   0,0,   1],
    [1,0,1,0,1,   2,0,2,0,2,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   0,0,1,0,1,   2,0,2,0,2,   0,0,   1],    // 30  1
    
    [1,0,1,0,1,   2,0,2,0,2,   0,0,0,0,0,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   2,0,2,0,2,   0,0,   1],
    [1,0,1,0,1,   2,0,2,0,2,   0,0,0,0,0,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   2,0,2,0,2,   0,0,   1],
    [1,0,1,0,1,   2,0,2,0,2,   1,0,1,0,1,   0,0,   1],    // 35  1

    //
    //    [1,0,1,0,1,   1,0,1,0,1,   1,0,0,0,1,   0,0,   1],
    //    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],
    //    [1,0,1,0,1,   1,0,1,0,0,   1,0,1,0,1,   0,0,   1],
    //    [1,0,1,0,2,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    //    [1,0,0,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],    // 50  1
    //
    //    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],
    //    [1,0,0,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    //    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],
    //    [1,0,1,0,1,   1,0,1,0,1,   1,0,2,0,1,   0,0,   1],
    //    [1,0,1,0,1,   1,0,1,0,1,   0,0,1,0,1,   0,0,   1],    //55  1
    //
    //    [1,0,1,0,1,   1,0,1,0,1,   1,0,0,0,1,   0,0,   1],
    //    [1,0,1,0,1,   1,0,1,0,1,   2,0,1,0,1,   0,0,   1],
    //    [1,0,1,0,1,   0,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    //    [1,0,1,0,0,   1,0,1,0,1,   0,0,1,0,1,   0,0,   1],
    //    [1,0,1,0,1,   1,0,1,0,0,   1,0,2,0,1,   0,0,   1],     // 60  2
]

let level3Nine: [[Int]] = [
    // Debris, barriers settitns: 1 debis(mine), 0 nothingy, 2 barrier(bonus), 4 middle barrier
    
    // Partition settings: 1 MAXleft, 2 MIDLeft 3 center, 4 MIDReight, 5 MAXRight, 6 Center 90 degres. First number 2 zPosition, second 4 zPosition
    // Partitions settings: First Low position 2z , second high position 4z
    
    // 22 bonus
    
    // low          middle        high       partition settings
    [0,0,0,0,0,   2,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [2,0,0,0,0,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   2,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,0,   0,0,2,0,0,   0,0,   1],    // 5  0 bonus
    
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   2,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [2,0,0,0,0,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,2,0,0,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,2,0,0,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],    // 10  1
    
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   2,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [2,0,0,0,0,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   2,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,0,   2,0,0,0,0,   0,0,   1],     // 15  1
    
    [0,0,0,0,0,   0,0,0,0,0,   2,0,2,0,2,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,0,   2,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,0,   0,0,2,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,0,   0,0,0,0,2,   0,0,   1],
    [0,0,0,0,0,   0,0,0,0,2,   0,0,0,0,0,   0,0,   1],    // 20  1
    
    [1,0,1,0,0,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,0,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   1,0,1,0,2,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   1,0,0,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],    // 25  0
    
    [0,0,0,0,0,   0,0,0,0,2,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,2,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,2,0,0,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,2,0,0,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],    // 30  1
    
    [0,0,0,0,2,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,2,0,0,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,2,   0,0,2,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,2,0,0,   0,0,0,0,0,   0,0,0,0,0,   0,0,   1],
    [0,0,0,0,2,   0,0,1,0,0,   0,0,0,0,0,   0,0,   1],    // 35  1
    
    //    [1,0,1,0,1,   1,0,1,0,0,   1,0,1,0,1,   0,0,   1],
    //    [1,0,1,0,0,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    //    [1,0,2,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    //    [1,0,1,0,0,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    //    [1,0,0,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],    // 40  1
    //
    //    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],
    //    [1,0,2,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    //    [1,0,1,0,1,   0,0,0,0,1,   1,0,1,0,1,   0,0,   1],
    //    [1,0,1,0,1,   1,0,1,0,1,   1,0,0,0,1,   0,0,   1],
    //    [1,0,1,0,1,   1,0,1,0,1,   2,0,1,0,1,   0,0,   1],     // 45  2
    //
    //    [1,0,1,0,1,   1,0,1,0,1,   1,0,0,0,1,   0,0,   1],
    //    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],
    //    [1,0,1,0,1,   1,0,1,0,0,   1,0,1,0,1,   0,0,   1],
    //    [1,0,1,0,2,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    //    [1,0,0,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],    // 50  1
    //
    //    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],
    //    [1,0,0,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    //    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],
    //    [1,0,1,0,1,   1,0,1,0,1,   1,0,2,0,1,   0,0,   1],
    //    [1,0,1,0,1,   1,0,1,0,1,   0,0,1,0,1,   0,0,   1],    //55  1
    //
    //    [1,0,1,0,1,   1,0,1,0,1,   1,0,0,0,1,   0,0,   1],
    //    [1,0,1,0,1,   1,0,1,0,1,   2,0,1,0,1,   0,0,   1],
    //    [1,0,1,0,1,   0,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    //    [1,0,1,0,0,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    //    [1,0,1,0,1,   1,0,1,0,2,   1,0,1,0,1,   0,0,   1],     // 60  2
]

let level3Ten: [[Int]] = [
    // Debris, barriers settitns: 1 debis(mine), 0 nothingy, 2 barrier(bonus), 4 middle barrier
    
    // Partition settings: 1 MAXleft, 2 MIDLeft 3 center, 4 MIDReight, 5 MAXRight, 6 Center 90 degres. First number 2 zPosition, second 4 zPosition
    // Partitions settings: First Low position 2z , second high position 4z
    
    // 22 bonus
    
    // low          middle        high       partition settings
    [0,0,1,0,1,   1,0,0,0,1,   0,0,0,0,1,   0,0,   1],
    [1,0,0,0,1,   1,0,1,0,0,   1,0,1,0,1,   0,0,   1],
    [0,0,1,0,0,   0,0,0,0,1,   1,0,1,0,0,   0,0,   1],
    [1,0,0,0,1,   1,0,1,0,1,   1,0,0,0,1,   0,0,   1],
    [0,0,1,0,1,   1,0,0,0,1,   0,0,1,0,1,   0,0,   1],    // 5  0 bonus
    
    [0,0,0,0,1,   2,0,1,0,0,   1,0,0,0,1,   0,0,   1],
    [0,0,0,0,1,   1,0,0,0,1,   1,0,0,0,1,   0,0,   1],
    [1,4,1,4,1,   1,4,61,4,1,   1,4,6,4,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   0,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   1,0,0,0,1,   0,0,   1],    // 10  1
    
    [1,0,0,0,1,   1,0,6,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,0,0,1,   1,0,1,0,1,   1,0,0,0,1,   0,0,   1],
    [1,4,1,4,1,   1,4,9,4,1,   1,4,1,4,1,   0,0,   1],
    [1,0,1,0,0,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   1,0,1,0,0,   0,0,   1],     // 15  1
    
    [1,0,1,0,1,   1,0,1,0,0,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [1,4,1,4,1,   1,4,6,4,1,   1,4,1,4,1,   0,0,   1],
    [0,0,1,0,1,   1,0,1,0,1,   1,0,0,0,1,   0,0,   1],
    [0,0,1,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],    // 20  1
    
    [1,0,1,0,1,   0,0,0,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,0,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],
    [1,4,1,4,1,   1,4,6,4,1,   1,4,1,4,1,   0,0,   1],
    [1,0,1,0,1,   1,0,0,0,1,   1,0,0,0,0,   0,0,   1],
    [1,0,0,0,0,   1,0,1,0,0,   1,0,0,0,1,   0,0,   1],    // 25  0
    
    [1,0,1,0,0,   1,0,0,0,0,   1,0,0,0,1,   0,0,   1],
    [1,0,2,0,1,   1,0,0,0,1,   0,0,1,0,0,   0,0,   1],
    [1,4,1,4,1,   1,4,61,4,1,   1,4,1,4,1,   0,0,   1],
    [1,0,0,0,1,   1,0,0,0,1,   0,0,1,0,0,   0,0,   1],
    [1,0,1,0,1,   0,0,1,0,1,   1,0,1,0,1,   0,0,   1],    // 30  1
    
    [1,0,0,0,1,   1,0,0,0,1,   0,0,1,0,0,   0,0,   1],
    [1,0,1,0,1,   1,0,0,0,1,   1,0,0,0,1,   0,0,   1],
    [1,4,1,4,1,   1,4,61,4,1,   1,4,0,4,1,   0,0,   1],
    [1,0,1,0,0,   1,0,0,0,1,   0,0,2,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,0,   0,0,   1],    // 35  1
    
    //    [1,0,1,0,1,   1,0,1,0,0,   1,0,1,0,1,   0,0,   1],
    //    [1,0,1,0,0,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    //    [1,0,2,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    //    [1,0,1,0,0,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    //    [1,0,0,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],    // 40  1
    //
    //    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],
    //    [1,0,2,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    //    [1,0,1,0,1,   0,0,0,0,1,   1,0,1,0,1,   0,0,   1],
    //    [1,0,1,0,1,   1,0,1,0,1,   1,0,0,0,1,   0,0,   1],
    //    [1,0,1,0,1,   1,0,1,0,1,   2,0,1,0,1,   0,0,   1],     // 45  2
    //
    //    [1,0,1,0,1,   1,0,1,0,1,   1,0,0,0,1,   0,0,   1],
    //    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],
    //    [1,0,1,0,1,   1,0,1,0,0,   1,0,1,0,1,   0,0,   1],
    //    [1,0,1,0,2,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    //    [1,0,0,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],    // 50  1
    //
    //    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],
    //    [1,0,0,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    //    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],
    //    [1,0,1,0,1,   1,0,1,0,1,   1,0,2,0,1,   0,0,   1],
    //    [1,0,1,0,1,   1,0,1,0,1,   0,0,1,0,1,   0,0,   1],    //55  1
    //
    //    [1,0,1,0,1,   1,0,1,0,1,   1,0,0,0,1,   0,0,   1],
    //    [1,0,1,0,1,   1,0,1,0,1,   2,0,1,0,1,   0,0,   1],
    //    [1,0,1,0,1,   0,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    //    [1,0,1,0,0,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    //    [1,0,1,0,1,   1,0,1,0,2,   1,0,1,0,1,   0,0,   1],     // 60  2
]

let level3Eleven: [[Int]] = [
    // Debris, barriers settitns: 1 debis(mine), 0 nothingy, 2 barrier(bonus), 4 middle barrier
    
    // Partition settings: 1 MAXleft, 2 MIDLeft 3 center, 4 MIDReight, 5 MAXRight, 6 Center 90 degres. First number 2 zPosition, second 4 zPosition
    // Partitions settings: First Low position 2z , second high position 4z
    
    // 22 bonus
    
    // low          middle        high       partition settings
    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,0,0,1,   1,0,1,0,0,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   1,0,1,0,0,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   1,0,0,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   0,0,1,0,1,   0,0,   1],    // 5  0 bonus
    
    [1,0,1,0,1,   0,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [6,0,1,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   0,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   0,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   1,0,0,0,1,   0,0,   1],    // 10  1
    
    [1,0,0,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,0,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,0,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,0,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,0,   1,0,1,0,0,   0,0,   1],     // 15  1
    
    [1,0,1,0,1,   1,0,1,0,0,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   6,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [0,0,1,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [0,0,1,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],    // 20  1
    
    [1,0,1,0,1,   0,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   1,0,0,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   1,0,1,0,0,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,0,   1,0,1,0,1,   0,0,   1],    // 25  0
    
    [1,0,1,0,0,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,6,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   0,0,1,0,1,   1,0,1,0,1,   0,0,   1],    // 30  1
    
    [1,0,1,0,1,   1,0,1,0,1,   0,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   1,0,0,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   1,0,1,0,0,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   1,0,6,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],    // 35  1
    
    [1,0,1,0,1,   1,0,1,0,0,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,0,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,6,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,0,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,0,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],    // 40  1
    
    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,6,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   0,0,0,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   1,0,0,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   6,0,1,0,1,   0,0,   1],     // 45  2
    
    [1,0,1,0,1,   1,0,1,0,1,   1,0,0,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,0,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,6,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,0,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],    // 50  1
    
    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,0,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   1,0,6,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   0,0,1,0,1,   0,0,   1],    //55  1
    
    [1,0,1,0,1,   1,0,1,0,1,   1,0,0,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   6,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   0,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,0,   1,0,1,0,1,   0,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   1,0,6,0,1,   0,0,   1],     // 60  2
]

let level3Twelve: [[Int]] = [
    // Debris, barriers settitns: 1 debis(mine), 0 nothingy, 2 barrier(bonus), 4 middle barrier
    
    // Partition settings: 1 MAXleft, 2 MIDLeft 3 center, 4 MIDReight, 5 MAXRight, 6 Center 90 degres. First number 2 zPosition, second 4 zPosition
    // Partitions settings: First Low position 2z , second high position 4z
    
    // 22 bonus
    
    // low          middle        high       partition settings
    
    [1,0,0,0,0,   1,0,1,0,0,   1,0,0,0,0,   0,0,   1],
    [0,0,1,0,0,   0,0,0,0,1,   1,0,0,0,1,   0,0,   1],
    [0,0,0,0,0,   6,0,0,0,1,   0,0,0,0,1,   0,0,   1],
    [0,0,0,0,0,   1,0,0,0,1,   0,0,0,0,1,   0,0,   1],
    [0,0,1,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],    // 20  1
    
    [1,0,0,0,1,   1,0,0,0,1,   1,0,0,0,1,   0,0,   1],
    [0,0,0,0,1,   0,0,0,0,0,   0,0,0,0,1,   0,0,   1],
    [1,0,1,0,1,   2,0,6,0,2,   1,0,1,0,0,   0,0,   1],
    [1,0,0,0,0,   1,0,0,0,1,   0,0,0,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   0,0,1,0,1,   0,0,   1],    // 5  0 bonus
    
    [1,0,0,0,0,   0,0,1,0,0,   1,0,1,0,0,   0,0,   1],
    [6,0,0,0,1,   1,0,0,0,0,   0,0,1,0,0,   0,0,   1],
    [0,0,0,0,1,   0,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,0,0,1,   1,0,61,0,2,   0,0,0,0,0,   0,0,   1],
    [1,0,1,0,1,   1,0,1,0,1,   1,0,0,0,1,   0,0,   1],    // 10  1

    [1,0,0,0,0,   0,0,1,0,0,   1,0,1,0,1,   0,0,   1],
    [1,0,0,0,1,   1,0,0,0,1,   1,0,0,0,0,   0,0,   1],
    [0,0,1,0,0,   1,0,0,0,1,   1,0,0,0,1,   0,0,   1],
    [0,0,0,0,1,   6,0,1,0,1,   1,0,1,0,0,   0,0,   1],
    [1,0,0,0,1,   1,0,0,0,0,   1,0,0,0,1,   0,0,   1],    // 25  0
    
    [1,4,1,4,1,   1,4,6,4,1,   1,4,1,4,1,   0,0,   1],
    [0,0,2,0,1,   1,0,0,0,1,   1,0,0,0,0,   0,0,   1],
    [1,0,0,0,0,   1,0,0,0,1,   0,0,1,0,0,   0,0,   1],
    [0,0,1,0,0,   1,0,0,0,1,   1,0,0,0,1,   0,0,   1],
    [1,0,1,0,0,   0,0,1,0,0,   1,0,0,0,1,   0,0,   1],    // 30  1
    
    [0,0,0,0,1,   1,0,0,0,1,   1,0,0,0,0,   0,0,   1],
    [1,0,0,0,1,   1,0,0,0,1,   0,0,2,0,1,   0,0,   1],
    [0,0,0,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,0,0,0,   1,0,1,0,1,   0,0,   1],
    [1,0,0,0,1,   1,0,0,0,1,   0,0,1,0,0,   0,0,   1],    //55  1
    
    [1,0,0,0,1,   1,0,0,0,1,   0,0,1,0,0,   0,0,   1],
    [0,0,1,0,0,   1,0,0,0,1,   1,0,0,0,1,   0,0,   1],
    [1,4,1,4,1,   1,4,6,4,1,   1,4,1,4,1,   0,0,   1],
    [1,4,1,4,1,   1,4,1,4,1,   1,4,6,4,1,   0,0,   1],
    [1,4,6,4,1,   1,4,1,4,1,   1,4,1,4,1,   0,0,   1],    // 35  1
    
    [0,0,0,0,1,   0,0,2,0,1,   1,0,0,0,0,   0,0,   1],
    [1,0,0,0,1,   0,0,1,0,0,   0,0,0,0,1,   0,0,   1],
    [0,0,1,0,0,   0,0,1,0,1,   0,0,0,0,1,   0,0,   1],
    [1,0,1,0,0,   1,0,0,0,1,   1,0,0,0,1,   0,0,   1],
    [0,0,0,0,1,   0,0,1,0,1,   1,0,1,0,0,   0,0,   1],     // 15  1
    
    [1,4,1,4,1,   1,4,1,4,1,   1,4,6,4,1,   0,0,   1],
    [1,4,1,4,1,   1,4,1,4,1,   1,4,6,4,1,   0,0,   1],
    [1,0,2,0,0,   1,0,0,0,1,   1,0,0,0,0,   0,0,   1],
    [1,0,1,0,0,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,0,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],    // 40  1
    
    [1,0,2,0,1,   1,0,0,0,1,   0,0,1,0,0,   0,0,   1],
    [1,0,0,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],
    [0,0,0,0,1,   0,0,2,0,1,   0,0,1,0,1,   0,0,   1],
    [1,0,1,0,1,   1,0,0,0,1,   1,0,0,0,1,   0,0,   1],
    [1,0,0,0,1,   0,0,1,0,1,   2,0,0,0,0,   0,0,   1],     // 45  2
    
    [0,0,0,0,1,   1,0,0,0,1,   1,0,0,0,0,   0,0,   1],
    [0,0,1,0,0,   1,0,0,0,1,   0,0,1,0,0,   0,0,   1],
    [6,0,0,0,1,   0,0,1,0,0,   1,0,0,0,1,   0,0,   1],
    [1,0,0,0,0,   1,0,0,0,1,   1,0,1,0,1,   0,0,   1],
    [1,0,0,0,1,   1,0,2,0,0,   0,0,0,0,1,   0,0,   1],    // 50  1

    [1,0,0,0,0,   1,0,1,0,1,   1,0,1,0,1,   0,0,   1],
    [0,0,1,0,0,   1,0,0,0,1,   2,0,0,0,1,   0,0,   1],
    [0,0,0,0,1,   0,0,0,0,1,   0,0,1,0,0,   0,0,   1],
    [1,0,1,0,0,   1,0,0,0,0,   1,0,0,0,1,   0,0,   1],
    [1,0,0,0,1,   1,0,0,0,2,   1,0,0,0,1,   0,0,   1],     // 60  2
]


let constructionTimeIntervalArray: [[Double]] = [
    /*1*/[1.2,1.2,1.2,1.2,1.2,   1.3,1.3,1.3,1.3,1.3,   1.3,1.3,1.3,1.3,1.3,   1.3,1.3,1.3,1.3,1.3,   1.3,1.3,1.3,1.3,1.3,   1.3,1.3,1.8,1.8,1.8,   1.8,1.3,1.3,1.3,1.3,   1.3,1.3,1.3,1.3,1.8,   1.8,1.8,1.8,1.8,1,   1.3,1.3,1.3],   //50
    /*2*/[1.3,1.3,1.3,1.3,1.3,   1.3,1.3,1.3,1.3,4,   1.3,1.3,1.3,1.3,1.3,   1.3,1.3,1.3,1.3,1.3,   1.3,1.3,1.3,1.3,1.3,   1.5,1.5,1.5,1.5,1.8,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.7,1.7,1.5,1.7,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5],
         /*3*/[1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5],   //60
    /*4*/[1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.9,1.9,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5],
         /*5*/[2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2],   //15
    /*6*/[2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2],
         /*7*/[2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,3,3],   //15
    /*8*/[2,2,2.5,2.5,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2],
         /*9*/[2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2],   //15
    /*10*/[2,2,2,2,2,   4,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2],
          /*11*/[2.3,2.3,2.3,2.3,2.3,   2.3,2.3,2.3,2.3,2.3,   2.3,2.3,2.3,2.3,2.3,   2.3,2.3,2.3,2.3,2.3,   2.3,2.3,2.3,2.3,2.3,   2.3,2.3,2.3,2.3,2.3,   2.3,2.3,2.3,2.3,2.3],   //15
    /*12*/[2,2,2,2,2,   6,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2]
]

let constructionTimeIntervalArray2: [[Double]] = [
    /*1*/[2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,],   //60
    /*2*/[2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2],
         /*3*/[1.1,1.1,1.1,1.1,1.1,   1.1,1.1,1.1,1.1,1.1,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.1,1.1,1.1,1.1,1.1,   1.5,1.5,1.5,1.5,1.5,   1.1,1.1,1.1,1.1,1.1,   1.3,1.3,1.3,1.3,1.3,   1.1,1.1,1.1,1.1,1.1,   1.2,1.2,1.2,1.2,1.2,   1.1,1.1,1.1,1.1,1.1,   1.5,1.5,1.5,1.5,1.5],   //60
    /*4*/[0.7,0.7,0.7,0.7,0.7,   0.7,0.7,0.7,0.7,0.7,   0.6,0.6,0.6,0.6,0.6,   0.7,0.7,0.7,0.7,0.7,   1.0,1.0,1.0,1.0,1.0,   0.7,0.7,0.7,0.7,0.7,   0.6,0.6,0.6,0.6,0.6,   0.7,0.7,0.7,0.7,0.7,   1.0,1.0,1.0,1.0,1.0,   0.6,0.6,0.6,0.6,0.6,   0.7,0.7,0.7,0.7,0.7,   1.0,1.0,1.0,1.0,1.0],
         /*5*/[1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.8,1.8,1.8,1.8,1.8,   1.8,1.8,1.8,1.8,1.8],   //15
    /*6*/[4,4,4,4,4,   4,4,4,4,4,   4,4,4,4,4,   4,4,4,4,4,   4,4,4,4,4],
         /*7*/[2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,5,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,3,3],   //15
    /*8*/[0.9,0.9,0.9,0.9,0.9,   0.9,0.9,0.9,0.9,0.9,   0.9,0.9,0.9,0.9,0.9,   1.1,1.1,1.1,1.1,1.1,   1.1,1.1,1.1,1.1,1.1,   1.2,1.2,1.2,1.2,1.2,   1.2,1.2,1.2,1.2,1.2,   1.2,1.2,1.2,1.2,1.2,   1.2,1.2,1.2,1.2,1.2],
         /*9*/[0.6,0.6,0.6,0.6,0.6,   0.7,0.7,0.7,0.7,0.7,   0.7,0.7,0.7,0.7,0.7,   0.7,0.7,0.7,0.7,0.7,   0.7,0.7,0.7,0.7,0.7,   0.7,0.7,0.7,0.7,0.7,   0.7,0.7,0.7,0.7,0.7],   //15
    /*10*/[2,2,2,2,2,   2,2,5,2,2,   2,2,5,2,2,   2,2,5,2,2,   2,2,5,2,2,   2,2,5,2,2,   2,2,5,2,2],
          /*11*/[0.7,0.7,0.7,0.7,0.7,   0.7,0.7,0.7,0.7,0.7,   1.4,1,1,1,1.3,   1,1,1,1,1,   1,1,1,1,1,   1,1,1,1,1,   1,1,1,1,1,   1,1,1,1,1,   1,1,1,1,1,   1,1,1,1,1,   1,1,1,1,1,   1,1,1,1,1],   //15
    /*12*/[1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5]
]

let constructionTimeIntervalArray3: [[Double]] = [
    /*1*/[2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,],   //60
    /*2*/[1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5],
         /*3*/[1.1,1.1,1.1,1.1,1.1,   1.1,1.1,1.1,1.1,1.1,   1.1,1.1,1.1,1.1,1.1,   1.1,1.1,1.1,1.1,1.1,   1.1,1.1,1.1,1.1,1.1,   1.1,1.1,1.1,1.1,1.1,   1.1,1.1,1.1,1.1,1.1,   1.1,1.1,1.1,1.1,1.1,   1.1,1.1,1.1,1.1,1.1,   1.1,1.1,1.1,1.1,1.1,   1.1,1.1,1.1,1.1,1.1,   1.1,1.1,1.1,1.1,1.1],   //60
    /*4*/[0.5,0.5,0.5,0.5,0.5,   0.6,0.6,0.6,0.6,0.6,   0.6,0.6,0.6,0.6,0.6,   0.6,0.6,0.6,0.6,0.6,   0.7,0.7,0.7,0.7,0.7,   0.7,0.7,0.7,0.7,0.7,   0.7,0.7,0.7,0.7,0.7,   0.6,0.6,0.6,0.6,0.6,   0.9,0.9,0.9,0.9,0.9,   0.7,0.7,0.7,0.7,0.7,   0.6,0.6,0.6,0.6,0.6,   0.7,0.7,0.7,0.7,0.7],
         /*5*/[1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5],   //15
    /*6*/[0.3,0.8,0.9,0.6,0.9,   0.8,0.8,0.8,0.9,1.2,   1.5,0.7,0.6,1.3,0.9,   0.4,0.6,0.8,0.9,1.4,   1.5,0.9,0.4,1.3,0.9],
         /*7*/[2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,5,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,3,3],   //15
    /*8*/[1.1,1.1,1.1,1.1,1.1,   1.1,1.1,1.1,1.1,1.1,   1.1,1.1,1.1,1.1,1.1,   1.1,1.1,1.1,1.1,1.1,   1.1,1.1,1.1,1.1,1.1,   1.2,1.2,1.2,1.2,1.2,   1.2,1.2,1.2,1.2,1.2,   1.2,1.2,1.2,1.2,1.2,   1.2,1.2,1.2,1.2,1.2],
         /*9*/[0.6,0.6,0.6,0.6,0.6,   0.7,0.7,0.7,0.7,0.7,   0.7,0.7,0.7,0.7,0.7,   0.7,0.7,0.7,0.7,0.7,   0.7,0.7,0.7,0.7,0.7,   0.7,0.7,0.7,0.7,0.7,   0.7,0.7,0.7,0.7,0.7],   //15
    /*10*/[2,2,2,2,2,   2,2,5,2,2,   2,2,5,2,2,   2,2,5,2,2,   2,2,5,2,2,   2,2,5,2,2,   2,2,5,2,2],
          /*11*/[1,1,1,1,1,   1,1,1,1,1,   1.4,1,1,1,1.3,   1,1,1,1,1,   1,1,1,1,1,   1,1,1,1,1,   1,1,1,1,1,   1,1,1,1,1,   1,1,1,1,1,   1,1,1,1,1,   1,1,1,1,1,   1,1,1,1,1],   //15
    /*12*/[1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,]
]


func nextLevelFunc() {
    if planet == 1 {
        gameMode = GameMode.normal
        if level == 0 {
            //level = 0  // 1
            canMoveUpAndDown = false
            hintLevel = true
            onlyTopLevel = false
            puzzleIsColors = false
            constructionLevelDurationTimerInterval = 48
            debrisSpeed = .slow
            partitionSpeedHigh = .middleHigh
            partitionSpeedLow = .middleLow
            shipSpeedMovement = .slow
            
            if activeLevel[9] == 1 {
                showTrioSP = true
            } else {
                showTrioSP = false
            }
            
            if activeLevel[11] == 1 {
                showRougeSP = true
            } else {
                showRougeSP = false
            }
            
            if active2Level[1] == 1 {
                showInvisibleSP = true
            } else {
                showInvisibleSP = false
            }
            
            scoreOneStar = 10
            scoreTwoStar = 15
            scoreThreeStars = 22
            
            
            
            //presentScene(sceneName: "Game scene")
            
        } else if level == 1 {
            if activeLevel[1] == 1 {
                //level = 1 // 2
                canMoveUpAndDown = false
                hintLevel = true
                onlyTopLevel = false
                puzzle = true
                if !visualyImpairedStatus {
                    puzzleIsColors = true
                } else {
                    puzzleIsColors = false
                }
                constructionLevelDurationTimerInterval = 60
                debrisSpeed = .slow
                partitionSpeedHigh = .middleHigh
                partitionSpeedLow = .middleLow
                shipSpeedMovement = .slow
                
                if activeLevel[9] == 1 {
                    showTrioSP = true
                } else {
                    showTrioSP = false
                }
                
                if activeLevel[11] == 1 {
                    showRougeSP = true
                } else {
                    showRougeSP = false
                }
                
                if active2Level[1] == 1 {
                    showInvisibleSP = true
                } else {
                    showInvisibleSP = false
                }
                
                
                scoreOneStar = 12
                scoreTwoStar = 18
                scoreThreeStars = 25

                
                //presentScene(sceneName: "Game scene")
                
                //print("level2")
            }
        } else if level == 2 {
            if activeLevel[2] == 1 {
                
                //level = 2 //3
                canMoveUpAndDown = true
                hintLevel = true
                onlyTopLevel = true
                puzzle = false
                constructionLevelDurationTimerInterval = 60
                debrisSpeed = .slow
                partitionSpeedHigh = .middleHigh
                partitionSpeedLow = .middleLow
                shipSpeedMovement = .slow
                
                if activeLevel[9] == 1 {
                    showTrioSP = true
                } else {
                    showTrioSP = false
                }
                
                if activeLevel[11] == 1 {
                    showRougeSP = true
                } else {
                    showRougeSP = false
                }
                
                if active2Level[1] == 1 {
                    showInvisibleSP = true
                } else {
                    showInvisibleSP = false
                }
                
                
                scoreOneStar = 10
                scoreTwoStar = 26
                scoreThreeStars = 29
                
                //presentScene(sceneName: "Game scene")
                //print("level3")
            }
        } else if level == 3 {
            if activeLevel[3] == 1 {
                //level = 3 //4
                
                canMoveUpAndDown = true
                hintLevel = false
                onlyTopLevel = true
                puzzle = true
                if !visualyImpairedStatus {
                    puzzleIsColors = true
                } else {
                    puzzleIsColors = false
                }
                constructionLevelDurationTimerInterval = 60
                debrisSpeed = .slow
                partitionSpeedHigh = .middleHigh
                partitionSpeedLow = .middleLow
                shipSpeedMovement = .slow
                
                if activeLevel[9] == 1 {
                    showTrioSP = true
                } else {
                    showTrioSP = false
                }
                
                if activeLevel[11] == 1 {
                    showRougeSP = true
                } else {
                    showRougeSP = false
                }
                
                if active2Level[1] == 1 {
                    showInvisibleSP = true
                } else {
                    showInvisibleSP = false
                }
                
                
                scoreOneStar = 14
                scoreTwoStar = 29
                scoreThreeStars = 35
                
                //presentScene(sceneName: "Game scene")
                //print("level4")
            }
        } else if level == 4 {
            if activeLevel[4] == 1 {
                //level = 4 //5
                
                canMoveUpAndDown = true
                hintLevel = true
                onlyTopLevel = false
                puzzle = false
                constructionLevelDurationTimerInterval = 60
                debrisSpeed = .slow
                partitionSpeedHigh = .middleHigh
                partitionSpeedLow = .middleLow
                shipSpeedMovement = .slow
                
                if activeLevel[9] == 1 {
                    showTrioSP = true
                } else {
                    showTrioSP = false
                }
                
                if activeLevel[11] == 1 {
                    showRougeSP = true
                } else {
                    showRougeSP = false
                }
                
                if active2Level[1] == 1 {
                    showInvisibleSP = true
                } else {
                    showInvisibleSP = false
                }
                
                
                scoreOneStar = 10
                scoreTwoStar = 29
                scoreThreeStars = 34
                
                //presentScene(sceneName: "Game scene")
                //print("level5")
            }
        } else if level == 5 {
            if activeLevel[5] == 1 {
                //level = 5 //6
                
                canMoveUpAndDown = true
                hintLevel = false
                onlyTopLevel = false
                puzzle = false
                constructionLevelDurationTimerInterval = 60
                debrisSpeed = .slow
                partitionSpeedHigh = .middleHigh
                partitionSpeedLow = .middleLow
                shipSpeedMovement = .slow
                
                if activeLevel[9] == 1 {
                    showTrioSP = true
                } else {
                    showTrioSP = false
                }
                
                if activeLevel[11] == 1 {
                    showRougeSP = true
                } else {
                    showRougeSP = false
                }
                
                if active2Level[1] == 1 {
                    showInvisibleSP = true
                } else {
                    showInvisibleSP = false
                }
                
                
                scoreOneStar = 10
                scoreTwoStar = 30
                scoreThreeStars = 35
                
                //presentScene(sceneName: "Game scene")
                //print("level6")
            }
        } else if level == 6 {
            if activeLevel[6] == 1 {
                //level = 6 //7
                
                canMoveUpAndDown = true
                hintLevel = false
                onlyTopLevel = false
                puzzle = false
                constructionLevelDurationTimerInterval = 60
                debrisSpeed = .slow
                partitionSpeedHigh = .middleHigh
                partitionSpeedLow = .middleLow
                shipSpeedMovement = .slow
                
                if activeLevel[9] == 1 {
                    showTrioSP = true
                } else {
                    showTrioSP = false
                }
                
                if activeLevel[11] == 1 {
                    showRougeSP = true
                } else {
                    showRougeSP = false
                }
                
                if active2Level[1] == 1 {
                    showInvisibleSP = true
                } else {
                    showInvisibleSP = false
                }
                
                
                scoreOneStar = 4
                scoreTwoStar = 10
                scoreThreeStars = 12
                
                //presentScene(sceneName: "Game scene")
                //print("level7")
            }
        } else if level == 7 {
            if activeLevel[7] == 1 {
                //level = 7 //8
                
                canMoveUpAndDown = true
                hintLevel = true
                onlyTopLevel = false
                puzzle = false
                constructionLevelDurationTimerInterval = 35
                debrisSpeed = .slow
                partitionSpeedHigh = .slowHigh
                partitionSpeedLow = .slowLow
                shipSpeedMovement = .slow
                
                if activeLevel[9] == 1 {
                    showTrioSP = true
                } else {
                    showTrioSP = false
                }
                
                if activeLevel[11] == 1 {
                    showRougeSP = true
                } else {
                    showRougeSP = false
                }
                
                if active2Level[1] == 1 {
                    showInvisibleSP = true
                } else {
                    showInvisibleSP = false
                }
                
                
                scoreOneStar = 8
                scoreTwoStar = 12
                scoreThreeStars = 16
                
                //presentScene(sceneName: "Game scene")
                //print("level8")
            }
        } else if level == 8 {
            if activeLevel[8] == 1 {
                //level = 8 //9
                
                canMoveUpAndDown = true
                hintLevel = true
                onlyTopLevel = false
                puzzle = false
                constructionLevelDurationTimerInterval = 35
                debrisSpeed = .slow
                partitionSpeedHigh = .slowHigh
                partitionSpeedLow = .slowLow
                shipSpeedMovement = .slow
                
                showTrioSP = true
                showRougeSP = false
                showInvisibleSP = false
                
                scoreOneStar = 9
                scoreTwoStar = 27
                scoreThreeStars = 36
               
                //presentScene(sceneName: "Game scene")
                //print("level9")
            }
        } else if level == 9 {
            if activeLevel[9] == 1 {
                //level = 9 //10
                
                canMoveUpAndDown = true
                hintLevel = false
                onlyTopLevel = false
                puzzle = true
                if !visualyImpairedStatus {
                    puzzleIsColors = true
                } else {
                    puzzleIsColors = false
                }
                constructionLevelDurationTimerInterval = 35
                debrisSpeed = .slow
                partitionSpeedHigh = .slowHigh
                partitionSpeedLow = .slowLow
                shipSpeedMovement = .slow
                
                
                showTrioSP = true
                showRougeSP = false
                showInvisibleSP = false
                
                scoreOneStar = 10
                scoreTwoStar = 15
                scoreThreeStars = 20
                
                //presentScene(sceneName: "Game scene")
                //print("level10")
            }
        } else if level == 10 {
            if activeLevel[10] == 1 {
                //level = 10 //11
                
                canMoveUpAndDown = true
                hintLevel = true
                onlyTopLevel = false
                puzzle = false
                constructionLevelDurationTimerInterval = 35
                debrisSpeed = .slow
                partitionSpeedHigh = .slowHigh
                partitionSpeedLow = .slowLow
                shipSpeedMovement = .slow
                
                
                showTrioSP = false
                showRougeSP = true
                showInvisibleSP = false
                
                scoreOneStar = 10
                scoreTwoStar = 14
                scoreThreeStars = 18
                
                /*
                canMoveUpAndDown = true
                hintLevel = true
                onlyTopLevel = false
                puzzle = false
                constructionLevelDurationTimerInterval = 34
                debrisSpeed = .slow
                partitionSpeedHigh = .slowHigh
                partitionSpeedLow = .slowLow
                shipSpeedMovement = .slow
                
                showTrioSP = false
                showRougeSP = false
                showInvisibleSP = true
                
                scoreOneStar = 10
                scoreTwoStar = 12
                scoreThreeStars = 14
                */
                //presentScene(sceneName: "Game scene")
                //print("level11")
            }
        } else if level == 11 {
            if activeLevel[11] == 1 {
                //level = 11 //12
                
                canMoveUpAndDown = true
                hintLevel = false
                onlyTopLevel = false
                puzzle = true
                if !visualyImpairedStatus {
                    puzzleIsColors = true
                } else {
                    puzzleIsColors = false
                }
                constructionLevelDurationTimerInterval = 35
                debrisSpeed = .slow
                partitionSpeedHigh = .slowHigh
                partitionSpeedLow = .slowLow
                shipSpeedMovement = .slow
                
                showTrioSP = false
                showRougeSP = true
                showInvisibleSP = false
                
                scoreOneStar = 10
                scoreTwoStar = 14
                scoreThreeStars = 17
                
                //presentScene(sceneName: "Game scene")
                //print("level12")
            }
        }
        
        
        
        
        // Second PLanet --------------------  --------------------------------------------------------sdfsdfsafdf
        
        
        
    } else if planet == 2 {
        gameMode = GameMode.normal
        if level == 0 {
            if active2Level[0] == 1 {
                //level = 1 
                
                canMoveUpAndDown = true
                hintLevel = true
                onlyTopLevel = false
                puzzle = false
                constructionLevelDurationTimerInterval = 35
                debrisSpeed = .slow
                partitionSpeedHigh = .slowHigh
                partitionSpeedLow = .slowLow
                shipSpeedMovement = .slow
                
                showTrioSP = false
                showRougeSP = false
                showInvisibleSP = true
                
                scoreOneStar = 8
                scoreTwoStar = 12
                scoreThreeStars = 14
                
                //presentScene(sceneName: "Game scene")
                //print("level11")
                //print("level1 PLANET 2")
            }
        }  else if level == 1 {
            if active2Level[1] == 1 {
                //level = 11 //12
                
                canMoveUpAndDown = true
                hintLevel = false
                onlyTopLevel = false
                puzzle = false
                constructionLevelDurationTimerInterval = 35
                debrisSpeed = .slow
                partitionSpeedHigh = .slowHigh
                partitionSpeedLow = .slowLow
                shipSpeedMovement = .slow
                
                showTrioSP = true
                showRougeSP = true
                showInvisibleSP = true
                
                scoreOneStar = 9
                scoreTwoStar = 15
                scoreThreeStars = 19
                
                //presentScene(sceneName: "Game scene")
                //print("level12")
            }
        }  else if level == 2 {
            if active2Level[2] == 1 {
                //level = 11 //12
                
                canMoveUpAndDown = true
                hintLevel = false
                onlyTopLevel = false
                puzzle = false
                constructionLevelDurationTimerInterval = 60
                debrisSpeed = .middle
                partitionSpeedHigh = .slowHigh
                partitionSpeedLow = .slowLow
                shipSpeedMovement = .slow
                
                showTrioSP = true
                showRougeSP = true
                showInvisibleSP = true
                
                scoreOneStar = 8
                scoreTwoStar = 10
                scoreThreeStars = 12
                
                //presentScene(sceneName: "Game scene")
                //print("level12")
            }
        }  else if level == 3 {
            if active2Level[3] == 1 {
                //level = 11 //12
                
                canMoveUpAndDown = true
                hintLevel = false
                onlyTopLevel = false
                puzzle = false
                constructionLevelDurationTimerInterval = 60
                debrisSpeed = .middle
                partitionSpeedHigh = .slowHigh
                partitionSpeedLow = .slowLow
                shipSpeedMovement = .slow
                
                showTrioSP = true
                showRougeSP = true
                showInvisibleSP = true
                
                scoreOneStar = 40
                scoreTwoStar = 50
                scoreThreeStars = 60
                
                //presentScene(sceneName: "Game scene")
                //print("level12")
            }
        }  else if level == 4 {
            if active2Level[4] == 1 {
                //level = 11 //12
                
                canMoveUpAndDown = true
                hintLevel = false
                onlyTopLevel = false
                puzzle = false
                constructionLevelDurationTimerInterval = 60
                debrisSpeed = .middle
                partitionSpeedHigh = .slowHigh
                partitionSpeedLow = .slowLow
                shipSpeedMovement = .slow
                
                showTrioSP = true
                showRougeSP = true
                showInvisibleSP = true
                
                scoreOneStar = 15
                scoreTwoStar = 23
                scoreThreeStars = 30
                
                //presentScene(sceneName: "Game scene")
                //print("level12")
            }
        }  else if level == 5 {
            if active2Level[5] == 1 {
                //level = 11 //12
                
                canMoveUpAndDown = true
                hintLevel = false
                onlyTopLevel = false
                puzzle = false
                constructionLevelDurationTimerInterval = 25
                debrisSpeed = .middle
                partitionSpeedHigh = .slowHigh
                partitionSpeedLow = .slowLow
                shipSpeedMovement = .slow
                
                showTrioSP = true
                showRougeSP = true
                showInvisibleSP = true
                
                scoreOneStar = 25
                scoreTwoStar = 35
                scoreThreeStars = 42
                
                //presentScene(sceneName: "Game scene")
                //print("level12")
            }
        }  else if level == 6 {
            if active2Level[6] == 1 {
                //level = 11 //12
                
                canMoveUpAndDown = true
                hintLevel = false
                onlyTopLevel = false
                puzzle = true
                if !visualyImpairedStatus {
                    puzzleIsColors = true
                } else {
                    puzzleIsColors = false
                }
                constructionLevelDurationTimerInterval = 60
                debrisSpeed = .middle
                partitionSpeedHigh = .slowHigh
                partitionSpeedLow = .slowLow
                shipSpeedMovement = .slow
                
                showTrioSP = true
                showRougeSP = true
                showInvisibleSP = true
                
                scoreOneStar = 15
                scoreTwoStar = 20
                scoreThreeStars = 29
               
                //presentScene(sceneName: "Game scene")
                //print("level12")
            }
        }  else if level == 7 {
            if active2Level[7] == 1 {
                //level = 11 //12
                
                canMoveUpAndDown = true
                hintLevel = false
                onlyTopLevel = false
                puzzle = false
                constructionLevelDurationTimerInterval = 35
                debrisSpeed = .middle
                partitionSpeedHigh = .slowHigh
                partitionSpeedLow = .slowLow
                shipSpeedMovement = .normal
                
                showTrioSP = true
                showRougeSP = true
                showInvisibleSP = true
                
                scoreOneStar = 4
                scoreTwoStar = 6
                scoreThreeStars = 8
                
                //presentScene(sceneName: "Game scene")
                //print("level12")
            }
        }  else if level == 8 {
            if active2Level[8] == 1 {
                //level = 11 //12
                
                canMoveUpAndDown = true
                hintLevel = false
                onlyTopLevel = false
                puzzle = false
                constructionLevelDurationTimerInterval = 35
                debrisSpeed = .middle
                partitionSpeedHigh = .slowHigh
                partitionSpeedLow = .slowLow
                shipSpeedMovement = .normal
                
                showTrioSP = true
                showRougeSP = true
                showInvisibleSP = true
                
                scoreOneStar = 17
                scoreTwoStar = 25
                scoreThreeStars = 31
                
                //presentScene(sceneName: "Game scene")
                //print("level12")
            }
        }  else if level == 9 {
            if active2Level[9] == 1 {
                //level = 11 //12
                
                canMoveUpAndDown = true
                hintLevel = false
                onlyTopLevel = false
                puzzle = true
                puzzleIsColors = false
                constructionLevelDurationTimerInterval = 35
                debrisSpeed = .slow
                partitionSpeedHigh = .slowHigh
                partitionSpeedLow = .slowLow
                shipSpeedMovement = .slow
                
                showTrioSP = true
                showRougeSP = true
                showInvisibleSP = true
                
                scoreOneStar = 5
                scoreTwoStar = 8
                scoreThreeStars = 11
                
                //presentScene(sceneName: "Game scene")
                //print("level12")
            }
        }  else if level == 10 {
            if active2Level[10] == 1 {
                //level = 11 //12
                
                canMoveUpAndDown = true
                hintLevel = false
                onlyTopLevel = false
                puzzle = false
                puzzleIsColors = false
                constructionLevelDurationTimerInterval = 60
                debrisSpeed = .fast
                partitionSpeedHigh = .slowHigh
                partitionSpeedLow = .slowLow
                shipSpeedMovement = .normal
                
                showTrioSP = true
                showRougeSP = true
                showInvisibleSP = true
                
                scoreOneStar = 7
                scoreTwoStar = 10
                scoreThreeStars = 11
                
                //presentScene(sceneName: "Game scene")
               // print("level12")
            }
        }  else if level == 11 {
            if active2Level[11] == 1 {
                //level = 11 //12
                
                canMoveUpAndDown = true
                hintLevel = false
                onlyTopLevel = false
                puzzle = false
                puzzleIsColors = false
                constructionLevelDurationTimerInterval = 60
                debrisSpeed = .fast
                partitionSpeedHigh = .slowHigh
                partitionSpeedLow = .slowLow
                shipSpeedMovement = .normal
                
                showTrioSP = true
                showRougeSP = true
                showInvisibleSP = true
                
                scoreOneStar = 10
                scoreTwoStar = 14
                scoreThreeStars = 22
                
                //presentScene(sceneName: "Game scene")
                //print("level12")
            }
        }
        
        
             // Third PLanet --------------------  --------------------------------------------------------sdfsdfsafdf
        
        
    } else if planet == 3 {
        gameMode = GameMode.normal
        if level == 0 {
            if active3Level[0] == 1 {
                //level = 1
                
                canMoveUpAndDown = true
                hintLevel = false
                onlyTopLevel = false
                puzzle = false
                levelWithChargedMine = true
                constructionLevelDurationTimerInterval = 35
                debrisSpeed = .slow
                partitionSpeedHigh = .slowHigh
                partitionSpeedLow = .slowLow
                shipSpeedMovement = .slow
                
                showTrioSP = true
                showRougeSP = true
                showInvisibleSP = true
                
                scoreOneStar = 7
                scoreTwoStar = 16
                scoreThreeStars = 18
                
            }
        }  else if level == 1 {
            if active3Level[1] == 1 {
                //level = 11 //12
                
                canMoveUpAndDown = true
                hintLevel = false
                onlyTopLevel = false
                puzzle = false
                levelWithChargedMine = true
                constructionLevelDurationTimerInterval = 35
                debrisSpeed = .slow
                partitionSpeedHigh = .slowHigh
                partitionSpeedLow = .slowLow
                shipSpeedMovement = .slow
                
                showTrioSP = true
                showRougeSP = true
                showInvisibleSP = true
                
                scoreOneStar = 10
                scoreTwoStar = 13
                scoreThreeStars = 18
                
            }
        }  else if level == 2 {
            if active3Level[2] == 1 {
                //level = 11 //12
                
                canMoveUpAndDown = true
                hintLevel = false
                onlyTopLevel = false
                puzzle = false
                levelWithChargedMine = false
                constructionLevelDurationTimerInterval = 60
                debrisSpeed = .fast
                partitionSpeedHigh = .slowHigh
                partitionSpeedLow = .slowLow
                shipSpeedMovement = .fast
                
                showTrioSP = true
                showRougeSP = true
                showInvisibleSP = true
                
                scoreOneStar = 15
                scoreTwoStar = 25
                scoreThreeStars = 34
                
            }
        }  else if level == 3 {
            if active3Level[3] == 1 {
                //level = 11 //12
                
                canMoveUpAndDown = true
                hintLevel = false
                onlyTopLevel = false
                puzzle = false
                levelWithChargedMine = true
                constructionLevelDurationTimerInterval = 60
                debrisSpeed = .fast
                partitionSpeedHigh = .slowHigh
                partitionSpeedLow = .slowLow
                shipSpeedMovement = .fast
                
                showTrioSP = true
                showRougeSP = true
                showInvisibleSP = true
                
                scoreOneStar = 25
                scoreTwoStar = 35
                scoreThreeStars = 45
                
                //presentScene(sceneName: "Game scene")
                //print("level12")
                
            }
        }  else if level == 4 {
            if active3Level[4] == 1 {
                //level = 11 //12
                
                canMoveUpAndDown = true
                hintLevel = false
                onlyTopLevel = false
                puzzle = false
                levelWithChargedMine = false
                constructionLevelDurationTimerInterval = 60
                debrisSpeed = .fast
                partitionSpeedHigh = .slowHigh
                partitionSpeedLow = .slowLow
                shipSpeedMovement = .fast
                
                showTrioSP = true
                showRougeSP = true
                showInvisibleSP = true
                
                scoreOneStar = 15
                scoreTwoStar = 25
                scoreThreeStars = 31
                
                //presentScene(sceneName: "Game scene")
                //print("level12")
                
                
            }
        }  else if level == 5 {
            if active3Level[5] == 1 {
                //level = 11 //12
                
                canMoveUpAndDown = true
                hintLevel = false
                onlyTopLevel = false
                puzzle = false
                levelWithChargedMine = false
                constructionLevelDurationTimerInterval = 25
                debrisSpeed = .fast
                partitionSpeedHigh = .slowHigh
                partitionSpeedLow = .slowLow
                shipSpeedMovement = .fast
                
                showTrioSP = true
                showRougeSP = true
                showInvisibleSP = true
                
                scoreOneStar = 5
                scoreTwoStar = 8
                scoreThreeStars = 11
                
                //presentScene(sceneName: "Game scene")
                //print("level12")
                
            }
        }  else if level == 6 {
            if active3Level[6] == 1 {
                //level = 11 //12
                
                canMoveUpAndDown = true
                hintLevel = false
                onlyTopLevel = false
                puzzle = false
                levelWithChargedMine = true
                constructionLevelDurationTimerInterval = 35
                debrisSpeed = .middle
                partitionSpeedHigh = .slowHigh
                partitionSpeedLow = .slowLow
                shipSpeedMovement = .normal
                
                showTrioSP = true
                showRougeSP = true
                showInvisibleSP = true
                
                scoreOneStar = 8
                scoreTwoStar = 14
                scoreThreeStars = 18
                
                //presentScene(sceneName: "Game scene")
                //print("level12")
                
                
            }
        }  else if level == 7 {
            if active3Level[7] == 1 {
                //level = 11 //12
                
                canMoveUpAndDown = true
                hintLevel = false
                onlyTopLevel = false
                puzzle = false
                levelWithChargedMine = false
                constructionLevelDurationTimerInterval = 35
                debrisSpeed = .fast
                partitionSpeedHigh = .slowHigh
                partitionSpeedLow = .slowLow
                shipSpeedMovement = .normal
                
                showTrioSP = true
                showRougeSP = true
                showInvisibleSP = true
                
                scoreOneStar = 50
                scoreTwoStar = 75
                scoreThreeStars = 101
                
                //presentScene(sceneName: "Game scene")
                //print("level12")
                
            }
        }  else if level == 8 {
            if active3Level[8] == 1 {
                //level = 11 //12
                
                canMoveUpAndDown = true
                hintLevel = false
                onlyTopLevel = false
                puzzle = false
                levelWithChargedMine = false
                constructionLevelDurationTimerInterval = 35
                debrisSpeed = .fast
                partitionSpeedHigh = .slowHigh
                partitionSpeedLow = .slowLow
                shipSpeedMovement = .normal
                
                showTrioSP = true
                showRougeSP = true
                showInvisibleSP = true
                
                scoreOneStar = 16
                scoreTwoStar = 28
                scoreThreeStars = 34
                
                //presentScene(sceneName: "Game scene")
                //print("level12")
                
            }
        }  else if level == 9 {
            if active3Level[9] == 1 {
                //level = 11 //12
                
                canMoveUpAndDown = true
                hintLevel = false
                onlyTopLevel = false
                puzzle = true
                if !visualyImpairedStatus {
                    puzzleIsColors = true
                } else {
                    puzzleIsColors = false
                }
                levelWithChargedMine = true
                constructionLevelDurationTimerInterval = 35
                debrisSpeed = .fast
                partitionSpeedHigh = .slowHigh
                partitionSpeedLow = .slowLow
                shipSpeedMovement = .normal
                
                showTrioSP = true
                showRougeSP = true
                showInvisibleSP = true
                
                scoreOneStar = 3
                scoreTwoStar = 5
                scoreThreeStars = 8
                
                //presentScene(sceneName: "Game scene")
                //print("level12")
                
            }
        }  else if level == 10 {
            if active3Level[10] == 1 {
                //level = 11 //12
                
                canMoveUpAndDown = true
                hintLevel = false
                onlyTopLevel = false
                puzzle = false
                puzzleIsColors = false
                levelWithChargedMine = true
                constructionLevelDurationTimerInterval = 60
                debrisSpeed = .fast
                partitionSpeedHigh = .slowHigh
                partitionSpeedLow = .slowLow
                shipSpeedMovement = .normal
                
                showTrioSP = true
                showRougeSP = true
                showInvisibleSP = true
                
                scoreOneStar = 5
                scoreTwoStar = 9
                scoreThreeStars = 11
                
                //presentScene(sceneName: "Game scene")
                //print("level12")
                
               
            }
        }  else if level == 11 {
            if active3Level[11] == 1 {
                //level = 11 //12
                
                canMoveUpAndDown = true
                hintLevel = false
                onlyTopLevel = false
                puzzle = false
                puzzleIsColors = false
                levelWithChargedMine = true
                constructionLevelDurationTimerInterval = 60
                debrisSpeed = .fast
                partitionSpeedHigh = .slowHigh
                partitionSpeedLow = .slowLow
                shipSpeedMovement = .fast
                
                showTrioSP = true
                showRougeSP = true
                showInvisibleSP = true
                
                scoreOneStar = 12
                scoreTwoStar = 18
                scoreThreeStars = 24
                
                //presentScene(sceneName: "Game scene")
                //print("level12")
                
            }
        }
    }  else if planet == 5 {
        gameMode = GameMode.survival
        if level == 51 {
            
            
            canMoveUpAndDown = true
            hintLevel = false
            onlyTopLevel = false
            puzzle = false
            levelWithChargedMine = false
            constructionLevelDurationTimerInterval = 1000
            debrisSpeed = .middle
            partitionSpeedHigh = .slowHigh
            partitionSpeedLow = .slowLow
            shipSpeedMovement = .slow
            
            showTrioSP = true
            showRougeSP = true
            showInvisibleSP = true
            
            scoreOneStar = 7
            scoreTwoStar = 16
            scoreThreeStars = 19
            
        }
    }
    
}

/*
let levelThree: [[Int]] = [
    [1,0,0,0,0,0,   1],
    [1,1,0,0,0,0,   1],
    [1,1,1,0,0,0,   1],
    [1,1,1,1,1,1]
]

let levelFour: [[Int]] = [
    [1,1,1,1,1,1],
    [1,1,1,1,1,1],
    [1,1,1,1,1,1],
    [1,1,1,1,1,1],
    [1,1,1,1,1,1],
    [1,1,1,1,1,1],
    [1,1,1,1,1,1],
    [1,1,1,1,1,1]
]
*/
//let middleBarrierLevel: [[]]
































