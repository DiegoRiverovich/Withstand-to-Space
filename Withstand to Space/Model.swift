//
//  Model.swift
//  Withstand to Space
//
//  Created by Андрей Бабий on 12.10.17.
//  Copyright © 2017 Андрей Бабий. All rights reserved.
//

import Foundation
import SpriteKit

var planet = 0

var activeLevel = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]   // Can play level on not  1 - can ,  0 - can't
var active2Level = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]  // Can play level on not  1 - can ,  0 - can't

var puzzle = false   // Puzzle on this level or not

enum gameDots: Int {
    case red = 0
    case yellow = 1
    case blue = 2
}

var firstDot = false
var secondDot = false
var thirdDot = false

var lvlsPage = 1

var musicIsPlaying: Bool = false
var soundsIsOn: Bool = false

// +++++++++ LevelsScene

let levelStars: [[Int]] = [
    [10,15,22],
    [10,20,23],
    [10,26,28],
    [10,29,34],
    [10,29,34],
    [10,30,35],
    [4,10,12],
    [9,11,13],
    [9,11,13],
    [10,12,14],
    [10,12,14],
    [10,14,16]
]

let level2Stars: [[Int]] = [
    [10,15,22],
    [10,20,23],
    [10,26,28],
    [10,29,34],
    [10,29,34],
    [10,30,35],
    [4,10,12],
    [9,11,13],
    [9,11,13],
    [10,12,14],
    [10,12,14],
    [10,14,16]
]

// -------- LevelsScene

var startScreenCount = 1

enum Language {
    case en
    case ru
}
var preferredLanguage = Language.en

var showTrioSP: Bool = false
var showRougeSP: Bool = false
var showInvisibleSP: Bool = false

var engineUpgrade: Bool = false
var flapsUpgrade: Bool = false
var trioUpgrade: Bool = false
var doubleUpgrade: Bool = false
var invisibleUpgrade: Bool = false

var hintLevel: Bool = false
var canMoveUpAndDown: Bool = true
var shipExplode: Bool = false
var onlyTopLevel: Bool = false

var constructionLevelDurationTimerInterval: Int = 14

var scoreZeroStars = 0
var scoreOneStar = 1
var scoreTwoStar = 2
var scoreThreeStars = 3

var lvlScore: [Int] = [0,0,0,0,0,0,0,0,0,0,0,0]
var lvl2Score: [Int] = [0,0,0,0,0,0,0,0,0,0,0,0]

//++GameOverScene

var highScoreNumber: Int = 0
var nickName = "noname"

//--GameOverScene

//++GameScene
enum BodyType: UInt32 {
    case player = 1
    case barrier = 2
    case cD = 4
    case other = 8
    case partition = 16
    case debris = 32
}

enum gameState {
    case beforeGame
    case inGame
    case afterGame
    case puzzle
}

struct SomeNames {
    static let soulStar = "SoulStar"
    static let fontName = "elitedanger"
    static let fontNameFutura = "Futura"
    static let fontNameVenusrising = "Venus Rising"
    static let blowTheShip = NSNotification.Name("Ship Contact Partition")
    // Buttons
    static let normalStatusButton = "statusNormalButton"
    static let trioStatusButton = "statusTrioButton"
    static let rougeOneStatusButton = "statusRougeOneButton"
    static let invisibleStatusButton = "statusInvisibleButton"
}



enum DebrisSpeed: Int {
    case slow = 10
    case middle = 7
    case fast = 4
}

enum PartitionSpeed: TimeInterval {
    case slowHigh = 19
    case slowLow = 18
    case middleHigh = 12
    case middleLow = 11
    case fastHigh = 7
    case fastLow = 6
    
}

var debrisSpeed = DebrisSpeed.fast
var partitionSpeedHigh = PartitionSpeed.fastHigh
var partitionSpeedLow = PartitionSpeed.fastLow
var score = 0
var summaryScore = 0
var currentLevelHighScore = 0
var level = 0

var currentGameStatus = gameState.inGame
//--GameScene

//++Plaer
enum ShipStatus {
    case noraml
    case trio
    case rogueOne
    case invisible
}

enum ShipSpeedMovement: TimeInterval {
    case slow = 0.6
    case normal = 0.4
    case fast = 0.2
}

var shipSpeedMovement = ShipSpeedMovement.fast


struct PlayerPosition {
    static let lowLeft620 = CGPoint(x: /*620*//*570*//*550*/555, y: 512)
    static let lowCenter768 = CGPoint(x: 768, y: 512)
    static let lowRight925 = CGPoint(x: /*925*//*975*//*995*/990, y: 512)
    
    static let middleLeft535 = CGPoint(x: /*535*//*455*//*475*//*465*/460, y: 512)
    static let middleCenter768 = CGPoint(x: 768, y: 512)
    static let middleRight1010 = CGPoint(x: /*1010*//*1070*//*1080*/1095, y: 512)
    
    static let highLeft450 = CGPoint(x: /*450*//*350*//*360*/330, y: 512)
    static let highCenter768 = CGPoint(x: 768, y: 512)
    static let highRight1095 = CGPoint(x: /*1095*//*1195*//*1185*/1220, y: 512)
}

struct DebrisPosition {
    static let lowLeft620 = CGPoint(x: /*620*//*570*//*550*/555, y: 2200)
    static let lowCenter768 = CGPoint(x: 768, y: 2200)
    static let lowRight925 = CGPoint(x: /*925*//*975*//*995*/990, y: 2200)
    
    static let middleLeft535 = CGPoint(x: /*535*//*455*//*475*//*435*/445, y: 2500)
    static let middleCenter768 = CGPoint(x: 768, y: 2500)
    static let middleRight1010 = CGPoint(x: /*1010*//*1070*//*1110*/1100, y: 2500)
    
    static let highLeft450 = CGPoint(x: /*450*//*350*//*360*//*280*//*300*/310, y: 2900)
    static let highCenter768 = CGPoint(x: 768, y: 2900)
    static let highRight1095 = CGPoint(x: /*1095*//*1195*//*1185*//*1265*//*1245*/1235, y: 2900)
}


struct MiddleBarrierPosition {
    static let lowLeft620 = CGPoint(x: /*694*//*674*/664, y: 2200)
    //static let lowCenter768 = CGPoint(x: 768, y: 2200)
    static let lowRight925 = CGPoint(x: /*848.5*//*868.5*/878.5, y: 2200)
    
    static let middleLeft535 = CGPoint(x: /*651.5*//*631.5*/611.5, y: 2500)
    //static let middleCenter768 = CGPoint(x: 768, y: 2500)
    static let middleRight1010 = CGPoint(x: /*889*//*909*/929, y: 2500)
    
    static let highLeft450 = CGPoint(x: /*609*//*569*//*534*/544, y: 2900)
    //static let highCenter768 = CGPoint(x: 768, y: 2900)
    static let highRight1095 = CGPoint(x: /*931.5*//*971.5*//*1006.5*/996.5, y: 2900)
}

struct ShipScale {
    static let small: CGFloat = 0.6
    static let middle: CGFloat = 0.9
    static let big: CGFloat = 1.3
}

var shipStatus = ShipStatus.noraml

//--Player

let levels = [levelOne, levelTwo, levelThree, levelFour, levelFive, levelSix, levelSeven, levelEight, levelNine, levelTen, levelEleven, levelTwelve]

let levelOne: [[Int]] = [
    // Debris, barriers settitns: 1 debis(mine), 0 nothingy, 2 barrier(bonus), 4 middle barrier
    
    // Partition settings: 1 MAXleft, 2 MIDLeft 3 center, 4 MIDReight, 5 MAXRight, 6 Center 90 degres. First number 2 zPosition, second 4 zPosition
    // Partitions settings: First Low position 2z , second high position 4z
    
    // 22 bonus
    
    // low          middle        high       partition settings
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   1,0,1,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   1,0,0,0,0,   0,0,0,0,0,   0,0],    // 5
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,2,0,1,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   1,0,1,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   1,0,0,0,1,   0,0,0,0,0,   0,0],    // 10 mid 1 0 1
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,1,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,0,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   1,0,0,0,1,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   2,0,1,0,0,   0,0,0,0,0,   0,0],     // 15
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   1,0,1,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   1,0,0,0,0,   0,0,0,0,0,   0,0],    // 20
    [0,0,0,0,0,   0,0,0,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,1,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0],    // 25
    [0,0,0,0,0,   2,0,1,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   1,0,1,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,2,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   2,0,1,0,0,   0,0,0,0,0,   0,0],     // 30
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   1,0,1,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   1,0,0,0,0,   0,0,0,0,0,   0,0],    // 35
    [0,0,0,0,0,   0,0,0,0,1,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,2,   0,0,0,0,0,   0,0],    // 40
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   2,0,1,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   1,0,1,0,2,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   1,0,1,0,0,   0,0,0,0,0,   0,0],     // 45
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,0,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   1,0,0,0,1,   0,0,0,0,0,   0,0],    // 50
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   1,0,2,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   1,0,1,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   1,0,0,0,0,   0,0,0,0,0,   0,0],    // 55
    [0,0,0,0,0,   1,0,2,0,1,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   1,0,0,0,1,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   1,0,1,0,2,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   1,0,0,0,1,   0,0,0,0,0,   0,0],    //60
]

let levelTwo: [[Int]] = [
    // Debris, barriers settitns: 1 debis(mine), 0 nothingy, 2 barrier(bonus), 4 middle barrier
    // Partition settings: 0 nothingy, 1 low, 2 high
    
    // low          middle        high       partition settings
    // Debris, barriers settitns: 1 debis, 0 nothingy, 2 barrier, 4 middle barrier
    
    // Partition settings: 1 MAXleft, 2 MIDLeft 3 center, 4 MIDReight, 5 MAXRight, 6 Center 90 degres. First number 2 zPosition, second 4 zPosition
    // Partitions settings: First Low position 2z , second high position 4z
    
    // 23 bonus
    
    // low          middle        high       partition settings
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   1,0,1,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,1,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   1,0,0,0,0,   0,0,0,0,0,   0,0],    // 5
    [0,0,0,0,0,   1,0,1,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,2,0,1,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   1,0,0,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   1,4,9,4,1,   0,0,0,0,0,   0,0],    // 10
    [0,0,0,0,0,   0,0,2,0,1,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,1,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   1,0,0,0,1,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   2,0,1,0,0,   0,0,0,0,0,   0,0],     // 15
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   1,0,1,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,2,0,2,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   1,0,1,0,0,   0,0,0,0,0,   0,0],    // 20
    [0,0,0,0,0,   0,0,0,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,1,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0],    // 25
    [0,0,0,0,0,   2,0,1,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   1,0,1,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,2,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   2,0,1,0,0,   0,0,0,0,0,   0,0],     // 30
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   1,0,1,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   1,0,0,0,0,   0,0,0,0,0,   0,0],    // 35
    [0,0,0,0,0,   1,0,0,0,1,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,2,   0,0,0,0,0,   0,0],    // 40
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   2,0,1,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   1,0,1,0,2,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   1,0,1,0,0,   0,0,0,0,0,   0,0],     // 45
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,0,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   1,0,0,0,1,   0,0,0,0,0,   0,0],    // 50
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   1,0,2,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   1,0,1,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   1,0,0,0,1,   0,0,0,0,0,   0,0],    // 55
    [0,0,0,0,0,   1,0,2,0,1,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   1,0,0,0,1,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,2,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   1,0,0,0,1,   0,0,0,0,0,   0,0],    //60
]

let levelThree: [[Int]] = [
    // Debris, barriers settitns: 1 debis(mine), 0 nothingy, 2 barrier(bonus), 4 middle barrier
    
    // Partition settings: 1 MAXleft, 2 MIDLeft 3 center, 4 MIDReight, 5 MAXRight, 6 Center 90 degres. First number 2 zPosition, second 4 zPosition
    // Partitions settings: First Low position 2z , second high position 4z
    
    // 28 bonus
    
    // low          middle        high       partition settings
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   1,0,0,0,0,   1,0,1,0,1,   0,0],
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,1,   0,0,2,0,0,   0,0],
    [0,0,0,0,0,   1,0,0,0,0,   0,0,0,0,0,   0,0],    // 5
    [0,0,0,0,0,   1,0,1,0,0,   0,0,1,0,0,   0,0],
    [0,0,0,0,0,   0,0,0,0,1,   0,0,2,0,1,   0,0],
    [0,0,0,0,0,   0,0,2,0,0,   0,0,1,0,0,   0,0],
    [0,0,0,0,0,   1,0,1,0,0,   1,0,0,0,0,   0,0],
    [0,0,0,0,0,   1,0,0,0,1,   0,0,1,0,0,   0,0],    // 10
    [0,0,0,0,0,   0,0,2,0,1,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,0,0,1,   0,0,1,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,2,0,0,   0,0],
    [0,0,0,0,0,   1,0,0,0,1,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   2,0,0,0,2,   0,0,0,0,1,   0,0],     // 15
    [0,0,0,0,0,   0,0,2,0,0,   1,0,0,0,0,   0,0],
    [0,0,0,0,0,   1,0,1,0,0,   0,0,1,0,0,   0,0],
    [0,0,0,0,0,   0,0,2,0,2,   1,0,0,0,1,   0,0],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   1,0,1,0,0,   0,0,1,0,0,   0,0],    // 20
    [0,0,0,0,0,   0,0,0,0,0,   0,0,2,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,1,   1,0,0,0,1,   0,0],
    [0,0,0,0,0,   0,0,2,0,0,   0,0,1,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,0,   2,0,1,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0],    // 25
    [0,0,0,0,0,   2,0,1,0,0,   1,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,1,   0,0],
    [0,0,0,0,0,   1,0,1,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,2,   1,0,1,0,1,   0,0],
    [0,0,0,0,0,   2,0,1,0,0,   0,0,0,0,0,   0,0],     // 30
    [0,0,0,0,0,   0,0,2,0,0,   1,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,1,0,0,   0,0],
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,1,   0,0],
    [0,0,0,0,0,   1,0,1,0,0,   0,0,1,0,0,   0,0],
    [0,0,0,0,0,   1,0,0,0,0,   1,0,0,0,0,   0,0],    // 35
    [0,0,0,0,0,   1,0,0,0,1,   0,0,1,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,1,   0,0],
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,1,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,2,   0,0,0,0,0,   0,0],    // 40
    [0,0,0,0,0,   0,0,1,0,0,   1,0,1,0,1,   0,0],
    [0,0,0,0,0,   2,0,1,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,1,0,0,   0,0],
    [0,0,0,0,0,   1,0,1,0,2,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   1,0,1,0,0,   1,0,0,0,1,   0,0],     // 45
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,1,0,0,   0,0],
    [0,0,0,0,0,   0,0,0,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,0,   1,0,0,0,0,   0,0],
    [0,0,0,0,0,   1,0,0,0,1,   0,0,0,0,0,   0,0],    // 50
    [0,0,0,0,0,   0,0,1,0,0,   2,0,0,0,1,   0,0],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   1,0,2,0,0,   0,0,1,0,0,   0,0],
    [0,0,0,0,0,   1,0,1,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   1,0,0,0,1,   1,0,0,0,0,   0,0],    // 55
    [0,0,0,0,0,   1,0,2,0,1,   0,0,1,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,1,   0,0],
    [0,0,0,0,0,   1,0,0,0,1,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,2,   1,0,0,0,1,   0,0],
    [0,0,0,0,0,   1,0,0,0,1,   0,0,1,0,1,   0,0],    //60
]

let levelFour: [[Int]] = [
    // Debris, barriers settitns: 1 debis(mine), 0 nothingy, 2 barrier(bonus), 4 middle barrier
    
    // Partition settings: 1 MAXleft, 2 MIDLeft 3 center, 4 MIDReight, 5 MAXRight, 6 Center 90 degres. First number 2 zPosition, second 4 zPosition
    // Partitions settings: First Low position 2z , second high position 4z
    
    // 34 bonus
    
    // low          middle        high       partition settings
    [0,0,0,0,0,   1,0,0,0,2,   1,0,0,0,1,   0,0],
    [0,0,0,0,0,   1,0,0,0,0,   1,0,1,0,1,   0,0],
    [0,0,0,0,0,   2,0,1,0,0,   0,0,0,0,1,   0,0],
    [0,0,0,0,0,   0,0,1,0,1,   1,0,2,0,0,   0,0],
    [0,0,0,0,0,   1,0,0,0,0,   0,0,0,0,0,   0,0],    // 5
    [0,0,0,0,0,   1,0,1,0,0,   0,0,1,0,0,   0,0],
    [0,0,0,0,0,   1,0,0,0,1,   0,0,2,0,1,   0,0],
    [0,0,0,0,0,   0,0,2,0,1,   0,0,1,0,0,   0,0],
    [0,0,0,0,0,   1,0,1,0,0,   1,0,0,0,0,   0,0],
    [0,0,0,0,0,   1,0,0,0,1,   0,0,1,0,0,   0,0],    // 10
    [0,0,0,0,0,   0,0,2,0,1,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   1,0,0,0,1,   0,0,1,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,2,0,0,   0,0],
    [0,0,0,0,0,   1,0,0,0,1,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   2,0,0,0,2,   0,0,0,0,1,   0,0],     // 15
    [0,0,0,0,0,   0,0,2,0,0,   1,0,0,0,0,   0,0],
    [0,0,0,0,0,   1,0,1,0,0,   0,0,1,0,0,   0,0],
    [0,0,0,0,0,   0,0,2,0,2,   1,0,0,0,1,   0,0],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   1,0,1,0,0,   0,0,1,0,0,   0,0],    // 20
    [0,0,0,0,0,   0,0,0,0,0,   0,0,2,0,0,   0,0],
    [0,0,0,0,0,   1,0,1,0,1,   1,0,0,0,1,   0,0],
    [0,0,0,0,0,   0,0,2,0,0,   0,0,1,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,0,   2,0,1,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0],    // 25
    [0,0,0,0,0,   1,0,1,0,0,   1,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,1,   0,0],
    [0,0,0,0,0,   1,0,1,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,2,   1,0,1,0,1,   0,0],
    [0,0,0,0,0,   2,0,1,0,0,   0,0,0,0,0,   0,0],     // 30
    [0,0,0,0,0,   0,0,2,0,0,   1,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,1,0,0,   0,0],
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,1,   0,0],
    [0,0,0,0,0,   1,0,1,0,0,   0,0,1,0,0,   0,0],
    [0,0,0,0,0,   1,0,0,0,0,   1,0,0,0,0,   0,0],    // 35
    [0,0,0,0,0,   1,0,0,0,1,   0,0,1,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,1,   0,0],
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,1,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,2,   0,0,0,0,0,   0,0],    // 40
    [0,0,0,0,0,   0,0,1,0,0,   1,0,1,0,1,   0,0],
    [0,0,0,0,0,   2,0,1,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,0,   2,0,1,0,0,   0,0],
    [0,0,0,0,0,   1,0,1,0,2,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   1,0,1,0,0,   1,0,0,0,1,   0,0],     // 45
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,0,   2,0,1,0,0,   0,0],
    [0,0,0,0,0,   0,0,0,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,0,   1,0,2,0,0,   0,0],
    [0,0,0,0,0,   1,0,0,0,1,   0,0,0,0,0,   0,0],    // 50
    [0,0,0,0,0,   0,0,1,0,0,   2,0,0,0,1,   0,0],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   1,0,2,0,0,   0,0,1,0,0,   0,0],
    [0,0,0,0,0,   1,0,1,0,0,   0,0,2,0,0,   0,0],
    [0,0,0,0,0,   1,0,0,0,1,   1,0,0,0,0,   0,0],    // 55
    [0,0,0,0,0,   1,0,2,0,1,   0,0,1,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,1,   0,0],
    [0,0,0,0,0,   1,0,0,0,1,   2,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,2,   1,0,0,0,1,   0,0],
    [0,0,0,0,0,   1,0,0,0,1,   2,0,1,0,1,   0,0],    //60
]

let levelFive: [[Int]] = [
    // Debris, barriers settitns: 1 debis(mine), 0 nothingy, 2 barrier(bonus), 4 middle barrier
    
    // Partition settings: 1 MAXleft, 2 MIDLeft 3 center, 4 MIDReight, 5 MAXRight, 6 Center 90 degres. First number 2 zPosition, second 4 zPosition
    // Partitions settings: First Low position 2z , second high position 4z
    
    // 34 bonus
    
    // low          middle        high       partition settings
    [1,0,1,0,1,   1,0,0,0,2,   1,0,0,0,1,   0,0],
    [0,0,0,0,0,   1,0,0,0,0,   1,0,1,0,1,   0,0],
    [1,0,2,0,1,   0,0,1,0,0,   0,0,0,0,1,   0,0],
    [0,0,0,0,0,   0,0,1,0,1,   1,0,2,0,0,   0,0],
    [0,0,1,0,0,   1,0,0,0,0,   0,0,0,0,0,   0,0],    // 5
    [0,0,0,0,0,   1,0,1,0,0,   0,0,1,0,0,   0,0],
    [2,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0],
    [0,0,0,0,0,   0,0,0,0,1,   0,0,1,0,0,   0,0],
    [0,0,1,0,0,   1,0,1,0,0,   1,0,0,0,0,   0,0],
    [1,0,0,0,0,   1,0,0,0,1,   0,0,0,0,0,   0,0],    // 10
    [0,0,1,0,0,   0,0,2,0,1,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   1,0,0,0,1,   0,0,1,0,0,   0,0],
    [0,0,2,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   1,0,0,0,1,   0,0,0,0,0,   0,0],
    [1,0,0,0,0,   1,0,0,0,2,   0,0,0,0,1,   0,0],     // 15
    [0,0,1,0,0,   0,0,2,0,0,   1,0,0,0,0,   0,0],
    [1,0,0,0,0,   1,0,1,0,0,   0,0,1,0,0,   0,0],
    [0,0,0,0,1,   0,0,2,0,1,   1,0,0,0,1,   0,0],
    [0,0,2,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0],
    [1,0,0,0,0,   1,0,1,0,0,   0,0,1,0,0,   0,0],    // 20
    [0,0,1,0,0,   0,0,0,0,0,   0,0,2,0,0,   0,0],
    [1,0,0,0,0,   1,0,1,0,1,   1,0,0,0,1,   0,0],
    [0,0,0,0,1,   0,0,2,0,0,   0,0,1,0,0,   0,0],
    [1,0,0,0,0,   0,0,0,0,0,   0,0,1,0,0,   0,0],
    [0,0,1,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0],    // 25
    [0,0,0,0,0,   1,0,0,0,0,   1,0,0,0,0,   0,0],
    [0,0,2,0,1,   0,0,1,0,0,   0,0,0,0,1,   0,0],
    [1,0,2,0,1,   1,0,1,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,2,   1,0,1,0,1,   0,0],
    [1,0,0,0,1,   2,0,1,0,0,   0,0,0,0,0,   0,0],     // 30
    [0,0,0,0,0,   0,0,0,0,0,   1,0,0,0,0,   0,0],
    [1,0,2,0,0,   0,0,1,0,0,   0,0,1,0,0,   0,0],
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,1,   0,0],
    [0,0,0,0,1,   1,0,1,0,0,   0,0,0,0,0,   0,0],
    [0,0,2,0,0,   0,0,0,0,0,   1,0,0,0,0,   0,0],    // 35
    [1,0,0,0,1,   1,0,0,0,1,   0,0,1,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,1,   0,0],
    [1,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0],
    [0,0,1,0,0,   0,0,1,0,0,   1,0,1,0,0,   0,0],
    [0,0,0,0,1,   0,0,0,0,2,   0,0,0,0,0,   0,0],    // 40
    [0,0,0,0,0,   0,0,1,0,0,   1,0,0,0,1,   0,0],
    [1,0,1,0,1,   2,0,0,0,0,   0,0,0,0,0,   0,0],
    [1,0,1,0,1,   0,0,1,0,0,   2,0,1,0,0,   0,0],
    [0,0,0,0,0,   1,0,1,0,2,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   1,0,0,0,0,   1,0,0,0,1,   0,0],     // 45
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,1,0,0,   0,0],
    [0,0,2,0,0,   0,0,0,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,0,   1,0,2,0,0,   0,0],
    [1,0,1,0,1,   1,0,0,0,1,   0,0,0,0,0,   0,0],    // 50
    [0,0,0,0,0,   0,0,1,0,0,   2,0,0,0,1,   0,0],
    [1,0,1,0,1,   0,0,1,0,0,   0,0,0,0,0,   0,0],
    [0,0,1,0,0,   1,0,2,0,0,   0,0,1,0,0,   0,0],
    [1,0,0,0,1,   1,0,1,0,0,   0,0,2,0,0,   0,0],
    [0,0,0,0,0,   1,0,0,0,1,   1,0,0,0,0,   0,0],    // 55
    [0,0,2,0,0,   1,0,0,0,1,   0,0,1,0,0,   0,0],
    [1,0,0,0,0,   0,0,1,0,0,   0,0,0,0,1,   0,0],
    [0,0,1,0,0,   1,0,0,0,1,   2,0,0,0,0,   0,0],
    [2,0,0,0,0,   0,0,1,0,0,   1,0,0,0,1,   0,0],
    [0,0,2,0,0,   1,0,0,0,1,   0,0,1,0,1,   0,0],    //60
]

let levelSix: [[Int]] = [
    // Debris, barriers settitns: 1 debis(mine), 0 nothingy, 2 barrier(bonus), 4 middle barrier
    
    // Partition settings: 1 MAXleft, 2 MIDLeft 3 center, 4 MIDReight, 5 MAXRight, 6 Center 90 degres. First number 2 zPosition, second 4 zPosition
    // Partitions settings: First Low position 2z , second high position 4z
    
    // 35 bonus
    
    // low          middle        high       partition settings
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,1,0,0,   0,0],
    [0,0,2,0,0,   0,0,0,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,0,   1,0,2,0,0,   0,0],
    [1,0,1,0,1,   1,0,0,0,1,   0,0,0,0,0,   0,0],    // 5  3 bonus
    
    [0,0,0,0,0,   1,0,1,0,0,   0,0,1,0,0,   0,0],
    [2,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0],
    [0,0,0,0,0,   0,0,0,0,1,   0,0,1,0,0,   0,0],
    [0,0,1,0,0,   1,0,1,0,0,   1,0,0,0,0,   0,0],
    [1,0,0,0,0,   1,0,0,0,1,   0,0,0,0,0,   0,0],    // 10  1
    
    [0,0,1,0,0,   0,0,2,0,1,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   1,0,0,0,1,   0,0,1,0,0,   0,0],
    [0,0,2,0,0,   0,0,1,0,0,   1,0,0,0,1,   0,0],
    [0,0,0,0,0,   2,0,1,0,0,   0,0,0,0,0,   0,0],
    [1,0,0,0,0,   1,0,0,0,2,   0,0,0,0,1,   0,0],     // 15  4
    
    [0,0,1,0,0,   0,0,0,0,0,   0,0,2,0,0,   0,0],
    [1,0,0,0,0,   1,0,1,0,1,   1,0,0,0,1,   0,0],
    [0,0,0,0,1,   0,0,2,0,0,   0,0,1,0,0,   0,0],
    [1,0,0,0,0,   0,0,0,0,0,   0,0,1,0,0,   0,0],
    [0,0,1,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0],    // 20  2
    
    [1,0,1,0,1,   1,0,0,0,2,   1,0,0,0,1,   0,0],
    [0,0,0,0,0,   1,0,0,0,0,   1,0,1,0,1,   0,0],
    [1,0,2,0,1,   0,0,1,0,0,   0,0,0,0,1,   0,0],
    [0,0,0,0,0,   0,0,1,0,1,   1,0,2,0,0,   0,0],
    [0,0,1,0,0,   1,0,0,0,0,   0,0,0,0,0,   0,0],    // 25  3
    
    [0,0,0,0,0,   0,0,0,0,0,   1,0,0,0,0,   0,0],
    [1,0,2,0,0,   0,0,1,0,0,   0,0,1,0,0,   0,0],
    [0,0,0,0,0,   0,0,2,0,0,   0,0,0,0,1,   0,0],
    [0,0,0,0,1,   1,0,1,0,0,   1,0,1,0,1,   0,0],
    [0,0,2,0,0,   0,0,0,0,0,   1,0,0,0,0,   0,0],    // 30  3
    
    [1,0,0,0,1,   1,0,0,0,1,   0,0,2,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,0,   0,0,0,0,1,   0,0],
    [1,0,0,0,0,   0,0,2,0,0,   0,0,1,0,0,   0,0],
    [0,0,1,0,0,   0,0,1,0,0,   1,0,1,0,0,   0,0],
    [0,0,0,0,1,   0,0,0,0,2,   0,0,0,0,0,   0,0],    // 35  3
    
    [0,0,1,0,0,   0,0,2,0,0,   1,0,0,0,0,   0,0],
    [1,0,0,0,0,   1,0,1,0,0,   0,0,1,0,0,   0,0],
    [0,0,0,0,1,   0,0,2,0,1,   0,0,2,0,0,   0,0],
    [0,0,2,0,0,   0,0,1,0,0,   0,0,0,0,0,   0,0],
    [1,0,0,0,0,   1,0,1,0,0,   0,0,1,0,0,   0,0],    // 40  4
    
    [0,0,0,0,0,   0,0,1,0,0,   1,0,0,0,1,   0,0],
    [1,0,1,0,1,   2,0,0,0,0,   0,0,0,0,0,   0,0],
    [1,0,1,0,1,   0,0,1,0,0,   2,0,1,0,0,   0,0],
    [0,0,0,0,0,   1,0,1,0,2,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   1,0,0,0,0,   1,0,0,0,1,   0,0],     // 45  3
    
    [0,0,0,0,1,   0,0,1,0,0,   2,0,0,0,1,   0,0],
    [1,0,1,0,1,   0,0,1,0,0,   0,0,0,0,0,   0,0],
    [0,0,1,0,0,   1,0,0,0,0,   0,0,1,0,0,   0,0],
    [1,0,0,0,1,   1,0,0,0,0,   2,0,0,0,0,   0,0],
    [0,0,0,0,0,   1,0,2,0,1,   1,0,0,0,0,   0,0],    // 50  3
    
    [1,0,1,0,1,   1,0,0,0,1,   0,0,1,0,0,   0,0],
    [1,0,0,0,0,   0,0,1,0,0,   0,0,0,0,1,   0,0],
    [0,0,1,0,0,   1,0,0,0,1,   2,0,0,0,0,   0,0],
    [2,0,0,0,0,   0,0,1,0,0,   1,0,0,0,1,   0,0],
    [0,0,1,0,0,   1,0,0,0,1,   0,0,1,0,1,   0,0],    //55  2
    
    [0,0,0,0,0,   1,0,0,0,0,   1,0,0,0,0,   0,0],
    [0,0,2,0,1,   0,0,1,0,0,   0,0,0,0,1,   0,0],
    [1,0,2,0,1,   1,0,1,0,0,   0,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,1,0,2,   1,0,1,0,1,   0,0],
    [1,0,0,0,1,   2,0,1,0,0,   0,0,0,0,0,   0,0],     // 60  4
]

let levelSeven: [[Int]] = [
    // Debris, barriers settitns: 1 debis(mine), 0 nothingy, 2 barrier(bonus), 4 middle barrier
    
    // Partition settings: 1 MAXleft, 2 MIDLeft 3 center, 4 MIDReight, 5 MAXRight, 6 Center 90 degres. First number 2 zPosition, second 4 zPosition
    // Partitions settings: First Low position 2z , second high position 4z
    
    // 35 bonus
    
    // low          middle        high       partition settings
    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0],
    [1,0,0,0,1,   1,0,1,0,0,   1,0,1,0,1,   0,0],
    [1,0,1,0,1,   1,0,1,0,1,   1,0,1,0,0,   0,0],
    [1,0,1,0,1,   1,0,1,0,1,   1,0,0,0,1,   0,0],
    [1,0,1,0,1,   1,0,1,0,1,   0,0,1,0,1,   0,0],    // 5  0 bonus
    
    [1,0,1,0,1,   0,0,1,0,1,   1,0,1,0,1,   0,0],
    [2,0,1,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0],
    [1,0,1,0,1,   0,0,1,0,1,   1,0,1,0,1,   0,0],
    [1,0,1,0,1,   1,0,1,0,1,   0,0,1,0,1,   0,0],
    [1,0,1,0,1,   1,0,1,0,1,   1,0,0,0,1,   0,0],    // 10  1
    
    [1,0,1,0,1,   1,0,2,0,1,   1,0,1,0,1,   0,0],
    [1,0,0,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0],
    [1,0,1,0,0,   1,0,1,0,1,   1,0,1,0,1,   0,0],
    [1,0,1,0,0,   1,0,1,0,1,   1,0,1,0,1,   0,0],
    [1,0,1,0,1,   1,0,1,0,1,   1,0,1,0,0,   0,0],     // 15  1
    
    [1,0,1,0,1,   1,0,1,0,0,   1,0,1,0,1,   0,0],
    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0],
    [1,0,1,0,1,   2,0,1,0,1,   1,0,1,0,1,   0,0],
    [0,0,1,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0],
    [0,0,1,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0],    // 20  1
    
    [1,0,1,0,1,   0,0,1,0,1,   1,0,1,0,1,   0,0],
    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0],
    [1,0,1,0,1,   1,0,1,0,1,   1,0,0,0,1,   0,0],
    [1,0,1,0,1,   1,0,1,0,1,   1,0,1,0,0,   0,0],
    [1,0,1,0,1,   1,0,1,0,0,   1,0,1,0,1,   0,0],    // 25  0
    
    [1,0,1,0,0,   1,0,1,0,1,   1,0,1,0,1,   0,0],
    [1,0,2,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0],
    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0],
    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0],
    [1,0,1,0,1,   0,0,1,0,1,   1,0,1,0,1,   0,0],    // 30  1
    
    [1,0,1,0,1,   1,0,1,0,1,   0,0,1,0,1,   0,0],
    [1,0,1,0,1,   1,0,1,0,1,   1,0,0,0,1,   0,0],
    [1,0,1,0,1,   1,0,1,0,1,   1,0,1,0,0,   0,0],
    [1,0,1,0,1,   1,0,1,0,1,   1,0,2,0,1,   0,0],
    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0],    // 35  1
    
    [1,0,1,0,1,   1,0,1,0,0,   1,0,1,0,1,   0,0],
    [1,0,1,0,0,   1,0,1,0,1,   1,0,1,0,1,   0,0],
    [1,0,2,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0],
    [1,0,1,0,0,   1,0,1,0,1,   1,0,1,0,1,   0,0],
    [1,0,0,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0],    // 40  1
    
    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0],
    [1,0,2,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0],
    [1,0,1,0,1,   0,0,0,0,1,   1,0,1,0,1,   0,0],
    [1,0,1,0,1,   1,0,1,0,1,   1,0,0,0,1,   0,0],
    [1,0,1,0,1,   1,0,1,0,1,   2,0,1,0,1,   0,0],     // 45  2
    
    [1,0,1,0,1,   1,0,1,0,1,   1,0,0,0,1,   0,0],
    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0],
    [1,0,1,0,1,   1,0,1,0,0,   1,0,1,0,1,   0,0],
    [1,0,1,0,2,   1,0,1,0,1,   1,0,1,0,1,   0,0],
    [1,0,0,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0],    // 50  1
    
    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0],
    [1,0,0,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0],
    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0],
    [1,0,1,0,1,   1,0,1,0,1,   1,0,2,0,1,   0,0],
    [1,0,1,0,1,   1,0,1,0,1,   0,0,1,0,1,   0,0],    //55  1
    
    [1,0,1,0,1,   1,0,1,0,1,   1,0,0,0,1,   0,0],
    [1,0,1,0,1,   1,0,1,0,1,   2,0,1,0,1,   0,0],
    [1,0,1,0,1,   0,0,1,0,1,   1,0,1,0,1,   0,0],
    [1,0,1,0,0,   1,0,1,0,1,   1,0,1,0,1,   0,0],
    [1,0,1,0,1,   1,0,1,0,2,   1,0,1,0,1,   0,0],     // 60  2
]

let levelEight: [[Int]] = [
    // Debris, barriers settitns: 1 debis(mine), 0 nothingy, 2 barrier(bonus), 4 middle barrier
    
    // Partition settings: 1 MAXleft, 2 MIDLeft 3 center, 4 MIDReight, 5 MAXRight, 6 Center 90 degres. First number 2 zPosition, second 4 zPosition
    // Partitions settings: First Low position 2z , second high position 4z
    
    // 13 bonus
    
    // low          middle        high       partition settings
    [1,0,1,0,0,   1,0,0,0,1,   0,0,1,0,0,   1,0],
    [1,0,0,0,1,   1,0,1,0,0,   1,0,1,0,1,   0,0],
    [0,0,1,0,1,   0,0,0,0,1,   1,0,0,0,0,   2,0],
    [0,0,1,0,0,   0,0,0,0,1,   1,0,0,0,1,   0,0],
    [1,0,0,0,1,   0,0,0,0,1,   0,0,2,0,1,   0,0],    // 5  1 bonus
    
    [1,0,1,0,1,   0,0,1,0,1,   1,0,1,0,1,   0,0],
    [2,0,0,0,1,   1,0,0,0,0,   1,0,0,0,0,   0,0],
    [1,0,1,0,1,   0,0,1,0,1,   0,0,0,0,0,   0,6],
    [0,0,0,0,1,   0,0,1,0,0,   0,0,1,0,0,   0,0],
    [1,0,0,0,1,   1,0,0,0,0,   1,0,2,0,1,   0,0],    // 10  2
    
    [1,0,0,0,1,   0,0,0,0,1,   0,0,1,0,0,   0,0],
    [1,0,0,0,0,   1,0,0,0,1,   0,0,0,0,1,   0,0],
    [1,0,0,0,0,   0,0,2,0,1,   1,0,0,0,1,   5,0],
    [0,0,1,0,0,   0,0,1,0,1,   0,0,1,0,1,   0,0],
    [0,0,2,0,1,   0,0,0,0,1,   1,0,0,0,0,   0,0],     // 15  2
    
    [0,0,1,0,0,   0,0,1,0,0,   0,0,2,0,1,   0,0],
    [0,0,0,0,1,   0,0,0,0,1,   0,0,1,0,0,   0,4],
    [1,0,1,0,1,   2,0,1,0,1,   1,0,1,0,1,   0,0],
    [0,0,1,0,1,   1,0,1,0,1,   1,0,1,0,1,   0,0],
    [0,0,1,0,1,   1,0,0,0,1,   1,0,0,0,1,   1,0],    // 20  2
    
    [0,0,1,0,0,   0,0,1,0,0,   0,0,1,0,1,   0,0],
    [1,0,1,0,0,   0,0,0,0,1,   2,0,0,0,1,   3,0],
    [1,0,0,0,0,   0,0,0,0,1,   0,0,0,0,1,   0,0],
    [0,0,2,0,1,   0,0,0,0,1,   1,0,0,0,0,   0,0],
    [1,0,1,0,1,   1,0,1,0,0,   1,0,1,0,1,   0,1],    // 25  2
    
    [0,0,1,0,0,   0,0,2,0,1,   0,0,0,0,1,   0,0],
    [1,0,0,0,0,   1,0,0,0,0,   1,0,0,0,0,   0,0],
    [1,0,0,0,0,   1,0,0,0,1,   1,0,0,0,2,   0,2],
    [0,0,0,0,1,   0,0,0,0,1,   1,0,0,0,0,   0,0],
    [1,0,0,0,0,   0,0,2,0,1,   1,0,0,0,0,   0,0],    // 30  3
    
    [0,0,0,0,1,   1,0,0,0,1,   0,0,0,0,1,   1,0],
    [0,0,1,0,0,   1,0,0,0,1,   0,0,0,0,1,   0,0],
    [0,0,0,0,1,   1,0,2,0,0,   0,0,1,0,0,   0,5],
    [1,0,1,0,1,   1,0,1,0,0,   1,0,0,0,1,   0,0],
    [0,0,0,0,1,   1,0,0,0,2,   1,0,1,0,0,   2,0],    // 35  1

]

let levelNine: [[Int]] = [
    // Debris, barriers settitns: 1 debis(mine), 0 nothingy, 2 barrier(bonus), 4 middle barrier
    
    // Partition settings: 1 MAXleft, 2 MIDLeft 3 center, 4 MIDReight, 5 MAXRight, 6 Center 90 degres. First number 2 zPosition, second 4 zPosition
    // Partitions settings: First Low position 2z , second high position 4z
    
    // 13 bonus
    
    // low          middle        high       partition settings
    [1,0,1,0,0,   1,0,0,0,1,   0,0,1,0,0,   0,0],
    [1,0,0,0,1,   1,0,1,0,0,   1,0,1,0,1,   0,0],
    [0,0,1,0,1,   2,0,2,0,2,   1,0,0,0,0,   0,0],
    [0,0,1,0,0,   1,0,0,0,1,   1,0,0,0,1,   0,0],
    [1,0,0,0,1,   0,0,0,0,1,   0,0,2,0,1,   0,0],    // 5  1 bonus
    
    [1,0,1,0,1,   0,0,1,0,1,   1,0,0,0,1,   0,0],
    [2,0,0,0,1,   1,0,0,0,0,   1,0,0,0,0,   0,0],
    [2,0,2,0,2,   1,0,0,0,1,   0,0,1,0,0,   0,0],
    [0,0,0,0,1,   0,0,1,0,0,   0,0,1,0,0,   0,0],
    [0,0,1,0,1,   1,0,0,0,0,   1,0,2,0,1,   0,0],    // 10  2
    
    [1,0,0,0,1,   0,0,0,0,1,   0,0,1,0,1,   0,0],
    [1,0,0,0,0,   1,0,0,0,1,   2,0,2,0,2,   0,0],
    [0,0,0,0,1,   0,0,2,0,1,   1,0,0,0,1,   0,0],
    [0,0,1,0,0,   0,0,1,0,1,   0,0,1,0,1,   0,0],
    [0,0,2,0,1,   0,0,0,0,1,   1,0,0,0,1,   0,0],     // 15  2
    
    [0,0,1,0,0,   0,0,1,0,0,   0,0,2,0,1,   0,0],
    [0,0,1,0,0,   0,0,0,0,1,   0,0,1,0,0,   0,4],
    [1,0,1,0,1,   2,0,2,0,2,   1,0,1,0,1,   0,0],
    [0,0,0,0,1,   1,0,1,0,1,   0,0,1,0,1,   0,0],
    [2,0,1,0,1,   1,0,0,0,1,   1,0,0,0,1,   0,0],    // 20  2
    
    [0,0,1,0,0,   1,0,1,0,0,   0,0,1,0,1,   0,0],
    [1,0,1,0,0,   0,0,0,0,1,   2,0,0,0,1,   0,0],
    [1,0,0,0,0,   2,0,2,0,2,   0,0,1,0,1,   0,0],
    [0,0,2,0,1,   0,0,0,0,1,   1,0,0,0,0,   0,0],
    [1,0,1,0,1,   1,0,1,0,0,   1,0,1,0,1,   0,0],    // 25  2
    
    [0,0,1,0,0,   0,0,2,0,1,   0,0,0,0,1,   0,0],
    [1,0,0,0,0,   1,0,0,0,0,   0,0,0,0,1,   0,0],
    [1,0,0,0,0,   1,0,0,0,1,   2,0,2,0,2,   0,0],
    [0,0,2,0,1,   0,0,0,0,1,   1,0,0,0,0,   0,0],
    [1,0,0,0,0,   0,0,2,0,1,   1,0,0,0,0,   0,0],    // 30  3
    
    [0,0,0,0,1,   0,0,0,0,1,   0,0,1,0,1,   0,0],
    [2,0,1,0,0,   1,0,0,0,1,   0,0,0,0,1,   0,0],
    [0,0,1,0,1,   1,0,2,0,0,   0,0,1,0,0,   0,0],
    [1,0,0,0,1,   1,0,1,0,0,   1,0,0,0,1,   0,0],
    [0,0,0,0,1,   1,0,0,0,2,   2,0,2,0,2,   0,0],    // 35  1
]

let levelTen: [[Int]] = [
    // Debris, barriers settitns: 1 debis(mine), 0 nothingy, 2 barrier(bonus), 4 middle barrier
    
    // Partition settings: 1 MAXleft, 2 MIDLeft 3 center, 4 MIDReight, 5 MAXRight, 6 Center 90 degres. First number 2 zPosition, second 4 zPosition
    // Partitions settings: First Low position 2z , second high position 4z
    
    // 14 bonus
    
    // low          middle        high       partition settings
    [0,0,1,0,0,   1,0,0,0,0,   0,0,0,0,1,   0,0],
    [1,0,0,0,1,   0,0,1,0,0,   0,0,0,0,1,   0,0],
    [0,0,0,0,1,   1,0,0,0,0,   1,0,0,0,0,   0,0],
    [0,0,1,0,0,   0,0,0,0,1,   1,0,0,0,1,   0,0],
    [2,0,0,0,1,   0,0,0,0,1,   0,0,2,0,1,   0,0],    // 5  2 bonus
    
    [1,0,1,0,0,   0,0,1,0,0,   0,0,0,0,1,   0,0],
    [0,0,0,0,1,   1,0,0,0,0,   1,0,0,0,0,   0,0],
    [1,0,0,0,0,   0,0,0,0,1,   0,0,1,0,0,   0,0],
    [0,0,0,0,1,   0,0,1,0,0,   0,0,1,0,0,   0,0],
    [0,0,1,0,2,   1,0,0,0,0,   1,0,2,0,0,   0,0],    // 10  2
    
    [1,0,0,0,0,   0,0,0,0,1,   0,0,0,0,1,   0,0],
    [1,0,0,0,0,   1,0,0,0,0,   0,0,1,0,0,   0,0],
    [0,0,0,0,1,   0,0,0,0,1,   1,0,0,0,0,   0,0],
    [0,0,1,0,0,   0,0,1,0,0,   0,0,0,0,1,   0,0],
    [0,0,2,0,1,   2,0,0,0,1,   1,0,0,0,1,   0,0],     // 15  2
    
    [0,0,1,0,0,   0,0,1,0,0,   0,0,0,0,1,   0,0],
    [0,0,1,0,0,   0,0,0,0,1,   0,0,1,0,0,   0,0],
    [0,0,0,0,1,   1,0,0,0,0,   0,0,0,0,1,   0,0],
    [0,0,0,0,1,   0,0,0,0,1,   0,0,1,0,0,   0,0],
    [0,0,1,0,0,   0,0,0,0,1,   2,0,0,0,2,   0,0],    // 20  2
    
    [0,0,1,0,0,   0,0,1,0,0,   0,0,1,0,0,   0,0],
    [0,0,1,0,0,   0,0,0,0,1,   0,0,0,0,1,   0,0],
    [1,0,0,0,0,   2,0,0,0,0,   2,0,1,0,0,   0,3],
    [0,0,0,0,1,   0,0,0,0,1,   1,0,0,0,0,   0,0],
    [1,0,0,0,0,   1,0,0,0,0,   0,0,0,0,1,   0,0],    // 25  2
    
    [0,0,1,0,0,   0,0,0,0,1,   0,0,0,0,1,   0,0],
    [1,0,0,0,0,   1,0,0,0,0,   0,0,0,0,1,   0,0],
    [1,0,0,0,0,   1,0,0,0,0,   1,0,0,0,0,   0,0],
    [0,0,0,0,1,   0,0,0,0,1,   1,0,0,0,0,   0,0],
    [2,0,1,0,0,   0,0,2,0,1,   1,0,0,0,0,   0,0],    // 30  2
    
    [0,0,0,0,1,   0,0,0,0,1,   0,0,0,0,1,   0,0],
    [0,0,1,0,0,   0,0,0,0,1,   0,0,0,0,1,   0,0],
    [0,0,1,0,0,   1,0,0,0,0,   0,0,1,0,0,   0,0],
    [0,0,0,0,1,   1,0,0,0,0,   1,0,0,0,1,   0,0],
    [0,0,0,0,1,   1,0,0,0,2,   1,0,2,0,0,   0,0],    // 35  2
]

let levelEleven: [[Int]] = [
    // Debris, barriers settitns: 1 debis(mine), 0 nothingy, 2 barrier(bonus), 4 middle barrier
    
    // Partition settings: 1 MAXleft, 2 MIDLeft 3 center, 4 MIDReight, 5 MAXRight, 6 Center 90 degres. First number 2 zPosition, second 4 zPosition
    // Partitions settings: First Low position 2z , second high position 4z
    
    // 14 bonus
    
    // low          middle        high       partition settings
    [0,4,0,4,0,   0,4,0,4,0,   0,4,0,4,0,   0,0],
    [1,0,0,0,1,   0,0,1,0,0,   0,0,0,0,1,   0,0],
    [1,4,1,4,1,   1,4,1,4,1,   1,4,1,4,1,   0,0],
    [0,0,1,0,0,   1,0,0,0,1,   1,0,0,0,1,   0,0],
    [1,0,2,0,1,   0,0,1,0,1,   0,0,1,0,1,   0,0],    // 5  1 bonus
    
    [1,0,1,0,0,   0,0,1,0,0,   0,0,0,0,1,   0,0],
    [2,0,1,0,1,   1,0,0,0,0,   1,0,1,0,0,   0,0],
    [1,4,1,4,1,   1,4,1,4,1,   1,4,1,4,1,   0,0],
    [0,1,0,0,1,   0,0,1,0,0,   2,0,1,0,1,   0,0],
    [1,0,1,0,1,   1,0,0,0,1,   1,0,1,0,1,   0,0],    // 10  2
    
    [1,0,1,0,2,   0,0,1,0,0,   1,0,0,0,1,   0,0],
    [1,0,0,0,0,   1,0,0,0,1,   0,0,1,0,2,   0,0],
    [1,4,1,4,1,   1,4,1,4,1,   1,4,1,4,1,   0,0],
    [0,0,1,0,1,   0,0,1,0,0,   1,0,0,0,1,   0,0],
    [0,0,1,0,1,   2,0,0,0,1,   1,0,0,0,1,   0,0],     // 15  3
    
    [0,0,1,0,1,   0,0,1,0,0,   0,0,0,0,1,   0,0],
    [1,0,1,0,0,   1,0,2,0,1,   0,0,1,0,0,   0,0],
    [1,4,1,4,1,   1,4,1,4,1,   1,4,1,4,1,   0,0],
    [1,0,0,0,1,   0,0,0,0,1,   0,0,1,0,1,   0,0],
    [0,0,1,0,0,   0,0,0,0,1,   1,0,0,0,2,   0,0],    // 20  2
    
    [1,0,1,0,0,   0,0,1,0,0,   0,0,1,0,1,   0,0],
    [0,0,1,0,0,   0,0,0,0,1,   0,0,0,0,1,   0,0],
    [1,4,1,4,1,   1,4,1,4,1,   1,4,1,4,1,   0,3],
    [0,0,1,0,1,   0,0,0,0,1,   1,0,2,0,0,   0,0],
    [1,0,0,0,1,   1,0,2,0,0,   1,0,0,0,1,   0,0],    // 25  2
    
    [1,0,1,0,0,   1,0,0,0,1,   0,0,0,0,1,   0,0],
    [1,0,0,0,0,   1,0,2,0,0,   0,0,0,0,1,   0,0],
    [1,4,1,4,1,   1,4,1,4,1,   1,4,1,4,1,   0,0],
    [0,0,0,0,1,   0,0,0,0,1,   1,0,0,0,0,   0,0],
    [2,0,1,0,0,   0,0,1,0,1,   1,0,1,0,0,   0,0],    // 30  2
    
    [0,0,0,0,1,   0,0,0,0,1,   0,0,0,0,1,   0,0],
    [0,0,1,0,1,   0,0,0,0,1,   2,0,0,0,1,   0,0],
    [1,4,1,4,1,   1,4,1,4,1,   1,4,1,4,1,   0,0],
    [0,0,0,0,1,   1,0,0,0,0,   1,0,0,0,1,   0,0],
    [0,0,2,0,1,   1,0,0,0,1,   1,0,1,0,0,   0,0],    // 35  2
]

let levelTwelve: [[Int]] = [
    // Debris, barriers settitns: 1 debis(mine), 0 nothingy, 2 barrier(bonus), 4 middle barrier
    
    // Partition settings: 1 MAXleft, 2 MIDLeft 3 center, 4 MIDReight, 5 MAXRight, 6 Center 90 degres. First number 2 zPosition, second 4 zPosition
    // Partitions settings: First Low position 2z , second high position 4z
    
    // 14 bonus
    
    // low          middle        high       partition settings
    [0,0,1,0,0,   1,0,0,0,0,   0,0,0,0,1,   0,0],
    [1,0,0,0,0,   0,0,1,0,0,   0,0,0,0,1,   0,0],
    [0,0,2,0,1,   0,0,0,0,1,   2,0,0,0,1,   0,0],
    [0,0,1,0,0,   1,0,0,0,0,   0,0,0,0,1,   0,0],
    [2,0,0,0,1,   1,0,0,0,1,   0,0,0,0,0,   0,0],    // 5  3 bonus
    
    [1,0,1,0,0,   0,0,1,0,0,   0,0,0,0,1,   0,0],
    [0,0,1,0,1,   1,0,0,0,0,   1,0,1,0,0,   0,0],
    [0,0,0,0,1,   2,0,2,0,2,   0,0,0,0,1,   0,0],
    [0,0,0,0,1,   0,0,1,0,0,   0,0,0,0,1,   0,0],
    [1,0,0,0,0,   1,0,0,0,0,   1,0,0,0,0,   0,0],    // 10  3
    
    [0,0,1,0,0,   0,0,1,0,0,   1,0,0,0,0,   0,0],
    [1,0,0,0,0,   1,0,2,0,0,   0,0,0,0,1,   0,0],
    [1,4,1,4,1,   1,4,1,4,1,   1,4,1,4,1,   0,0],
    [0,0,0,0,1,   0,0,1,0,0,   1,0,0,0,0,   0,0],
    [0,0,0,0,1,   2,0,0,0,1,   0,0,0,0,1,   0,0],     // 15  2
    
    [0,0,1,0,0,   0,0,1,0,0,   0,0,0,0,1,   0,0],
    [0,0,1,0,2,   0,0,0,0,1,   0,0,2,0,0,   0,0],
    [1,0,0,0,1,   1,0,0,0,0,   1,0,0,0,0,   0,0],
    [0,0,0,0,0,   0,0,0,0,0,   0,0,1,0,0,   0,0],
    [0,0,1,0,0,   0,0,0,0,1,   0,0,0,0,1,   0,0],    // 20  2
    
    [0,0,1,0,0,   0,0,1,0,0,   0,0,1,0,0,   0,0],
    [0,0,1,0,0,   0,0,0,0,1,   0,0,0,0,1,   0,0],
    [2,0,2,0,2,   0,0,0,0,1,   0,0,0,0,0,   0,3],
    [0,0,0,0,1,   0,0,0,0,1,   1,0,0,0,0,   0,0],
    [1,0,0,0,0,   1,0,0,0,0,   0,0,0,0,1,   0,0],    // 25  3
    
    [0,0,1,0,0,   1,0,0,0,1,   0,0,0,0,1,   0,0],
    [0,0,0,0,0,   1,0,2,0,0,   0,0,1,0,1,   0,0],
    [1,4,1,4,1,   1,4,1,4,1,   1,4,1,4,1,   0,0],
    [0,0,0,0,1,   0,0,0,0,1,   0,0,0,0,0,   0,0],
    [0,0,1,0,0,   1,0,2,0,1,   1,0,0,0,0,   0,0],    // 30  2
    
    [1,0,0,0,1,   0,0,0,0,1,   0,0,0,0,1,   0,0],
    [0,0,1,0,0,   0,0,0,0,1,   1,0,0,0,1,   0,0],
    [1,0,0,0,0,   0,0,0,0,1,   1,0,0,0,1,   0,0],
    [0,0,0,0,1,   0,0,0,0,0,   0,0,0,0,1,   0,0],
    [0,0,0,0,1,   1,0,0,0,0,   1,0,2,0,0,   0,0],    // 35  1
]






let constructionTimeIntervalArray: [[Double]] = [
    /*1*/[1,1,1,1,1,   1,1,1,1,1,   1,1,1,1,1,   1,1,1,1,1,   1,1,1,1,1,   1,1,1,1,1,   1,1,1,1,1,   1,1,1,1,1,   1,1,1,1,1,   1,1,1,1,1,   0.9,0.9,0.9,0.9,0.9,   1,1,1,1,1],   //60
    /*2*/[1,1,1,1,1,   0.9,0.9,0.9,0.9,5,   1,1,1,1,1,   0.8,0.8,0.8,0.8,0.8,   0.9,0.9,0.9,0.9,0.9,   1,1,1,1,1,   0.7,0.7,0.7,0.7,0.7,   0.8,0.8,0.8,0.8,0.8,   0.8,0.8,0.8,0.8,0.8,   0.9,0.9,0.9,0.9,0.9,   0.9,0.9,0.9,0.9,0.9,   0.8,0.8,0.8,0.8,0.8],
         /*3*/[1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5],   //60
    /*4*/[1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5,   1.5,1.5,1.5,1.5,1.5],
         /*5*/[2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2],   //15
    /*6*/[2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2],
         /*7*/[2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2],   //15
    /*8*/[2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2],
         /*9*/[2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2],   //15
    /*10*/[2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2],
          /*11*/[2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2],   //15
    /*12*/[2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2,   2,2,2,2,2]
]


func nextLevelFunc() {
    if planet == 1 {
        
        if level == 0 {
            //level = 0  // 1
            canMoveUpAndDown = false
            hintLevel = true
            onlyTopLevel = false
            puzzle = false
            constructionLevelDurationTimerInterval = 59
            debrisSpeed = .slow
            partitionSpeedHigh = .middleHigh
            partitionSpeedLow = .middleLow
            shipSpeedMovement = .slow
            
            scoreOneStar = 10
            scoreTwoStar = 15
            scoreThreeStars = 22
            
            
            //presentScene(sceneName: "Game scene")
            
        } else if level == 1 {
            if activeLevel[1] == 1 {
                //level = 1 // 2
                canMoveUpAndDown = false
                hintLevel = false
                onlyTopLevel = false
                puzzle = true
                constructionLevelDurationTimerInterval = 59
                debrisSpeed = .slow
                partitionSpeedHigh = .middleHigh
                partitionSpeedLow = .middleLow
                shipSpeedMovement = .slow
                
                scoreOneStar = 10
                scoreTwoStar = 20
                scoreThreeStars = 23
                
                
                
                //presentScene(sceneName: "Game scene")
                
                print("level2")
            }
        } else if level == 2 {
            if activeLevel[2] == 1 {
                
                //level = 2 //3
                canMoveUpAndDown = true
                hintLevel = true
                onlyTopLevel = true
                puzzle = false
                constructionLevelDurationTimerInterval = 59
                debrisSpeed = .slow
                partitionSpeedHigh = .middleHigh
                partitionSpeedLow = .middleLow
                shipSpeedMovement = .slow
                
                scoreOneStar = 10
                scoreTwoStar = 26
                scoreThreeStars = 28
                
                
                
                //presentScene(sceneName: "Game scene")
                print("level3")
            }
        } else if level == 3 {
            if activeLevel[3] == 1 {
                //level = 3 //4
                
                canMoveUpAndDown = true
                hintLevel = false
                onlyTopLevel = true
                puzzle = false
                constructionLevelDurationTimerInterval = 59
                debrisSpeed = .slow
                partitionSpeedHigh = .middleHigh
                partitionSpeedLow = .middleLow
                shipSpeedMovement = .slow
                
                scoreOneStar = 10
                scoreTwoStar = 29
                scoreThreeStars = 34
                
                //presentScene(sceneName: "Game scene")
                print("level4")
            }
        } else if level == 4 {
            if activeLevel[4] == 1 {
                //level = 4 //5
                
                canMoveUpAndDown = true
                hintLevel = true
                onlyTopLevel = false
                puzzle = false
                constructionLevelDurationTimerInterval = 59
                debrisSpeed = .slow
                partitionSpeedHigh = .middleHigh
                partitionSpeedLow = .middleLow
                shipSpeedMovement = .slow
                
                scoreOneStar = 10
                scoreTwoStar = 29
                scoreThreeStars = 34
                
                //presentScene(sceneName: "Game scene")
                print("level5")
            }
        } else if level == 5 {
            if activeLevel[5] == 1 {
                //level = 5 //6
                
                canMoveUpAndDown = true
                hintLevel = false
                onlyTopLevel = false
                puzzle = false
                constructionLevelDurationTimerInterval = 59
                debrisSpeed = .slow
                partitionSpeedHigh = .middleHigh
                partitionSpeedLow = .middleLow
                shipSpeedMovement = .slow
                
                scoreOneStar = 10
                scoreTwoStar = 30
                scoreThreeStars = 35
                
                //presentScene(sceneName: "Game scene")
                print("level6")
            }
        } else if level == 6 {
            if activeLevel[6] == 1 {
                //level = 6 //7
                
                canMoveUpAndDown = true
                hintLevel = false
                onlyTopLevel = false
                puzzle = false
                constructionLevelDurationTimerInterval = 59
                debrisSpeed = .slow
                partitionSpeedHigh = .middleHigh
                partitionSpeedLow = .middleLow
                shipSpeedMovement = .slow
                
                scoreOneStar = 4
                scoreTwoStar = 10
                scoreThreeStars = 12
                
                //presentScene(sceneName: "Game scene")
                print("level7")
            }
        } else if level == 7 {
            if activeLevel[7] == 1 {
                //level = 7 //8
                
                canMoveUpAndDown = true
                hintLevel = true
                onlyTopLevel = false
                puzzle = false
                constructionLevelDurationTimerInterval = 34
                debrisSpeed = .slow
                partitionSpeedHigh = .slowHigh
                partitionSpeedLow = .slowLow
                shipSpeedMovement = .slow
                
                scoreOneStar = 9
                scoreTwoStar = 11
                scoreThreeStars = 13
                
                //presentScene(sceneName: "Game scene")
                print("level8")
            }
        } else if level == 8 {
            if activeLevel[8] == 1 {
                //level = 8 //9
                
                canMoveUpAndDown = true
                hintLevel = true
                onlyTopLevel = false
                puzzle = false
                constructionLevelDurationTimerInterval = 34
                debrisSpeed = .slow
                partitionSpeedHigh = .slowHigh
                partitionSpeedLow = .slowLow
                shipSpeedMovement = .slow
                
                showTrioSP = true
                showRougeSP = false
                showInvisibleSP = false
                
                scoreOneStar = 9
                scoreTwoStar = 11
                scoreThreeStars = 13
                
                //presentScene(sceneName: "Game scene")
                print("level9")
            }
        } else if level == 9 {
            if activeLevel[9] == 1 {
                //level = 9 //10
                
                canMoveUpAndDown = true
                hintLevel = true
                onlyTopLevel = false
                puzzle = false
                constructionLevelDurationTimerInterval = 34
                debrisSpeed = .slow
                partitionSpeedHigh = .slowHigh
                partitionSpeedLow = .slowLow
                shipSpeedMovement = .slow
                
                showTrioSP = false
                showRougeSP = true
                showInvisibleSP = false
                
                scoreOneStar = 10
                scoreTwoStar = 12
                scoreThreeStars = 14
                
                //presentScene(sceneName: "Game scene")
                print("level10")
            }
        } else if level == 10 {
            if activeLevel[10] == 1 {
                //level = 10 //11
                
                canMoveUpAndDown = true
                hintLevel = true
                onlyTopLevel = false
                puzzle = false
                constructionLevelDurationTimerInterval = 34
                debrisSpeed = .slow
                partitionSpeedHigh = .slowHigh
                partitionSpeedLow = .slowLow
                shipSpeedMovement = .slow
                
                showTrioSP = false
                showRougeSP = false
                showInvisibleSP = true
                
                scoreOneStar = 10
                scoreTwoStar = 12
                scoreThreeStars = 14
                
                //presentScene(sceneName: "Game scene")
                print("level11")
            }
        } else if level == 11 {
            if activeLevel[11] == 1 {
                //level = 11 //12
                
                canMoveUpAndDown = true
                hintLevel = false
                onlyTopLevel = false
                puzzle = false
                constructionLevelDurationTimerInterval = 34
                debrisSpeed = .slow
                partitionSpeedHigh = .slowHigh
                partitionSpeedLow = .slowLow
                shipSpeedMovement = .slow
                
                showTrioSP = true
                showRougeSP = true
                showInvisibleSP = true
                
                scoreOneStar = 10
                scoreTwoStar = 14
                scoreThreeStars = 16
                
                //presentScene(sceneName: "Game scene")
                print("level12")
            }
        }
    }
    
}

/*
let levelThree: [[Int]] = [
    [1,0,0,0,0,0],
    [1,1,0,0,0,0],
    [1,1,1,0,0,0],
    [1,1,1,1,1,1]
]

let levelFour: [[Int]] = [
    [1,1,1,1,1,1],
    [1,1,1,1,1,1],
    [1,1,1,1,1,1],
    [1,1,1,1,1,1],
    [1,1,1,1,1,1],
    [1,1,1,1,1,1],
    [1,1,1,1,1,1],
    [1,1,1,1,1,1]
]
*/
//let middleBarrierLevel: [[]]
































